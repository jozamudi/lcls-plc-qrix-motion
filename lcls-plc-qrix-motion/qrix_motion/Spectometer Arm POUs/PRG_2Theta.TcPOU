<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_2Theta" Id="{49979313-c6aa-43cf-b80a-b1a64d0ce087}" SpecialFunc="None">
    <Declaration><![CDATA[
PROGRAM PRG_2Theta
VAR
    bInit: BOOL := TRUE;
    fbPower_AxisM2:  MC_Power;
    fb2ThetaStepper : FB_MotionStage;
    bMoveOk: BOOL;
    iEnableMotorState: UINT;
    tonEnableMotorTimeout: TON;
    tEnableMotorTimeoutTime: TIME := T#5s;
    bMovePos: BOOL;
    bMoveNeg: BOOL;
    bMovePosAndOK: BOOL;
    bMoveNegAndOK: BOOL;
    rtExecuteMove: R_TRIG;

    {attribute 'TcLinkTo' :=  'TIID^Device 2 (EtherCAT)^Rack#1A-01 Coupler (EK1100)^Rack#1A-04 DR_2Th (EL7047)^STM Status^Status^Ready'}
    b2ThetaDriveReady AT %I*: BOOL;
    {attribute 'TcLinkTo' :=  'TIPC^qrix_motion^qrix_motion Instance^PlcTask Outputs^PRG_SSL.EL7047_02_01_SSL_Status_to_NC'}
    nSSLDriveStatus AT %I* : USINT;
    bSSLDriveReady : BOOL;
END_VAR

VAR CONSTANT
    fThresholdPS1: REAL := 0.15;
    fThresholdPS2: REAL := 0.15;
    fThresholdPS3: REAL := 0.15;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF binit THEN
    bInit := FALSE;

    // Stepper
    //Main.M2.nBrakeMode := ENUM_StageBrakeMode.IF_ENABLED;
    // Disabled brake. It actually doesn't help with anything and we found that it
    // is sometimes interfering with the movement of the motor. We think it might be
    // some sort of lag in the brake disengaging that causes it to fight with the
    // drive for a bit, which causes overcurrent faults.
    Main.M2.nBrakeMode := ENUM_StageBrakeMode.IF_MOVING;
    Main.M2.bBrakeRelease := TRUE;
    Main.M2.bHardwareEnable := TRUE;
    Main.M2.bPowerSelf := TRUE;

    Main.M2.nEnableMode := ENUM_StageEnableMode.NEVER ;
END_IF;

bSSLDriveReady := nSSLDriveStatus.1; // Drive status ready bit after tying it to bFloating.

ACT_Stepper();
]]></ST>
    </Implementation>
    <Action Name="ACT_Stepper" Id="{66e0b0b8-d09b-4167-8180-d5937a88b96b}">
      <Implementation>
        <ST><![CDATA[
// Simplified enabling logic by removing separate fbPower function and
// making the estop and other permissives drive the bPowerSelf bit.
// Now, the motor motion is handled entirely within the FB_MotionStage block
// which makes this usage more standard and easier to work with using our
// standard typhos widget.
Main.M2.bHardwareEnable := 		GVL_EPS.bESTOP // ESTOP
                            AND GVL_Sensor.bFloating
                            AND	GVL_Sensor.stPS1.fValue > fThresholdPS1
                            AND GVL_Sensor.stPS2.fValue > fThresholdPS2
                            AND GVL_Sensor.stPS3.fValue > fThresholdPS3 // Compressed-air pressure
                            AND GVL_EPS.bOpenSV1
                            AND GVL_EPS.bOpenSV2;

IF NOT PRG_SSL.bRealignCouple THEN
    CASE iEnableMotorState OF
        0:
            IF Main.M2.bExecute AND GVL_Sensor.bFloating THEN
                rtExecuteMove(CLK:=FALSE);
                Main.M2.bExecute := FALSE;
                Main.M2.bEnable := TRUE;
                Main.M1.bEnable := TRUE;
                iEnableMotorState := iEnableMotorState + 1;
            ELSIF Main.M2.bExecute AND NOT GVL_Sensor.bFloating THEN
                Main.M2.bExecute := FALSE;
                Main.M2.bError := TRUE;
                Main.M1.bError := TRUE;
                Main.M2.sCustomErrorMessage := 'Move failed. Arm must be levitating to move.';
                Main.M1.sCustomErrorMessage := 'Move failed. Arm must be levitating to move.';
            ELSE
                Main.M2.bEnable := FALSE;
                Main.M1.bEnable := FALSE;
            END_IF
            tonEnableMotorTimeout(IN:=FALSE);
        1: // Wait until the logic confirms both motors are fully enabled
            tonEnableMotorTimeout(IN:=NOT Main.M2.bAllEnable OR NOT Main.M1.bAllEnable,PT:=tEnableMotorTimeoutTime);

            // Check which direction we are moving, and if the directional enables will allow that move.
            bMovePos        := Main.M2.stAxisStatus.fActPosition < Main.M2.fPosition;
            bMoveNeg        := Main.M2.stAxisStatus.fActPosition > Main.M2.fPosition;
            bMovePosAndOK   := bMovePos AND Main.M2.bAllForwardEnable AND Main.M1.bAllForwardEnable;
            bMoveNegAndOK   := bMoveNeg AND Main.M2.bAllBackwardEnable AND Main.M1.bAllBackwardEnable;

            // Check for fully enabled
            IF Main.M2.bAllEnable AND Main.M1.bAllEnable THEN
                // Check direction of motion and if that direction is enabled
                IF bMovePosAndOK OR bMoveNegAndOK THEN
                    iEnableMotorState := iEnableMotorState + 1;
                    tonEnableMotorTimeout(IN:=FALSE);
                ELSE
                    IF NOT Main.M2.bError OR Main.M1.bError THEN
                        // Direction of motion is not enabled, so let's report the error and give a helpful error message.
                        Main.M2.bError := TRUE;
                        Main.M1.bError := TRUE;
                        IF bMovePos THEN
                            IF NOT Main.M2.bLimitForwardEnable THEN
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to forward limit switch.';
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to forward limit switch for 2 theta motor.';
                            ELSIF NOT Main.M1.bLimitForwardEnable THEN
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to forward limit switch.';
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to forward limit switch for SSL motor.';
                            ELSIF NOT Main.M2.bGantryForwardEnable AND Main.M2.bGantryAxis THEN
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to gantry motion tolerance limit.';
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to gantry motion tolerance limit for 2 theta motor.';
                            ELSIF NOT Main.M1.bGantryForwardEnable AND Main.M1.bGantryAxis THEN
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to gantry motion tolerance limit.';
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to gantry motion tolerance limit for SSL motor.';
                            ELSIF NOT Main.M2.stEPSForwardEnable.bEPS_OK THEN
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to EPS condition.';
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to EPS condition for 2 theta motor.';
                            ELSIF NOT Main.M1.stEPSForwardEnable.bEPS_OK THEN
                                Main.M1.sCustomErrorMessage := 'Move forward failed due to EPS condition.';
                                Main.M2.sCustomErrorMessage := 'Move forward failed due to EPS condition for SSL motor.';
                            ELSE
                                Main.M1.sCustomErrorMessage := 'Move forward failed for unspecified reason.';
                                Main.M2.sCustomErrorMessage := 'Move forward failed for unspecified reason.';
                            END_IF
                        ELSIF bMoveNeg THEN
                            IF NOT Main.M2.bLimitBackwardEnable THEN
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to forward limit switch.';
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to forward limit switch for 2 theta motor.';
                            ELSIF NOT Main.M1.bLimitBackwardEnable THEN
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to forward limit switch.';
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to forward limit switch for SSL motor.';
                            ELSIF NOT Main.M2.bGantryBackwardEnable AND Main.M2.bGantryAxis THEN
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to gantry motion tolerance limit.';
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to gantry motion tolerance limit for 2 theta motor.';
                            ELSIF NOT Main.M1.bGantryBackwardEnable AND Main.M1.bGantryAxis THEN
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to gantry motion tolerance limit.';
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to gantry motion tolerance limit for SSL motor.';
                            ELSIF NOT Main.M2.stEPSBackwardEnable.bEPS_OK THEN
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to EPS condition.';
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to EPS condition for 2 theta motor.';
                            ELSIF NOT Main.M1.stEPSBackwardEnable.bEPS_OK THEN
                                Main.M1.sCustomErrorMessage := 'Move backward failed due to EPS condition.';
                                Main.M2.sCustomErrorMessage := 'Move backward failed due to EPS condition for SSL motor.';
                            ELSE
                                Main.M2.sCustomErrorMessage := 'Move backward failed for unspecified reason.';
                                Main.M1.sCustomErrorMessage := 'Move backward failed for unspecified reason.';
                            END_IF
                        ELSE
                            Main.M2.sCustomErrorMessage := 'Move failed because it was not large enough to register.';
                            Main.M1.sCustomErrorMessage := 'Move failed because it was not large enough to register.';
                        END_IF
                    END_IF
                    iEnableMotorState := 0;
                END_IF
            ELSIF tonEnableMotorTimeout.Q THEN
                IF NOT Main.M2.bError OR Main.M1.bError THEN
                    Main.M2.bError := TRUE;
                    Main.M1.bError := TRUE;
                    IF NOT Main.M2.bEnable THEN
                        Main.M2.sCustomErrorMessage := 'Move never enabled because bEnable never received.';
                        Main.M1.sCustomErrorMessage := 'Move never enabled because bEnable never received on 2 theta motor.';
                    ELSIF NOT Main.M1.bEnable THEN
                        Main.M1.sCustomErrorMessage := 'Move never enabled because bEnable never received.';
                        Main.M2.sCustomErrorMessage := 'Move never enabled because bEnable never received on SSL motor.';
                    ELSIF NOT Main.M2.bHardwareEnable THEN
                        Main.M2.sCustomErrorMessage := 'Move never enabled because bHardwareEnable set false.';
                        Main.M1.sCustomErrorMessage := 'Move never enabled because bHardwareEnable set false on 2 theta motor.';
                    ELSIF NOT Main.M1.bHardwareEnable THEN
                        Main.M1.sCustomErrorMessage := 'Move never enabled because bHardwareEnable set false.';
                        Main.M2.sCustomErrorMessage := 'Move never enabled because bHardwareEnable set false on SSL motor.';
                    ELSIF NOT Main.M2.stEPSPowerEnable.bEPS_OK THEN
                        Main.M2.sCustomErrorMessage := 'Move never enabled because of EPS condition.';
                        Main.M1.sCustomErrorMessage := 'Move never enabled because of EPS condition on 2 theta motor.';
                    ELSIF NOT Main.M1.stEPSPowerEnable.bEPS_OK THEN
                        Main.M1.sCustomErrorMessage := 'Move never enabled because of EPS condition.';
                        Main.M2.sCustomErrorMessage := 'Move never enabled because of EPS condition on SSL motor.';
                    ELSIF NOT Main.M2.bUserEnable THEN
                        Main.M2.sCustomErrorMessage := 'Move never enabled because user enable is set to false.';
                        Main.M1.sCustomErrorMessage := 'Move never enabled because user enable is set to false on 2 theta motor.';
                    ELSIF NOT Main.M1.bUserEnable THEN
                        Main.M1.sCustomErrorMessage := 'Move never enabled because user enable is set to false.';
                        Main.M2.sCustomErrorMessage := 'Move never enabled because user enable is set to false on SSL motor.';
                    ELSE
                        Main.M2.sCustomErrorMessage := 'Move never enabled in the timeout duration.';
                        Main.M1.sCustomErrorMessage := 'Move never enabled in the timeout duration.';
                    END_IF
                END_IF
                iEnableMotorState := 0;
            END_IF
        2: // Wait for the motor drives to switch to the ready state before commanding the move.
            tonEnableMotorTimeout(IN:=NOT b2ThetaDriveReady OR NOT bSSLDriveReady,PT:=tEnableMotorTimeoutTime);

            // Are both drives reporting that they are ready?
            IF b2ThetaDriveReady AND bSSLDriveReady THEN
                iEnableMotorState := iEnableMotorState + 1;
                tonEnableMotorTimeout(IN:=FALSE);
            ELSIF tonEnableMotorTimeout.Q THEN
                IF NOT Main.M2.bError OR Main.M1.bError THEN
                    Main.M2.bError := TRUE;
                    Main.M1.bError := TRUE;
                    IF NOT b2ThetaDriveReady THEN
                        Main.M2.sCustomErrorMessage := 'Move failed because motor drive did not get ready status before timeout.';
                        Main.M1.sCustomErrorMessage := 'Move failed because 2 theta motor drive did not get ready status before timeout.';
                    ELSE
                        Main.M1.sCustomErrorMessage := 'Move failed because motor drive did not get ready status before timeout.';
                        Main.M2.sCustomErrorMessage := 'Move failed because SSL motor drive did not get ready status before timeout.';
                    END_IF
                END_IF
                iEnableMotorState := 0;
            END_IF
        3: // Allow the move execution to begin
            rtExecuteMove(CLK:=TRUE);
            IF rtExecuteMove.Q THEN
                Main.M2.bExecute := TRUE;
            END_IF
            tonEnableMotorTimeout(IN:=NOT Main.M2.bBusy,PT:=T#100ms);
            IF tonEnableMotorTimeout.Q THEN
                iEnableMotorState := iEnableMotorState + 1;
            END_IF
    ELSE
        iEnableMotorState := 0;
    END_CASE
ELSE
    Main.M2.bEnable := TRUE;
    Main.M1.bEnable := TRUE;
END_IF

fb2ThetaStepper(stMotionStage:=Main.M2);
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>