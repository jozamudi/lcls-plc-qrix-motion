<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_DET_FRAME" Id="{ae792a1e-17b4-441d-8662-87ba0956d9c2}" SpecialFunc="None">
    <Declaration><![CDATA[
PROGRAM PRG_DET_FRAME
VAR
    bInit: BOOL := TRUE;
    {attribute 'pytmc' := '
        pv: QRIX:SA:bError
        io: i
    '}
    bError: BOOL := FALSE;
    {attribute 'pytmc' := '
        pv: QRIX:SA:bBusy
        io: i
    '}
    bBusy: BOOL;
    {attribute 'pytmc' := '
        pv: QRIX:SA:bMotorsBusy
        io: i
    '}
    bMotorsBusy: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:SA:bResetError'}
    bResetError: BOOL := FALSE;
    {attribute 'pytmc' := 'pv: QRIX:SA:EnableJackOff'}
    bEnableJackOff: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:SA:EnableLevitation'}
    bEnableLevitation: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:SA:EnableLanding'}
    bEnableLanding: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:DF:EnableAdjustingRoll'}
    bEnableAdjustingRoll: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:DF:EnableAdjustingPitch'}
    bEnableAdjustingPitch: BOOL;
    {attribute 'pytmc' := 'pv: QRIX:DF:EnableAdjustingHeight'}
    bEnableAdjustingHeight: BOOL;

    tonWaitToStabilize: TON;

    tonSV2Open: TON;
    tonSV1Close: TON;

    tonDelayTrig: TON;

    iStepJackOff: INT := 1;
    iStepAdjustingRoll : INT := 1;
    iStepAdjustingPitch : INT := 1;
    iStepAdjustingHeight : INT := 1;

    trigDone: F_TRIG;

    fDistanceX: LREAL := 2.114; // in m
    fDistanceZ: LREAL := 2.142; // in m

    fPositionThreshold: LREAL := 0.02; // mm
    fPositionMaxDeviation: LREAL := 10.0; // mm
    fPitchThreshold: LREAL := 0.02; // mrad
    fRollThreshold: LREAL := 0.02; // mrad

    {attribute 'pytmc' := '
        pv: QRIX:SA:fRollTarget
        io: io
    '}
    fRollTarget : LREAL;

    {attribute 'pytmc' := 'pv: QRIX:F'}
    fbYDFMotion: FB_3AxesJack;

    fbReset_M15: MC_RESET;
    fbReset_M16: MC_RESET;
    fbReset_M17: MC_RESET;

    nActiveSequenceIterationCount: UINT := 1;
    nSequenceIterationCount: UINT := 3;

    // EPS settings to prevent jacks from moving too far out of range of each other.
    EPS_YDF1_Up   : FB_EPS;
    EPS_YDF1_Down : FB_EPS;
    EPS_YDF2_Up   : FB_EPS;
    EPS_YDF2_Down : FB_EPS;
    EPS_YDF3_Up   : FB_EPS;
    EPS_YDF3_Down : FB_EPS;

    {attribute 'pytmc' := '
        pv: QRIX:SA:rJackingSpeed
        io: io
    '}
    rJackingSpeed: LREAL := 0.05;
    {attribute 'pytmc' := '
        pv: QRIX:SA:rJackingAccel
        io: io
    '}
    rJackingAccel: LREAL := 0.005;

    {attribute 'pytmc' := '
        pv: QRIX:SA:bStopAxes
        io: io
    '}
    bStopAxes: BOOL;

    {attribute 'TcLinkTo' := 'TIIB[Rack#2D LinearGaugeAmp (SC-HG1-ETC)]^Process Data(In)  TxPDO-Map^Sensor Warning}
    bLinearGaugeWarning AT %I* : BOOL;
    {attribute 'TcLinkTo' := 'TIIB[Rack#2D LinearGaugeAmp (SC-HG1-ETC)]^Process Data(In)  TxPDO-Map^Sensor Error}
    bLinearGaugeError AT %I* : BOOL;

    {attribute 'TcLinkToOSO' := '<0,1,2>TINC^NC-Task 1 SAF^Axes^M15 - YDF1^Enc^Inputs^In^nState1'}
    bLinearGaugeYDF1Ready AT %Q* : BOOL;
    {attribute 'TcLinkToOSO' := '<0,1,2>TINC^NC-Task 1 SAF^Axes^M16 - YDF2^Enc^Inputs^In^nState1'}
    bLinearGaugeYDF2Ready AT %Q* : BOOL;
    {attribute 'TcLinkToOSO' := '<0,1,2>TINC^NC-Task 1 SAF^Axes^M17 - YDF3^Enc^Inputs^In^nState1'}
    bLinearGaugeYDF3Ready AT %Q* : BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bInit THEN
    bInit := FALSE;

    Main.M15.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M15.bHardwareEnable := TRUE;
    Main.M15.bPowerSelf := TRUE;

    Main.M16.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M16.bHardwareEnable := TRUE;
    Main.M16.bPowerSelf := TRUE;

    Main.M17.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M17.bHardwareEnable := TRUE;
    Main.M17.bPowerSelf := TRUE;

    Main.M15.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M16.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M17.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
END_IF;

// FRAME JACKS EPS RESTRICTIONS
// YDF1 Disable movement in upward (positive/forward) direction.
EPS_YDF1_Up(eps:=Main.M15.stEPSForwardEnable);
EPS_YDF1_Up.setDescription('UPWARD MOVEMENT ALLOWED IF: YDF1 - YDF2 < 10mm AND YDF1 - YDF3 < 10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF1 from rising any more if it is more than fPositionMaxDeviation above YDF2
EPS_YDF1_Up.setBit(nBits:= 1, bValue:= Main.M15.stAxisStatus.fActPosition - Main.M16.stAxisStatus.fActPosition < fPositionMaxDeviation);
// Prevent YDF1 from rising any more if it is more than fPositionMaxDeviation above YDF3
EPS_YDF1_Up.setBit(nBits:= 0, bValue:= Main.M15.stAxisStatus.fActPosition - Main.M17.stAxisStatus.fActPosition < fPositionMaxDeviation);

// YDF1 Disable movement in downward (negative/downward) direction.
EPS_YDF1_Down(eps:=Main.M15.stEPSBackwardEnable);
EPS_YDF1_Down.setDescription('DOWNWARD MOVEMENT ALLOWED IF: YDF1 - YDF2 > -10mm AND YDF1 - YDF3 > -10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF1 from lowering any more if it is more than fPositionMaxDeviation below YDF2
EPS_YDF1_Down.setBit(nBits:= 1, bValue:= Main.M15.stAxisStatus.fActPosition - Main.M16.stAxisStatus.fActPosition > -fPositionMaxDeviation);
// Prevent YDF1 from lowering any more if it is more than fPositionMaxDeviation below YDF3
EPS_YDF1_Down.setBit(nBits:= 0, bValue:= Main.M15.stAxisStatus.fActPosition - Main.M17.stAxisStatus.fActPosition > -fPositionMaxDeviation);

// YDF2 Disable movement in upward (positive/forward) direction.
EPS_YDF2_Up(eps:=Main.M16.stEPSForwardEnable);
EPS_YDF2_Up.setDescription('UPWARD MOVEMENT ALLOWED IF:  YDF2 - YDF1 < 10mm AND YDF2 - YDF3 < 10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF2 from rising any more if it is more than fPositionMaxDeviation above YDF1
EPS_YDF2_Up.setBit(nBits:= 1, bValue:= Main.M16.stAxisStatus.fActPosition - Main.M15.stAxisStatus.fActPosition < fPositionMaxDeviation);
// Prevent YDF2 from rising any more if it is more than fPositionMaxDeviation above YDF3
EPS_YDF2_Up.setBit(nBits:= 0, bValue:= Main.M16.stAxisStatus.fActPosition - Main.M17.stAxisStatus.fActPosition < fPositionMaxDeviation);

// YDF2 Disable movement in downward (negative/downward) direction.
EPS_YDF2_Down(eps:=Main.M16.stEPSBackwardEnable);
EPS_YDF2_Down.setDescription('DOWNWARD MOVEMENT ALLOWED IF: YDF2 - YDF1 > -10mm AND YDF2 - YDF3 > -10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF2 from lowering any more if it is more than fPositionMaxDeviation below YDF1
EPS_YDF2_Down.setBit(nBits:= 1, bValue:= Main.M16.stAxisStatus.fActPosition - Main.M15.stAxisStatus.fActPosition > -fPositionMaxDeviation);
// Prevent YDF2 from lowering any more if it is more than fPositionMaxDeviation below YDF3
EPS_YDF2_Down.setBit(nBits:= 0, bValue:= Main.M16.stAxisStatus.fActPosition - Main.M17.stAxisStatus.fActPosition > -fPositionMaxDeviation);

// YDF3 Disable movement in upward (positive/forward) direction.
EPS_YDF3_Up(eps:=Main.M17.stEPSForwardEnable);
EPS_YDF3_Up.setDescription('UPWARD MOVEMENT ALLOWED IF: YDF3 - YDF2 < 10mm AND YDF3 - YDF1 < 10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF3 from rising any more if it is more than fPositionMaxDeviation above YDF2
EPS_YDF3_Up.setBit(nBits:= 1, bValue:= Main.M17.stAxisStatus.fActPosition - Main.M16.stAxisStatus.fActPosition < fPositionMaxDeviation);
// Prevent YDF3 from rising any more if it is more than fPositionMaxDeviation above YDF1
EPS_YDF3_Up.setBit(nBits:= 0, bValue:= Main.M17.stAxisStatus.fActPosition - Main.M15.stAxisStatus.fActPosition < fPositionMaxDeviation);

// YDF3 Disable movement in downward (negative/downward) direction.
EPS_YDF3_Down(eps:=Main.M17.stEPSBackwardEnable);
EPS_YDF3_Down.setDescription('DOWNWARD MOVEMENT ALLOWED IF: YDF3 - YDF2 > -10mm AND YDF3 - YDF1 > -10mm |'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Prevent YDF3 from lowering any more if it is more than fPositionMaxDeviation below YDF2
EPS_YDF3_Down.setBit(nBits:= 1, bValue:= Main.M17.stAxisStatus.fActPosition - Main.M16.stAxisStatus.fActPosition > -fPositionMaxDeviation);
// Prevent YDF3 from lowering any more if it is more than fPositionMaxDeviation below YDF1
EPS_YDF3_Down.setBit(nBits:= 0, bValue:= Main.M17.stAxisStatus.fActPosition - Main.M15.stAxisStatus.fActPosition > -fPositionMaxDeviation);

GVL_Sensor.bFloating := GVL_Sensor.stPS1.fValue > 0.3 AND GVL_Sensor.stPS2.fValue > 0.18 AND GVL_Sensor.stPS3.fValue > 0.15;

bMotorsBusy := Main.M15.bBusy OR Main.M16.bBusy OR Main.M17.bBusy;

IF Main.M15.bError OR Main.M16.bError OR Main.M17.bError THEN
    bError := TRUE;
    iStepJackOff := -1;
    iStepAdjustingRoll := -1;
    iStepAdjustingPitch := -1;
    iStepAdjustingHeight := -1;
    IF NOT Main.M15.bError THEN
        Main.M15.bReset := TRUE;
    END_IF;
    IF NOT Main.M16.bError THEN
        Main.M16.bReset := TRUE;
    END_IF;
    IF NOT Main.M17.bError THEN
        Main.M17.bReset := TRUE;
    END_IF;
END_IF

ACT_1_JACK_OFF();
ACT_2_Levitation();
ACT_3_Landing();
ACT_4_AdjustingRoll();
ACT_5_AdjustingPitch();
ACT_6_AdjustingHeight();
ACT_ResetError();

bLinearGaugeYDF1Ready := NOT bLinearGaugeError;
bLinearGaugeYDF2Ready := NOT bLinearGaugeError;
bLinearGaugeYDF3Ready := NOT bLinearGaugeError;

fbYDFMotion(
    bMoveOk			  := GVL_EPS.bESTOP,
    stJack1Axis		  := Main.M16,
    stJack2Axis		  := Main.M15,
    stJack3Axis		  := Main.M17,
    rDistanceX        := fDistanceX,
    rDistanceZ        := fDistanceZ,
    bJack3DoesPitch   :=  TRUE,
    rLimitPositionMax :=  21.5,
    rLimitPositionMin := -0.5,
    rLimitPitchMin    := -10,
    rLimitPitchMax    :=  10,
    rLimitRollMin     := -10,
    rLimitRollMax     :=  10,
    fMaxVelocity      :=  rJackingSpeed,
    fHighAccel        :=  rJackingAccel
);

IF bStopAxes THEN
    Main.M1.bExecute := FALSE;
    Main.M2.bExecute := FALSE;
    Main.M7.bExecute := FALSE;
    Main.M8.bExecute := FALSE;
    Main.M9.bExecute := FALSE;
    Main.M15.bExecute := FALSE;
    Main.M16.bExecute := FALSE;
    Main.M17.bExecute := FALSE;
    bStopAxes := FALSE;
END_IF
]]></ST>
    </Implementation>
    <Action Name="ACT_1_JACK_OFF" Id="{09afe1fc-0e24-49bc-b799-7093c0737ca7}">
      <Implementation>
        <ST><![CDATA[
CASE iStepJackOff OF
    1:
        IF bEnableJackOff AND NOT(bBusy AND bError) THEN
            iStepJackOff := 2;
            bDoneJackOff := FALSE;
            bBusy := TRUE;
            fbYDFMotion.bMoveToPosition := FALSE;
            fbYDFMotion.bMoveToPitch := FALSE;
            fbYDFMotion.bMoveToRoll := FALSE;
        ELSE
            bEnableJackOff := FALSE;
        END_IF;
    2:
        // Step2 check if we are already at position or if we are in an error position.
        IF abs(Main.M15.stAxisStatus.fActPosition) < fPositionThreshold AND
           abs(Main.M16.stAxisStatus.fActPosition) < fPositionThreshold AND
           abs(Main.M17.stAxisStatus.fActPosition) < fPositionThreshold THEN
            // We dont need to move any more....
            iStepJackOff := 4;
        ELSE
            iStepJackOff := 3;
        END_IF;
    3:
        // Step3 set target position
        fbYDFMotion.rReqPosition := 0.0;
        fbYDFMotion.bMoveToPosition := TRUE;
        fbYDFMotion.rReqRoll := 0.0;
        fbYDFMotion.bMoveToRoll := TRUE;
        fbYDFMotion.rReqPitch := 0.0;
        fbYDFMotion.bMoveToPitch := TRUE;

        iStepJackOff := 2;
    4:
        // End
        bEnableJackOff:= FALSE;
        bBusy := FALSE;
        iStepJackOff:=1;
        bDoneJackOff := TRUE;
        fbYDFMotion.bMoveToPosition := FALSE;
        fbYDFMotion.bMoveToPitch := FALSE;
        fbYDFMotion.bMoveToRoll := FALSE;
    -1:
        // Error
        bError:= TRUE;
        bEnableJackOff:= FALSE;
        bBusy := FALSE;
        iStepJackOff:=1;
        bDoneJackOff := FALSE;
        fbYDFMotion.bMoveToPosition := FALSE;
        fbYDFMotion.bMoveToPitch := FALSE;
        fbYDFMotion.bMoveToRoll := FALSE;

END_CASE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_2_Levitation" Id="{1a03c01c-79f3-40e9-8f85-fa3729e0ff5d}">
      <Implementation>
        <ST><![CDATA[
IF bEnableLevitation AND NOT (bBusy OR bError) THEN
    bBusy := TRUE;
    IF GVL_Sensor.stPS1.fValue > 0.15 AND GVL_Sensor.stPS2.fValue > 0.15 THEN
        GVL_EPS.bOpenSV1 := TRUE;
    END_IF;
    bDoneLevitation := FALSE;
END_IF;

// SV2 will open after 3 secounds from SV1 opened...
tonSV2Open(
    IN := bEnableLevitation AND GVL_EPS.bOpenSV1,
    PT := T#3s
);

IF tonSV2Open.Q THEN
    GVL_EPS.bOpenSV2 := TRUE;
    bEnableLevitation := FALSE;
    bDoneLevitation := TRUE;
    bBusy := FALSE;
END_IF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_3_Landing" Id="{3bd8bb9a-fa83-47b4-b111-8c64a2c33f1d}">
      <Implementation>
        <ST><![CDATA[
IF bEnableLanding AND NOT (bBusy OR bError) THEN
    GVL_EPS.bOpenSV2 := FALSE;
    bBusy:= TRUE;
    bDoneLanding := FALSE;
END_IF;

tonSV1Close(
    IN := bEnableLanding AND NOT GVL_EPS.bOpenSV2,
    PT := T#3s
);

IF tonSV1Close.Q THEN
    GVL_EPS.bOpenSV1 := FALSE;
    bEnableLanding := FALSE;
    bBusy:= FALSE;
    bDoneLanding := TRUE;
END_IF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_4_AdjustingRoll" Id="{f84b9517-e50c-4b86-bce7-a61f7bf2814f}">
      <Implementation>
        <ST><![CDATA[
CASE iStepAdjustingRoll OF
    1:
        IF bEnableAdjustingRoll AND NOT(bBusy AND bError) THEN
            iStepAdjustingRoll := 2;
            bDoneAdjustingRoll := FALSE;
            bBusy := TRUE;
            fbYDFMotion.bMoveToRoll := FALSE;
            nActiveSequenceIterationCount := 0;
        ELSE
            bEnableAdjustingRoll := FALSE;
        END_IF;
    2:
        // Step3 set target roll
        IF abs(GVL_Sensor.stFrameR.fValue - fRollTarget) > fRollThreshold THEN
            fbYDFMotion.bMoveToRoll := TRUE;
            iStepAdjustingRoll := 3;
            fbYDFMotion.rReqRoll := fbYDFMotion.rActRoll - (GVL_Sensor.stFrameR.fValue - fRollTarget) * 0.5;
        ELSE
            // Already at goal.
            iStepAdjustingRoll := 4;
        END_IF;
    3:
        // Wait until Done. and wait tilt sensor stabilization.
        tonWaitToStabilize(IN:=NOT bMotorsBusy, PT:=T#5s);
        IF tonWaitToStabilize.Q THEN
            iStepAdjustingRoll := 4;
            tonWaitToStabilize(IN:=FALSE);
        END_IF;
    4:
        IF nActiveSequenceIterationCount > nSequenceIterationCount THEN
            // Exceeded maximum allowable number of iterations. Something is wrong.
            iStepAdjustingRoll := -1;
        ELSIF abs(GVL_Sensor.stFrameR.fValue - fRollTarget) > fRollThreshold THEN
            // Iteration
            iStepAdjustingRoll := 2;
            fbYDFMotion.bMoveToRoll := FALSE;
            nActiveSequenceIterationCount := nActiveSequenceIterationCount + 1;
        ELSE
            // End
            bEnableAdjustingRoll:= FALSE;
            bBusy := FALSE;
            iStepAdjustingRoll:=1;
            bDoneAdjustingRoll := TRUE;
            fbYDFMotion.bMoveToRoll := FALSE;
        END_IF;
    -1:
        // Error
        bError:= TRUE;
        bBusy := FALSE;
        bEnableAdjustingRoll:= FALSE;
        iStepAdjustingRoll:=1;
        bDoneAdjustingRoll := FALSE;
        fbYDFMotion.bMoveToRoll := FALSE;
END_CASE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_5_AdjustingPitch" Id="{96ae706d-13dc-4d26-978b-353a0e965687}">
      <Implementation>
        <ST><![CDATA[
CASE iStepAdjustingPitch OF
    1:
        IF bEnableAdjustingPitch AND NOT(bBusy AND bError) THEN
            iStepAdjustingPitch := 2;
            bDoneAdjustingPitch := FALSE;
            bBusy := TRUE;
            fbYDFMotion.bMoveToPitch := FALSE;
            nActiveSequenceIterationCount := 0;
        ELSE
            bEnableAdjustingPitch := FALSE;
        END_IF;
    2:
        // Step2 set target pitch
        IF abs(GVL_Sensor.stFrameP.fValue) > fPitchThreshold THEN
            fbYDFMotion.bMoveToPitch := TRUE;
            iStepAdjustingPitch := 3;
            fbYDFMotion.rReqPitch := fbYDFMotion.rActPitch - GVL_Sensor.stFrameP.fValue * 0.5;
        ELSE
            // Already at goal.
            iStepAdjustingPitch := 4;
        END_IF;
    3:
        // Wait until Done. and wait tilt sensor stabilization.
        tonWaitToStabilize(IN:=NOT bMotorsBusy, PT:=T#5s);
        IF tonWaitToStabilize.Q THEN
            iStepAdjustingPitch := 4;
            tonWaitToStabilize(IN:=FALSE);
        END_IF;
    4:
        IF nActiveSequenceIterationCount > nSequenceIterationCount THEN
            // Exceeded maximum allowable number of iterations. Something is wrong.
            iStepAdjustingPitch := -1;
        ELSIF abs(GVL_Sensor.stFrameP.fValue) > fPitchThreshold THEN
            // Iteration
            iStepAdjustingPitch := 2;
            fbYDFMotion.bMoveToPitch := FALSE;
            nActiveSequenceIterationCount := nActiveSequenceIterationCount + 1;
        ELSE
            // End
            bEnableAdjustingPitch:= FALSE;
            bBusy := FALSE;
            iStepAdjustingPitch:=1;
            bDoneAdjustingPitch := TRUE;
            fbYDFMotion.bMoveToPitch := FALSE;
        END_IF;
    -1:
        // Error
        bError:= TRUE;
        bBusy := FALSE;
        bEnableAdjustingPitch:= FALSE;
        iStepAdjustingPitch:=1;
        bDoneAdjustingPitch := FALSE;
        fbYDFMotion.bMoveToPitch := FALSE;
END_CASE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_6_AdjustingHeight" Id="{ecff2fe2-4916-403e-be1d-379dbc38b465}">
      <Implementation>
        <ST><![CDATA[
CASE iStepAdjustingHeight OF
    1:
        IF bEnableAdjustingHeight AND NOT(bBusy AND bError) THEN
            iStepAdjustingHeight := 2;
            bDoneAdjustingHeight := FALSE;
            bBusy := TRUE;
            fbYDFMotion.bMoveToPosition := FALSE;
            nActiveSequenceIterationCount := 0;
        ELSE
            bEnableAdjustingHeight := FALSE;
        END_IF;
    2:
        // Step2 set target position
        IF abs(GVL_Sensor.stHDF.fValue) > fPositionThreshold THEN
            fbYDFMotion.bMoveToPosition := TRUE;
            iStepAdjustingHeight := 3;
            fbYDFMotion.rReqPosition := fbYDFMotion.rActPosition - GVL_Sensor.stHDF.fValue;
        ELSE
            // Already at goal.
            iStepAdjustingHeight := 4;
        END_IF;
    3:
        // Wait until Done. and wait tilt sensor stabilization.
        tonWaitToStabilize(IN:=NOT bMotorsBusy, PT:=T#5s);
        IF tonWaitToStabilize.Q THEN
            iStepAdjustingHeight := 4;
            tonWaitToStabilize(IN:=FALSE);
        END_IF;
    4:
        IF nActiveSequenceIterationCount > nSequenceIterationCount THEN
            // Exceeded maximum allowable number of iterations. Something is wrong.
            iStepAdjustingHeight := -1;
        ELSIF abs(GVL_Sensor.stHDF.fValue) > fPositionThreshold THEN
            // Iteration
            iStepAdjustingHeight := 2;
            fbYDFMotion.bMoveToPosition := FALSE;
            nActiveSequenceIterationCount := nActiveSequenceIterationCount + 1;
        ELSE
            // End
            bEnableAdjustingHeight:= FALSE;
            bBusy := FALSE;
            iStepAdjustingHeight:=1;
            bDoneAdjustingHeight := TRUE;
            fbYDFMotion.bMoveToPosition := FALSE;
        END_IF;
    -1:
        // Error
        bError:= TRUE;
        bBusy := FALSE;
        bEnableAdjustingHeight:= FALSE;
        iStepAdjustingHeight:=1;
        bDoneAdjustingHeight := FALSE;
END_CASE;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_ResetError" Id="{06590c9c-35f1-44d5-8e2b-6f518c77179c}">
      <Implementation>
        <ST><![CDATA[
IF bResetError THEN
    bResetError := FALSE;
    bError:= FALSE;
    bBusy:=FALSE;
    bEnableJackOff := FALSE;
    bEnableLevitation := FALSE;
    bEnableLanding := FALSE;
    bEnableAdjustingRoll := FALSE;
    bEnableAdjustingPitch := FALSE;
    bEnableAdjustingHeight := FALSE;

    Main.M2.bReset := TRUE;
    Main.M2.bError := FALSE;

    (*Reset*)
    fbReset_M15(
        Execute:=Main.M15.Axis.Status.Error,
        Axis:=Main.M15.Axis,
        Done=> ,
        Busy=> ,
        Error=> ,
        ErrorID=> );
    fbReset_M16(
        Execute:=Main.M16.Axis.Status.Error,
        Axis:=Main.M16.Axis,
        Done=> ,
        Busy=> ,
        Error=> ,
        ErrorID=> );
    fbReset_M17(
        Execute:=Main.M17.Axis.Status.Error,
        Axis:=Main.M17.Axis,
        Done=> ,
        Busy=> ,
        Error=> ,
        ErrorID=> );

    iStepJackOff := 1;
    iStepAdjustingRoll := 1;
    iStepAdjustingPitch := 1;
    iStepAdjustingHeight := 1;

    fbYDFMotion.bMoveToPosition := FALSE;
    fbYDFMotion.bMoveToPitch := FALSE;
    fbYDFMotion.bMoveToRoll := FALSE;
    fbYDFMotion.rReqPosition := fbYDFMotion.rActPosition;
    fbYDFMotion.rReqPitch := fbYDFMotion.rActPitch;
    fbYDFMotion.rReqRoll := fbYDFMotion.rActRoll;

    bStopAxes := TRUE;
END_IF;
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>