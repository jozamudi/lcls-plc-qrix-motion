<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_SSL" Id="{35c5b597-c1e5-471b-bc57-49572aa20da4}" SpecialFunc="None">
    <Declaration><![CDATA[
PROGRAM PRG_SSL
VAR
    fb_SSL_Motor : FB_MotionStage;
    (*EPS Limit switches*)
    {attribute 'TcLinkTo' := 'TIIB[EL1004_02_03]^Channel 2^Input'}
    bLimitBackwardEnable AT %I* :BOOL;
    {attribute 'TcLinkTo' := 'TIIB[EL1004_02_03]^Channel 3^Input'}
    bLimitForwardEnable AT %I* :BOOL;
    {attribute 'pytmc' := 'pv: QRIX:SPCA:COUPLED'}

    bExecuteCouple: BOOL := FALSE;
    bExecuteDecouple: BOOL := FALSE;

    bInit : BOOl := TRUE;

    // Function block to couple sliding seal motor motion to 2Theta motion
    fbSSLTo2ThetaCoupling: FB_GantryAutoCoupling;

    {attribute 'TcLinkTo' := '	.Count := TIID^Device 2 (EtherCAT)^Rack#1A-01 Coupler (EK1100)^Rack#1A-06 ENC_2Th (EL5042)^FB Inputs Channel 1^Position'}
    stRenishawAbsEncMaster: ST_RenishawAbsEnc;

    {attribute 'TcLinkTo' := 'TIID^Device 2 (EtherCAT)^B950-233-WALL-S-R01-DRL-01^EL5042_02_02^FB Inputs Channel 1^Position'}
    nRenishawAbsEncSlaveCounts AT %I*: ULINT; // Connect to encoder "Position" inputULINT
    fSlaveCountsToMasterCountsScalingFactor: LREAL;
    fRenishawAbsEncSlaveCountsInMasterScale: LREAL;
    nRenishawAbsEncSlaveCountsInMasterScale: ULINT;
    stRenishawAbsEncSlave: ST_RenishawAbsEnc;

    nGantryTolerance: LINT;
    fAngleOffset: LREAL;


    {attribute 'pytmc' := '
        pv: QRIX:SSL2ThetaDegTol
        io: io
    '}
    fAngleTolerance: REAL := 0.2;

    {attribute 'pytmc' := '
        pv: QRIX:SSL2ThetaPosDiff
        io: i
    '}
    fPosDiff: REAL;

    fbExtSetPointGenEnable: MC_ExtSetPointGenEnable;
    fbExtSetPointGenDisable: MC_ExtSetPointGenDisable;

    {attribute 'pytmc' := '
        pv: QRIX:bRealignCouple
        io: io
    '}
    bRealignCouple: BOOL;
    {attribute 'pytmc' := '
        pv: QRIX:iRealignStep
        io: i
    '}
    iRealignStep: UINT := 0;
    {attribute 'pytmc' := '
        pv: QRIX:bRealignSpeed
        io: io
    '}
    fRealignSpeed: LREAL := 0.05;
    rtStopSSL: R_TRIG;
    tonRealignCoupleTimeout: TON;
    timeRealignTimeout: TIME;
    bFullyDecouple: BOOL;

    EL7047_02_01_SSL_Status AT %I*: USINT;
    EL7047_02_01_SSL_Status_to_NC AT %Q*: USINT;

END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF bInit THEN
    bInit := FALSE;
    Main.M1.bPowerSelf := TRUE;
    Main.M1.bHardwareEnable := TRUE;
    Main.M1.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M1.nEnableMode := ENUM_StageEnableMode.NEVER;
END_IF

// Due to bug in SSL drive, ready bit is not being reported properly. This will tie the ready bit to the floating status.
EL7047_02_01_SSL_Status.1 := GVL_Sensor.bFloating;
EL7047_02_01_SSL_Status_to_NC := EL7047_02_01_SSL_Status;

// Set the encoder counts at the zero position
// CHOOSING TO SET THE COUNTS IN UNITS OF THE SCALE OF THE PRIMARY AXIS ENCODER.
// THE VIRTUAL LIMIT SWITCH FUNCTION BLOCK IN THE GANTRY AUTOCOUPLING FB ASSUMES
// THAT THE ENCODERS HAVE THE SAME SCALE. HOWEVER IN THIS CASE, THEY DO NOT HAVE
// THE SAME SCALE. IN ORDER TO COMPARE THEM USING THE GANTRY FB, THE SECONDARY
// AXIS ENCODER COUNTS HAVE TO BE SCALED TO MATCH THE PRIMARY AXIS ENCODER COUNTS.
fSlaveCountsToMasterCountsScalingFactor := Main.M1.stAxisParameters.fEncScaleFactorInternal / Main.M2.stAxisParameters.fEncScaleFactorInternal;
fRenishawAbsEncSlaveCountsInMasterScale := ULINT_TO_LREAL(nRenishawAbsEncSlaveCounts) * fSlaveCountsToMasterCountsScalingFactor;
nRenishawAbsEncSlaveCountsInMasterScale := LREAL_TO_ULINT(fRenishawAbsEncSlaveCountsInMasterScale);
stRenishawAbsEncSlave.Count := nRenishawAbsEncSlaveCountsInMasterScale;

// Going to use 90 degree position as the reference position because the Ref value is an unsigned value. This makes it so I
// can't set the reference to actual 0 because that requires a negative number.
stRenishawAbsEncMaster.Ref := LREAL_TO_ULINT((90.0 - Main.M2.stAxisParameters.fEncOffset) / Main.M2.stAxisParameters.fEncScaleFactorInternal);
stRenishawAbsEncSlave.Ref := LREAL_TO_ULINT((90.0 - Main.M1.stAxisParameters.fEncOffset) / Main.M1.stAxisParameters.fEncScaleFactorInternal * fSlaveCountsToMasterCountsScalingFactor);

// Compute the gantry tolerance
// Tolerance = X degrees
// 0.000003001664895 deg/count => For 0.1 deg tolerance then 0.1 deg / 0.000003001664895 deg/count = 33315 counts for 0.1 deg
nGantryTolerance := LREAL_TO_LINT(fAngleTolerance / Main.M2.stAxisParameters.fEncScaleFactorInternal);

fAngleOffset := LINT_TO_LREAL(
        ( ULINT_TO_LINT(stRenishawAbsEncMaster.Count) - ULINT_TO_LINT(stRenishawAbsEncMaster.Ref) ) -
        ( ULINT_TO_LINT(stRenishawAbsEncSlave.Count) - ULINT_TO_LINT(stRenishawAbsEncSlave.Ref) )
    ) * Main.M2.stAxisParameters.fEncScaleFactorInternal;

// AutoCoupling
fbSSLTo2ThetaCoupling(	nGantryTol 			:= nGantryTolerance,
                        Master				:= Main.M2,
                        MasterEnc			:= stRenishawAbsEncMaster,
                        Slave				:= Main.M1,
                        SlaveEnc			:= stRenishawAbsEncSlave,
                        bExecuteCouple 		:= bExecuteCouple,
                        bExecuteDecouple 	:= bExecuteDecouple,
);

// Calculate twice the expected amount of time to make the realignment move.
timeRealignTimeout := LREAL_TO_TIME(abs(Main.M1.stAxisStatus.fActPosition - Main.M2.stAxisStatus.fActPosition) / fRealignSpeed * 3.0 * 1000.0);
tonRealignCoupleTimeout(IN:=bRealignCouple,PT:=timeRealignTimeout);
CASE iRealignStep OF
    0:
        IF bRealignCouple THEN
            iRealignStep := 1;
        END_IF
    1:
        // Step 1: If the gantry is already coupled, the motor is not busy, and it is enabled, then decouple the axes.
        IF fbSSLTo2ThetaCoupling.bGantryAlreadyCoupled AND NOT Main.M1.bBusy AND NOT Main.M1.bError THEN
            bExecuteDecouple := TRUE;
            iRealignStep := 2;
        ELSIF NOT fbSSLTo2ThetaCoupling.bGantryAlreadyCoupled AND NOT Main.M1.bBusy AND NOT Main.M1.bError THEN
            iRealignStep := 2;
        END_IF
    2:
        // Step 2: If the gantry is no longer coupled, the motor is not busy, and it is enabled, then reset the decouple command and
        //         command the axis to align the SSL motor to the 2Theta motor. Set the bTriedToRealign bit to true to record that
        //         the realign sequence is what commanded the move.
        IF NOT fbSSLTo2ThetaCoupling.bGantryAlreadyCoupled AND NOT Main.M1.bBusy AND NOT Main.M1.bError THEN
            bExecuteDecouple := FALSE;
            Main.M1.fPosition := Main.M2.stAxisStatus.fActPosition;
            Main.M1.fVelocity := fRealignSpeed;
            Main.M1.bMoveCmd := TRUE;
            iRealignStep := 3;
        END_IF
    3:
        // Step 3: Wait for the SSL motor to reach the busy status, then proceed.
        IF Main.M1.bBusy THEN
            iRealignStep := 4;
        END_IF
    4:
        // Step 4: If the SSL motor is no longer busy (finished or errored or stopped) then recouple the SSL motor to
        //         the 2Theta motor.
        IF NOT Main.M1.bBusy AND NOT Main.M1.bError THEN
            bExecuteCouple := TRUE;
            iRealignStep := 5;
        END_IF
    5:
        // Step 5: If the motors are coupled again then reinitialize the bits to
        //         get them ready for another realignment attempt in the future.
        IF fbSSLTo2ThetaCoupling.bGantryAlreadyCoupled THEN
            iRealignStep := 0;
            bRealignCouple := FALSE;
            bExecuteDecouple := FALSE;
            bExecuteCouple := FALSE;
            tonRealignCoupleTimeout(IN:=FALSE);
        ELSE
            iRealignStep := 4;
        END_IF
END_CASE

// Timeout: In case something bad happens, have the timeout timer in place to reset the bits to guarantee we do not get
//          stuck in this recoupling and alignment sequence.
// If coupled axis fails to move due to axis not ready, may need to force the SSL motor ready status to TRUE. Then is allows it to move.
// seems like some sort of bug with decoupling/coupling the axes too much.
IF bRealignCouple AND tonRealignCoupleTimeout.Q THEN
    IF fbSSLTo2ThetaCoupling.bGantryAlreadyCoupled OR Main.M1.bError THEN
        iRealignStep := 0;
        bRealignCouple := FALSE;
        bExecuteDecouple := FALSE;
        bExecuteCouple := FALSE;
        tonRealignCoupleTimeout(IN:=FALSE);
    ELSIF NOT Main.M1.bBusy THEN
        bExecuteCouple := TRUE;
    END_IF
END_IF

fPosDiff := Main.M1.stAxisStatus.fActPosition - Main.M2.stAxisStatus.fActPosition;

fb_SSL_Motor(stMotionStage:=Main.M1);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>