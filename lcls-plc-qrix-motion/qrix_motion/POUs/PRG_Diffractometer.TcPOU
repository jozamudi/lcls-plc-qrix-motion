<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="PRG_Diffractometer" Id="{47cc6d87-f16c-4ab2-afb0-97aaa2cfa842}" SpecialFunc="None">
    <Declaration><![CDATA[
PROGRAM PRG_Diffractometer
VAR
    fb_Diff_Theta : FB_MotionStage;
    fb_Diff_2Theta : FB_MotionStage;
    fb_Diff_2ThetaY : FB_MotionStage;
    fb_Diff_Chi : FB_MotionStage;
    fb_Diff_Phi : FB_MotionStage;
    fb_Diff_X : FB_MotionStage;
    fb_Diff_Y : FB_MotionStage;
    fb_Diff_Z : FB_MotionStage;
    bInit : BOOl := TRUE;

    //EPS
    EPS_Diff_Chi_Backward : FB_EPS;

    EPS_Diff_Phi_Forward : FB_EPS;

    EPS_Diff_Theta_Backward : FB_EPS;
    EPS_Diff_Theta_Forward : FB_EPS;

    EPS_Diff_X_Forward  : FB_EPS;
    EPS_Diff_X_Backward : FB_EPS;
    EPS_Diff_Y_Forward  : FB_EPS;
    EPS_Diff_Y_Backward : FB_EPS;
    EPS_Diff_Z_Forward  : FB_EPS;
    EPS_Diff_Z_Backward : FB_EPS;

    EPS_Diff_2Theta_Backward : FB_EPS;

    EPS_Diff_2ThetaY : FB_EPS;

    //Encoders for rotary stages
    fbSetPosition: MC_SetPosition;
    fb2ThetaAutoCoupling: FB_GantryAutoCoupling;
    couple : MC_GEARIN;
    decouple : MC_GEAROUT;
    bExecuteCouple: BOOL := TRUE;
    bExecuteDecouple: BOOL := FALSE;
    n2Theta AT %Q* :ULINT;
    r2Theta:LREAL;
    temp:ULINT;
    rtemp:LREAL;
    GantryDiff:REAL;

    fb_Diff_2Theta_Encoder : FB_MotionStage;

    eDiffXStateGet: E_DiffState;
    eDiffXStateSet: E_DiffState;
    astDiffXPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffXStage1D : FB_PositionState1D;

    eDiffYStateGet: E_DiffState;
    eDiffYStateSet: E_DiffState;
    astDiffYPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffYStage1D : FB_PositionState1D;

    eDiffZStateGet: E_DiffState;
    eDiffZStateSet: E_DiffState;
    astDiffZPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffZStage1D : FB_PositionState1D;

    eDiff2ThetaYStateGet: E_DiffState;
    eDiff2ThetaYStateSet: E_DiffState;
    astDiff2ThetaYPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiff2ThetaYStage1D : FB_PositionState1D;

    eDiffPhiStateGet: E_DiffState;
    eDiffPhiStateSet: E_DiffState;
    astDiffPhiPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffPhiStage1D : FB_PositionState1D;

    eDiffChiStateGet: E_DiffState;
    eDiffChiStateSet: E_DiffState;
    astDiffChiPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffChiStage1D : FB_PositionState1D;

    eDiff2ThetaStateGet: E_DiffState;
    eDiff2ThetaStateSet: E_DiffState;
    astDiff2ThetaPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiff2ThetaStage1D : FB_PositionState1D;

    eDiffThetaStateGet: E_DiffState;
    eDiffThetaStateSet: E_DiffState;
    astDiffThetaPosState: ARRAY[1..GeneralConstants.MAX_STATES] OF ST_PositionState;
    fbDiffThetaStage1D : FB_PositionState1D;

    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState := (
        fDelta := 0.5,
        fVelocity := 0.5,
        bMoveOk := TRUE,
        bValid := TRUE
    );
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
IF (bInit) THEN
    bInit := FALSE;
    Main.M28.bHardwareEnable := TRUE;
    Main.M28.bPowerSelf := TRUE;
    Main.M28.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M28.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M28.fVelocity := 0.1;

    Main.M29.bHardwareEnable := TRUE;
    Main.M29.bPowerSelf := TRUE;
    Main.M29.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M29.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M29.fVelocity := 0.1;

    Main.M30.bHardwareEnable := TRUE;
    Main.M30.bPowerSelf := TRUE;
    Main.M30.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M30.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M30.fVelocity := 0.1;

    Main.M31.bHardwareEnable := TRUE;
    Main.M31.bPowerSelf := TRUE;
    Main.M31.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M31.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M31.fVelocity := 0.1;

    Main.M32.bHardwareEnable := TRUE;
    Main.M32.bPowerSelf := TRUE;
    Main.M32.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M32.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M32.fVelocity := 0.1;

    Main.M33.bHardwareEnable := TRUE;
    Main.M33.bPowerSelf := TRUE;
    Main.M33.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M33.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M33.fVelocity := 0.1;

    Main.M34.bHardwareEnable := TRUE;
    Main.M34.bPowerSelf := TRUE;
    Main.M34.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M34.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M34.fVelocity := 0.1;

    Main.M35.bHardwareEnable := TRUE;
    Main.M35.bPowerSelf := TRUE;
    Main.M35.nBrakeMode := ENUM_StageBrakeMode.NO_BRAKE;
    Main.M35.nEnableMode := ENUM_StageEnableMode.DURING_MOTION;
    Main.M35.fVelocity := 0.1;

    fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

    fbStateSetup(stPositionState:=astDiffXPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffYPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffZPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiff2ThetaYPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffPhiPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffChiPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiff2ThetaPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffThetaPosState[E_DiffState.TRANSFER_ARM_INTERFACE], sName:='TRANSFER_ARM_INTERFACE',
        fPosition := 0
    );


    fbStateSetup(stPositionState:=astDiffXPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffYPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffZPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiff2ThetaYPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffPhiPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffChiPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiff2ThetaPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
    fbStateSetup(stPositionState:=astDiffThetaPosState[E_DiffState.NOMINAL_POSITION], sName:='NOMINAL_POSITION',
        fPosition := 0
    );
END_IF

//EPS

// All bits must be TRUE to enable the specified direction (backward or forward)
// The bits are populated right to left in typhos screen. So Descriptions highest bit number is at the beginning of the description.
// The eps IN_OUT variable must be assigned before using the FB_EPS in any way.

// DIFFRACTOMETER THETA ANGLE RESTRICTIONS
// Disable movement in negative direction.
EPS_Diff_Theta_Backward(eps:=Main.M34.stEPSBackwardEnable);
EPS_Diff_Theta_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Theta_Backward.setBit(nBits:= 3,
    bValue := Main.M34.Axis.NcToPlc.ActPos - Main.M49.Axis.NcToPlc.ActPos > -1.0
);
// Diffractometer Theta cannot go less than 5 degrees if the Diffractometer Chi is less than -5 degrees
EPS_Diff_Theta_Backward.setBit(nBits:= 2, bValue:=F_CheckAxisGEQ(Main.M34,5) OR F_CheckAxisGEQ(Main.M33,-5));
// Diffractometer Theta cannot go less than 10 degrees if the MID IR (LAS VIS) is IN, which is defined as a position of 90 +/- 1.
EPS_Diff_Theta_Backward.setBit(nBits:= 1, bValue:= F_CheckAxisGRT(Main.M34,10) OR F_Limit(Main.M36.stAxisStatus.fActPosition, 91, 89, false));
// Diffractometer Theta cannot go less than 10 degrees if the Diffractometer phi is at 90 +/- 1.
EPS_Diff_Theta_Backward.setBit(nBits:= 0, bValue:=F_CheckAxisGRT(Main.M34,10) OR F_Limit(Main.M32.stAxisStatus.fActPosition, 91, 89, false));

// Disable movement in positive direction.
EPS_Diff_Theta_Forward(eps:=Main.M34.stEPSForwardEnable);
EPS_Diff_Theta_Forward.setDescription('POSITIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Theta_Forward.setBit(nBits:= 1,
    bValue := Main.M34.Axis.NcToPlc.ActPos - Main.M49.Axis.NcToPlc.ActPos < 1.0
);
// Diffractometer Theta cannot go more than Diffractometer 2Theta plus 21 degrees
EPS_Diff_Theta_Forward.setBit(nBits:= 0, bValue:=Main.M34.Axis.NcToPlc.ActPos < Main.M35.stAxisStatus.fActPosition+21);

// DIFFRACTOMETER CHI ANGLE RESTRICTIONS
// Disable movement in negative direction.
EPS_Diff_Chi_Backward(eps:=Main.M33.stEPSBackwardEnable);
EPS_Diff_Chi_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Diffractometer Chi cannot go less than -5 degrees if the Diffractometer Theta is less than 5 degrees
EPS_Diff_Chi_Backward.setBit(nBits:= 0, bValue:=F_CheckAxisGEQ(Main.M33,-5) OR F_CheckAxisGEQ(Main.M34,5));

// DIFFRACTOMETER PHI ANGLE RESTRICTIONS
// Disable movement in positive direction.
EPS_Diff_Phi_Forward(eps:=Main.M32.stEPSForwardEnable);
EPS_Diff_Phi_Forward.setDescription('POSITIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Diffractometer Phi cannot go greater than 45 degrees when the MID IR (LAS VIS) is greater than 45 degrees
EPS_Diff_Phi_Forward.setBit(nBits:= 1, bValue:=Main.M36.Axis.NcToPlc.ActPos <= 45 OR Main.M32.Axis.NcToPlc.ActPos <= 5);
// Diffractometer Phi cannot go greater than 45 degrees when theta is within 1 degree of 0 degrees.
EPS_Diff_Phi_Forward.setBit(nBits:= 0, bValue:=Main.M32.Axis.NcToPlc.ActPos <= 45 OR F_Limit(Main.M34.stAxisStatus.fActPosition, 1, -1, false));

// DIFFRACTOMETER Z POSITION RESTRICTIONS
// Disable movement in negative direction.
EPS_Diff_Z_Backward(eps:=Main.M30.stEPSBackwardEnable);
EPS_Diff_Z_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Z_Backward.setBit(nBits:= 1,
    bValue := Main.M30.Axis.NcToPlc.ActPos - (Main.M48.Axis.NcToPlc.ActPos - GVL_VAR.fCryoZNeutralPositionAtDiffZ0) > -1.0
);
// Diffractometer Z cannot go less than 5mm when the diagonal paddle horizontal (LAS_D_H) position is greater than 50 mm.
EPS_Diff_Z_Backward.setBit(nBits:= 0, bValue:=Main.M37.Axis.NcToPlc.ActPos <= 50 OR Main.M30.Axis.NcToPlc.ActPos >= 5);

// Disable movement in positive direction
EPS_Diff_Z_Forward(eps:=Main.M30.stEPSForwardEnable);
EPS_Diff_Z_Forward.setDescription('POSITIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Z_Forward.setBit(nBits:= 0,
    bValue := Main.M30.Axis.NcToPlc.ActPos - (Main.M48.Axis.NcToPlc.ActPos - GVL_VAR.fCryoZNeutralPositionAtDiffZ0) < 1.0
);

// Diff X
// Disable movement in negative direction.
EPS_Diff_X_Backward(eps:=Main.M28.stEPSBackwardEnable);
EPS_Diff_X_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_X_Backward.setBit(nBits:= 0,
    bValue := Main.M28.Axis.NcToPlc.ActPos - Main.M46.Axis.NcToPlc.ActPos > -1.0
);

// Disable movement in positive direction
EPS_Diff_X_Forward(eps:=Main.M28.stEPSForwardEnable);
EPS_Diff_X_Forward.setDescription('POSITIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_X_Forward.setBit(nBits:= 0,
    bValue := Main.M28.Axis.NcToPlc.ActPos - Main.M46.Axis.NcToPlc.ActPos < 1.0
);

// Diff Y
// Disable movement in negative direction.
EPS_Diff_Y_Backward(eps:=Main.M29.stEPSBackwardEnable);
EPS_Diff_Y_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Y_Backward.setBit(nBits:= 0,
    bValue := Main.M47.Axis.NcToPlc.ActPos - F_TargetCryoYPosition(
        fNeutralPosition := GVL_VAR.fCryoYNeutralPositionAtDiffY0 + Main.M29.Axis.NcToPlc.ActPos,
        fBraidDiameter   := GVL_VAR.fBraidDiameter,
        fPhiAngleDeg     := Main.M32.Axis.NcToPlc.ActPos) < 1.0
);

// Disable movement in positive direction
EPS_Diff_Y_Forward(eps:=Main.M29.stEPSForwardEnable);
EPS_Diff_Y_Forward.setDescription('POSITIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
EPS_Diff_Y_Forward.setBit(nBits:= 0,
    bValue := Main.M47.Axis.NcToPlc.ActPos - F_TargetCryoYPosition(
        fNeutralPosition := GVL_VAR.fCryoYNeutralPositionAtDiffY0 + Main.M29.Axis.NcToPlc.ActPos,
        fBraidDiameter   := GVL_VAR.fBraidDiameter,
        fPhiAngleDeg     := Main.M32.Axis.NcToPlc.ActPos) > -1.0
);

// DIFFRACTOMETER 2-THETA ANGLE RESTRICTIONS
// Disable movement in negative direction.
EPS_Diff_2Theta_Backward(eps:=Main.M35.stEPSBackwardEnable);
EPS_Diff_2Theta_Backward.setDescription('NEGATIVE MOTION'); // SET DESCRIPTION FOR BYTE INDICATOR LABELS
// Diffractometer 2 Theta cannot go less than the diffractometer theta angle minus 21 degrees.
EPS_Diff_2Theta_Backward.setBit(nBits:= 0, bValue:=Main.M35.Axis.NcToPlc.ActPos > Main.M34.stAxisStatus.fActPosition - 21);

fb_Diff_X(stMotionStage:=Main.M28);
fb_Diff_Y(stMotionStage:=Main.M29);
fb_Diff_Z(stMotionStage:=Main.M30);
fb_Diff_2ThetaY(stMotionStage:=Main.M31);
fb_Diff_Phi(stMotionStage:=Main.M32);
fb_Diff_Chi(stMotionStage:=Main.M33);
fb_Diff_Theta(stMotionStage:=Main.M34);
fb_Diff_2Theta(stMotionStage:=Main.M35);
]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>