<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_3AxesJack" Id="{e52940dd-3407-4f5b-86fe-1c81eaa8a8e3}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_3AxesJack
VAR_IN_OUT
    // Jack 1 is the axis that, when higher than Jack 2, creates a negative pitch/roll
    stJack1Axis: ST_MotionStage;
    // Jack 2 is the axis that, when higher than Jack1, creates a positive pitch/roll
    stJack2Axis: ST_MotionStage;
    // Jack 3 must be used as the jack that only contributes to Roll OR only contributes to Pitch
    // Assign your axes such that this jack is the jack that can only do roll OR pitch.
    // Jack 3 is assumed on the positive side of the pitch/roll, so to reverse the sign simply
    // supply a negative rDistanceX or rDistanceY, the choice of which is negative depends on
    // whether JAck3 is an axis that does only roll or only pitch.
    stJack3Axis: ST_MotionStage;
END_VAR
VAR_INPUT

    {attribute 'pytmc' := '
        pv: bMoveToPosition;
        io: i;
    '}
    bMoveToPosition: BOOL;
    {attribute 'pytmc' := '
        pv: bMoveToPitch;
        io: i;
    '}
    bMoveToPitch: BOOL;
    {attribute 'pytmc' := '
        pv: bMoveToRoll;
        io: i;
    '}
    bMoveToRoll: BOOL;

    {attribute 'pytmc' := '
    pv: PMPS_OK;
    io: i;
    field: ZNAM False
    field: ONAM True
    '}
    bMoveOk:BOOL;

    // Desired height, pitch, and roll
    {attribute 'pytmc' := '
    pv: Y_REQ;
    io: io;
    '}
    rReqPosition : REAL;

    {attribute 'pytmc' := '
    pv: PITCH_REQ;
    io: io;
    '}
    rReqPitch : REAL;

    {attribute 'pytmc' := '
    pv: ROLL_REQ;
    io: io;
    '}
    rReqRoll : REAL;

    (*Offsets*)
    {attribute 'pytmc' := '
    pv: ZeroOffset_Jack1;
    io: io;
    '}
    rEncoderOffsetJack1: REAL;

    {attribute 'pytmc' := '
    pv: ZeroOffset_Jack2;
    io: io;
    '}
    rEncoderOffsetJack2: REAL;

    {attribute 'pytmc' := '
    pv: ZeroOffset_Jack3;
    io: io;
    '}
    rEncoderOffsetJack3: REAL;

    // The distance along the pitch axis between the two sides of jacks.
    rDistanceX: REAL := 0.24;
    // The distance along the roll axis between the two sides of jacks.
    rDistanceZ: REAL := 0.88;
    bJack3DoesPitch: BOOL;

    rLimitPositionMax: REAL := 8;
    rLimitPositionMin: REAL := -8;
    rLimitPitchMin: REAL := -18;
    rLimitPitchMax: REAL :=  18;
    rLimitRollMin: REAL  := -18;
    rLimitRollMax: REAL  :=  18;

    (*Motion Parameters*)
    fSmallDelta: LREAL := 0.01;
    fBigDelta: LREAL := 10;
    fMaxVelocity: LREAL := 0.1;
    fHighAccel: LREAL := 0.8;
    fLowAccel: LREAL := 0.1;

     {attribute 'pytmc' := '
    pv: Home;
    io: i;
    field: ZNAM False
    field: ONAM True
    '}
    bHome:BOOL:=FALSE;
END_VAR

VAR
    fbJack1Stage: FB_MotionStage;
    fbJack2Stage: FB_MotionStage;
    fbJack3Stage: FB_MotionStage;
    fPosJack1Stage: LREAL;
    fPosJack2Stage: LREAL;
    fPosJack3Stage: LREAL;

    stJack1: ST_PositionState;
    stJack2: ST_PositionState;
    stJack3: ST_PositionState;

    {attribute 'pytmc' := 'pv: JACK1'}
    fbJack1: FB_StatePTPMove;
    {attribute 'pytmc' := 'pv: JACK2'}
    fbJack2: FB_StatePTPMove;
    {attribute 'pytmc' := 'pv: JACK3'}
    fbJack3: FB_StatePTPMove;

    //old values
    rOldReqPosition : REAL;
    rOldReqPitch: REAL;
    rOldReqRoll: REAL;

    (*EPICS pvs*)
    {attribute 'pytmc' := '
    pv: Y;
    io: i;
    '}
    rActPosition : REAL;

    {attribute 'pytmc' := '
    pv: PITCH;
    io: i;
    '}
    rActPitch : REAL;

    {attribute 'pytmc' := '
    pv: ROLL;
    io: i;
    '}
    rActRoll : REAL;


    {attribute 'pytmc' := '
    pv: HOME_READY;
    io: i;
    field: ZNAM False
    field: ONAM True
    '}
    bHomeReady:BOOL:=FALSE;


    //Local variables
    bInit: BOOL :=true;

    bExecuteMotionX: BOOL;

    fPosBlock: LREAL;
    fPosClose: LREAL;
    fPosOpen: LREAL;

    stSetPositionOptions: ST_SetPositionOptions;
    fbSetPosition_Pos: MC_SetPosition;
    fbSetPosition_Angle: MC_SetPosition;

    // For logging
    fbLogger : FB_LogMessage := (eSubsystem:=E_SubSystem.MOTION);
    tErrorPresent : R_TRIG;
    tAction : R_TRIG;
    tOverrideActivated : R_TRIG;

    bTest: BOOL;

    fbPower: MC_POWER;

    y1: LREAL;
    y2: LREAL;
    y3: LREAL;
    y12Ave: LREAL;
    y12Diff: LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Instantiate Function block for all the blades
ACT_Motion();

//SET and GET the requested and Actual values
ACT_CalculatePositions();

// Software Limits to protect blades
ACT_VirtualLimitSW();
]]></ST>
    </Implementation>
    <Action Name="ACT_CalculatePositions" Id="{bbd17bae-60ce-497a-ba58-ed42c399a350}">
      <Implementation>
        <ST><![CDATA[
//check if requested center or gap has changed
//check that the requested values are within acceptable motion range
IF abs(rReqPosition - rOldReqPosition) > 0.01 OR bMoveToPosition THEN
        rOldReqPosition := rReqPosition;
        bExecuteMotionX := TRUE;
        fbLogger(sMsg:='Requested new Position.', eSevr:=TcEventSeverity.Verbose);
ELSE
    rReqPosition := rActPosition;
    rOldReqPosition := rReqPosition;
END_IF

IF abs(rReqPitch - rOldReqPitch) > 0.01 OR bMoveToPitch THEN
    rOldReqPitch := rReqPitch;
    bExecuteMotionX := TRUE;
    fbLogger(sMsg:='Requested new Pitch', eSevr:=TcEventSeverity.Verbose);
ELSE
    rReqPitch := rActPitch;
    rOldReqPitch := rReqPitch;
END_IF

IF abs(rReqRoll - rOldReqRoll) > 0.01 OR bMoveToRoll THEN
    rOldReqRoll := rReqRoll;
    bExecuteMotionX := TRUE;
    fbLogger(sMsg:='Requested new Roll', eSevr:=TcEventSeverity.Verbose);
ELSE
    rReqRoll := rActRoll;
    rOldReqRoll := rReqRoll;
END_IF

//Calculate requested target positions from requested roll, pitch, and midpoint height.
IF bJack3DoesPitch THEN
    fPosJack1Stage := rReqPosition - rDistanceX / 2.0 * rReqRoll - rDistanceZ / 2.0 * rReqPitch + rEncoderOffsetJack1;
    fPosJack2Stage := rReqPosition + rDistanceX / 2.0 * rReqRoll - rDistanceZ / 2.0 * rReqPitch + rEncoderOffsetJack2;
    fPosJack3Stage := rReqPosition + rDistanceZ / 2.0 * rReqPitch + rEncoderOffsetJack3;
ELSE
    fPosJack1Stage := rReqPosition - rDistanceX / 2.0 * rReqRoll - rDistanceZ / 2.0 * rReqPitch + rEncoderOffsetJack1;
    fPosJack2Stage := rReqPosition - rDistanceX / 2.0 * rReqRoll + rDistanceZ / 2.0 * rReqPitch + rEncoderOffsetJack2;
    fPosJack3Stage := rReqPosition + rDistanceX / 2.0 * rReqRoll + rEncoderOffsetJack3;
END_IF;

//Calculate actual gap and center from actual stages positions
y1 := stJack1Axis.stAxisStatus.fActPosition;
y2 := stJack2Axis.stAxisStatus.fActPosition;
y3 := stJack3Axis.stAxisStatus.fActPosition;
y12Ave := (y1 + y2) / 2.0;
y12Diff := y2 - y1;

// Compute the actual height of the midpoint of the three jacks.
rActPosition := (y12Ave + y3) / 2;

// Compute the roll and pitch based on the the relative position of the three jacks.
IF bJack3DoesPitch THEN
    rActPitch := (y3 - y12Ave) / rDistanceZ;
    rActRoll  := y12Diff / rDistanceX;
ELSE
    rActRoll := (y3 - y12Ave) / rDistanceX;
    rActPitch  := y12Diff / rDistanceZ;
END_IF;
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_Motion" Id="{22a587fa-f56f-4e0c-aede-ea43214fae3c}">
      <Implementation>
        <ST><![CDATA[
// Instantiate Function block for all the blades
fbJack1Stage(stMotionStage:=stJack1Axis);
fbJack2Stage(stMotionStage:=stJack2Axis);
fbJack3Stage(stMotionStage:=stJack3Axis);

// PTP Motion for each blade
stJack1.sName := 'Jack1';
stJack1.fPosition := fPosJack1Stage;
stJack1.fDelta := fSmallDelta;
stJack1.fVelocity := fMaxVelocity;
stJack1.fAccel := fHighAccel;
stJack1.fDecel := fHighAccel;

stJack2.sName := 'Jack2';
stJack2.fPosition := fPosJack2Stage;
stJack2.fDelta := fSmallDelta;
stJack2.fVelocity := fMaxVelocity;
stJack2.fAccel := fHighAccel;
stJack2.fDecel := fHighAccel;

stJack3.sName := 'Jack3';
stJack3.fPosition := fPosJack3Stage;
stJack3.fDelta := fSmallDelta;
stJack3.fVelocity := fMaxVelocity;
stJack3.fAccel := fHighAccel;
stJack3.fDecel := fHighAccel;

IF (bExecuteMotionX) THEN
    fbJack1.bExecute := fbJack2.bExecute := fbJack3.bExecute := bExecuteMotionX;
    bExecuteMotionX:= FALSE;
END_IF

fbJack1(
    stPositionState:=stJack1,
    bMoveOk:=bMoveOk,
    stMotionStage:=stJack1Axis);

fbJack2(
    stPositionState:=stJack2,
    bMoveOk:=bMoveOk,
    stMotionStage:=stJack2Axis);

fbJack3(
    stPositionState:=stJack3,
    bMoveOk:=bMoveOk,
    stMotionStage:=stJack3Axis);
]]></ST>
      </Implementation>
    </Action>
    <Action Name="ACT_VirtualLimitSW" Id="{19951cbb-ec0a-4f31-800e-72e65097a361}">
      <Implementation>
        <ST><![CDATA[
// Set SafetyReady flags manually
stJack1Axis.bSafetyReady:= TRUE;
stJack2Axis.bSafetyReady:= TRUE;
stJack3Axis.bSafetyReady:= TRUE;

// Note: FB_MotionStage calls FB_SetEnables internally that overwrites .bAllForwardEnable/.bAllBackwardEnable flags
fbPower(
    Axis := stJack1Axis.Axis,
    Enable := stJack1Axis.bAllEnable,
    Enable_Positive := stJack1Axis.bAllForwardEnable  AND rActPosition <= rLimitPositionMax AND rActPitch <= rLimitPitchMax,
    Enable_Negative := stJack1Axis.bAllBackwardEnable AND rActPosition >= rLimitPositionMin AND rActPitch >= rLimitPitchMin,
    Override := 100.000
);
fbPower(
    Axis := stJack2Axis.Axis,
    Enable := stJack2Axis.bAllEnable,
    Enable_Positive := stJack2Axis.bAllForwardEnable  AND rActPosition <= rLimitPositionMax AND rActRoll <= rLimitRollMax,
    Enable_Negative := stJack2Axis.bAllBackwardEnable AND rActPosition >= rLimitPositionMin AND rActRoll >= rLimitRollMin,
    Override := 100.000
);
fbPower(
    Axis := stJack3Axis.Axis,
    Enable := stJack3Axis.bAllEnable,
    Enable_Positive := stJack3Axis.bAllForwardEnable  AND rActPosition <= rLimitPositionMax AND rActPitch >= rLimitPitchMin,
    Enable_Negative := stJack3Axis.bAllBackwardEnable AND rActPosition >= rLimitPositionMin AND rActPitch <= rLimitPitchMax,
    Override := 100.000
);
]]></ST>
      </Implementation>
    </Action>
  </POU>
</TcPlcObject>