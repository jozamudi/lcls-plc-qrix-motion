<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SDS" Id="{bf132679-4d4c-411f-a447-cbfc956c233d}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_SDS
VAR_IN_OUT
    stSDSin : ST_SDS;
    stSDSPersistent : ST_SDSPersistent;
END_VAR
VAR
    nIndex: UINT;

    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState := (
        fDelta := 0.5,
        fVelocity := 1,
        bMoveOk := TRUE,
        bValid := TRUE
    );
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Check the present homing status
ACT_CheckHomeStatus();

IF NOT stSDSPersistent.bInitialized THEN
    // Do all the required initialization for the persistent data of the sample delivery system.

    stSDSPersistent.stTransferArmSlot.sTag := 'TA';
    stSDSPersistent.stDiffractometerSlot.sTag := 'DF';

    FOR nIndex := E_SDSGarageYStates.T1 to E_SDSGarageYStates.B4 BY 1 DO
        stSDSPersistent.astGarageSlot[nIndex].eState := E_SampleSlotStates.EMPTY;
        stSDSPersistent.astGarageSlot[nIndex].sDesc  := '';
    END_FOR

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].sTag := 'T1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].sTag := 'T2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].sTag := 'T3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].sTag := 'T4';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].sTag := 'M1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].sTag := 'M2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].sTag := 'M3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].sTag := 'M4';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].sTag := 'B1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].sTag := 'B2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].sTag := 'B3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].sTag := 'B4';

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].fDeg := 0.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].fDeg := 0.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].fDeg := 0.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].fDeg := 90.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].fDeg := 90.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].fDeg := 90.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].fDeg := 180.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].fDeg := 180.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].fDeg := 180.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].fDeg := 270.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].fDeg := 270.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].fDeg := 270.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].fYPos := -100.5;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].fYPos := -74.5;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].fYPos := -44.5;

    stSDSPersistent.fGarageHeightSafeFromCollision := -40.0;
    stSDSPersistent.fGarageRotationClearanceOffset := 45.0;

    stSDSPersistent.bInitialized := TRUE;
END_IF

IF NOT stSDSin.bInitialized THEN
    // Do all the required initialization for the non-persistent data of the sample delivery system.
    stSDSin.bHomingRequired := TRUE;

    fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

    stSDSin.bInitialized := TRUE;
END_IF

// Update load/unloadable statuses for the garage, transfer arm, and the diffractometer.
UpdateLoadUnloadAbleStatuses(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Check if garage is above the threshold to rotate freely without fear of hitting the transfer arm.
ConfirmGarageFreeToRotate(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Control the sequencing of the sample delivery system.
StateMachine(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Update the position states
UpdatePositionStates(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Call state position function blocks.
stSDSin.fbTransferArmHPos1D(
    stMotionStage:=stSDSin.stTransferArmHStage,
    astPositionState:=stSDSin.astTransferArmHPosState,
    eEnumSet:=stSDSin.eTransferArmHStateSet,
    eEnumGet:=stSDSin.eTransferArmHStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stTransferArmHEpicsToPlc,
    stPlcToEpics=>stSDSin.stTransferArmHPlcToEpics
);

stSDSin.fbTransferArmRPos1D(
    stMotionStage:=stSDSin.stTransferArmRStage,
    astPositionState:=stSDSin.astTransferArmRPosState,
    eEnumSet:=stSDSin.eTransferArmRStateSet,
    eEnumGet:=stSDSin.eTransferArmRStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stTransferArmREpicsToPlc,
    stPlcToEpics=>stSDSin.stTransferArmRPlcToEpics
);

stSDSin.fbGarageYPos1D(
    stMotionStage:=stSDSin.stGarageYStage,
    astPositionState:=stSDSin.astGarageYPosState,
    eEnumSet:=stSDSin.eGarageYStateSet,
    eEnumGet:=stSDSin.eGarageYStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stGarageYEpicsToPlc,
    stPlcToEpics=>stSDSin.stGarageYPlcToEpics
);

stSDSin.fbGarageRPos1D(
    stMotionStage:=stSDSin.stGarageRStage,
    astPositionState:=stSDSin.astGarageRPosState,
    eEnumSet:=stSDSin.eGarageRStateSet,
    eEnumGet:=stSDSin.eGarageRStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stGarageREpicsToPlc,
    stPlcToEpics=>stSDSin.stGarageRPlcToEpics
);

// Ensure UI boolean commands are cleared after holding for one second.
stSDSin.stUISelect.bExitManualControl := FALSE;
stSDSin.stUISelect.bHomeGarage := FALSE;
stSDSin.stUISelect.bHomeTransferArm := FALSE;
stSDSin.stUISelect.bLoad := FALSE;
stSDSin.stUISelect.bLoadArmFromGarage := FALSE;
stSDSin.stUISelect.bLoadDiffractometerFromArm := FALSE;
stSDSin.stUISelect.bLoadGarageFromPort := FALSE;
stSDSin.stUISelect.bLoadUnloadGarageFromPort := FALSE;
stSDSin.stUISelect.bManualControl := FALSE;
stSDSin.stUISelect.bProceed := FALSE;
stSDSin.stUISelect.bCancel := FALSE;
stSDSin.stUISelect.bUnload := FALSE;
stSDSin.stUISelect.bUnloadArmToGarage := FALSE;
stSDSin.stUISelect.bUnloadDiffractometerToArm := FALSE;

// Align with the saved selection at the end of each cycle.
stSDSin.stUISelect.eGarageSlot := stSDSin.eSelectedGarageSlot;
]]></ST>
    </Implementation>
    <Action Name="ACT_CheckHomeStatus" Id="{2164ae39-f7d0-4dc9-a63c-01d4fb087899}">
      <Implementation>
        <ST><![CDATA[
// ACTION - Check home status

CASE stSDSin.nHomingState OF
    0: // Initialization
        stSDSin.tonForwardHomingLimit(IN:=FALSE);
        IF stSDSin.stTransferArmHStage.nCommand = E_EpicsMotorCmd.HOME AND stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.nHomingState := stSDSin.nHomingState + 1;
        END_IF
    1: // Homing Sequence Triggered
        stSDSin.tonForwardHomingLimit(IN:=stSDSin.stTransferArmHStage.Axis.NcToPlc.SetVelo > 0,PT:=T#1s);
        IF stSDSin.stTransferArmHStage.nCommand = E_EpicsMotorCmd.HOME AND stSDSin.stTransferArmHStage.bHome THEN
            stSDSin.nHomingState := stSDSin.nHomingState + 1;
            stSDSin.tonHomingStateTimeout(IN:=FALSE);
            stSDSin.tonForwardHomingLimit(IN:=FALSE);
        ELSIF NOT stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.tonHomingStateTimeout(IN:=TRUE,PT:=T#5s);
            stSDSin.tonForwardHomingLimit(IN:=FALSE);
            IF stSDSin.tonHomingStateTimeout.Q THEN
                stSDSin.nHomingState := -1;
            END_IF
        END_IF
    2: // Homing Sequence Successful
        IF F_Limit(stSDSin.stTransferArmHStage.stAxisStatus.fActPosition, stSDSin.stTransferArmHStage.fHomePosition-0.1, stSDSin.stTransferArmHStage.fHomePosition+0.1, TRUE) THEN
            stSDSin.bHomingRequired := FALSE;
            stSDSin.nHomingState := 0;
            stSDSin.tonHomingRequiredTimeout(IN:=FALSE);
            stSDSin.tonHomingStateTimeout(IN:=FALSE);
        ELSIF NOT stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.tonHomingStateTimeout(IN:=TRUE,PT:=T#5s);
            IF stSDSin.tonHomingStateTimeout.Q THEN
                stSDSin.nHomingState := -1;
            END_IF
        END_IF
    -1: // Error Handling
        stSDSin.nHomingState := 0;
END_CASE

stSDSin.tonHomingRequiredTimeout(IN:=NOT stSDSin.bHomingRequired,PT:=stSDSin.tHomingRequiredTimeoutTime);
IF stSDSin.tonHomingRequiredTimeout.Q THEN
    stSDSin.bHomingRequired := TRUE;
END_IF
IF stSDSin.stTransferArmHStage.bHome AND F_Limit(
    fVal := stSDSin.stTransferArmHStage.Axis.NcToPlc.ActPos,
    fLLim := -0.01,
    fHLim := 0.01,
    bInclusive := TRUE) THEN
    stSDSin.bHomingRequired := FALSE;
END_IF

stSDSin.fMinUntilHomingRequired := TIME_TO_REAL(stSDSin.tonHomingRequiredTimeout.PT - stSDSin.tonHomingRequiredTimeout.ET) / 60000;

IF stSDSin.stTransferArmHStage.bExecute AND stSDSin.bHomingRequired AND stSDSin.stTransferArmHStage.fPosition > stSDSin.stTransferArmHStage.stAxisStatus.fActPosition AND
    stSDSin.stTransferArmHStage.nCommand <> E_EpicsMotorCmd.HOME THEN

    stSDSin.stTransferArmHStage.bError := TRUE;
    stSDSin.stTransferArmHStage.sCustomErrorMessage := 'Axis homing status overdue. Please home the axis.';
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Method Name="CheckCanDo2Criteria" Id="{0999b5e8-bb20-02f7-067b-9b396a45bac0}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanDo2Criteria
VAR_IN_OUT
    bCanDo : BOOL;
    bCantDo : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
VAR_INPUT
    b1 : BOOL;
    b2 : BOOL;
    sErrorMsgTF : T_MaxString;
    sErrorMsgFT : T_MaxString;
    sErrorMsgFF : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bCanDo := FALSE;

IF b1 AND b2 THEN
    bCanDo := TRUE;
ELSIF b1 AND NOT b2 THEN
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgTF;
ELSIF NOT b1 AND b2 THEN
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgFT ;
ELSE
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgFF;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanHomeGarage" Id="{890a1d31-ace4-054c-09fc-653e907d57b4}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanHomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if garage can be homed.';

InitHomeGarage(
    stSDS := stSDS
);

IF stSDS.bGarageAboveCollisionHeight THEN
    stSDS.bSuccess := TRUE;
ELSE
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := CONCAT('The garage must be above ',
        CONCAT(LREAL_TO_STRING(stSDSP.fGarageHeightSafeFromCollision),
        ' mm for the rotation axis to be homed.'));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanHomeTransferArm" Id="{fbca667e-ce63-0155-1370-5275037d5135}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanHomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if transfer arm can be homed.';

InitHomeTransferArm(
    stSDS := stSDS
);

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadArmFromGarage" Id="{d135d403-d5a2-0876-3e20-9dcee1c040ff}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadArmFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if there is an open slot in the transfer arm and at least one full slot in the garage.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bGarageUnloadable,
    b2 := stSDS.bTransferArmLoadable,
    sErrorMsgTF := 'The transfer arm is currently full and cannot be used to remove a sample from the garage.',
    sErrorMsgFT := 'The garage is currently empty and therefore no samples can be removed.',
    sErrorMsgFF := 'The garage is currently empty and the transfer arm is full. Therefore, no samples can be removed.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadDiffractometerFromArm" Id="{71a9fba2-1bcf-05b9-058e-f9891ff23ef5}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadDiffractometerFromArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the diffractometer slot is open and if the transfer arm is carrying a sample.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bDiffractometerLoadable,
    b2 := stSDS.bTransferArmUnloadable,
    sErrorMsgTF := 'The transfer arm is currently empty and cannot be used to place a sample in the diffractometer.',
    sErrorMsgFT := 'The diffractometer already has a sample in it.',
    sErrorMsgFF := 'The diffractoemter already has a sample and the transfer arm is empty.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadUnloadGarageFromPort" Id="{b5df68c0-c587-0d44-3d7f-12592aad6aff}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadUnloadGarageFromPort
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the garage can be loaded or unloaded from the port.';

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanManualControl" Id="{5683863f-d057-0819-1182-dc7a29ed7d7d}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanManualControl
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if we can switch to manual control.';

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanUnloadArmToGarage" Id="{bb78d83b-b077-07a7-1d29-968f5b337faf}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanUnloadArmToGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if there is an open slot in the garage and if the transfer arm is carrying a sample.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bGarageLoadable,
    b2 := stSDS.bTransferArmUnloadable,
    sErrorMsgTF := 'The transfer arm is currently empty and cannot be used to load sample into the garage.',
    sErrorMsgFT := 'The garage is currently full and therefore no samples can be loaded into it.',
    sErrorMsgFF := 'The garage is currently full and the transfer arm is empty.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanUnloadDiffractometerToArm" Id="{06a3e562-c435-024f-1e8f-6fea08c3c9bc}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanUnloadDiffractometerToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the diffractometer slot is full and if the transfer arm is empty.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bDiffractometerUnloadable,
    b2 := stSDS.bTransferArmLoadable,
    sErrorMsgTF := 'The transfer arm is currently full and cannot be used to unload a sample from the diffractometer.',
    sErrorMsgFT := 'The diffractometer does not have a sample in it.',
    sErrorMsgFF := 'The diffractometeris empty and the transfer arm is full.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmDiffractometerExtraction" Id="{d6fa0bd2-2cc3-0c14-25e1-d6269dfc6e95}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmDiffractometerExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the diffractometer and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_DIFF_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmDiffractometerInsertion" Id="{b514667a-7a6b-084f-26ed-c3670ae3eeb5}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmDiffractometerInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the diffractometer and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_DIFF_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmExtraction" Id="{daf24cc7-3887-03b2-0501-848224111e75}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the arm and then click "proceed". If the sample is still in the holder, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_GARAGE_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmGarageFreeToRotate" Id="{80a711c4-d62e-03ac-2a4e-7a389529de7a}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmGarageFreeToRotate
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR_INST
    tonHoldDelay : TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Missing handling for erroring encoder.

tonHoldDelay(
    IN := stSDS.stGarageYStage.Axis.NcToPlc.ActPos >= stSDSP.fGarageHeightSafeFromCollision,
    PT := T#1s
);

stSDS.bGarageAboveCollisionHeight := tonHoldDelay.Q;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmInsertion" Id="{5b3d04ea-c8d6-05a9-2354-558daca75a4d}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the garage and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_GARAGE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmVacuumValveOpen" Id="{7edf6b8d-5100-0c75-373c-38d8169bb405}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmVacuumValveOpen
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Verifying that the vacuum valve between SDS and Diff is open.';

stSDS.bSuccess := GVL_Interface.QRIX_VAC_VGC_03_OPEN_LIMIT_SWITCH AND
    NOT GVL_Interface.QRIX_VAC_VGC_03_CLOSED_LIMIT_SWITCH;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendPrerotateTransferArmForLoading" Id="{b432a359-f29f-08b6-14e5-baa64277214a}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendPrerotateTransferArmForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bHArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position and pre-rotating to allow full rotation for screwing in sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bHArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bRArrived
);

IF bHArrived AND bRArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForDiffractometerExtraction" Id="{edd7395a-4155-067c-0fcb-47033a9c8bad}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForDiffractometerExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample unloading position for diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.DIFF_SAMPLE_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForDiffractometerInsertion" Id="{af2f7013-604e-0acd-15bc-e4b8aeba16d6}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForDiffractometerInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position for diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.DIFF_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForExtraction" Id="{571dc7b2-1f9e-05ae-158e-96ba0d810ede}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample extraction position for garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_REMOVAL,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForInsertion" Id="{ce88fcc1-22b7-0eae-3580-6dc8b72fb033}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bHArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position for garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FineAdjustment" Id="{51bb2359-fcd7-0761-04cb-c7da836e46a0}">
      <Declaration><![CDATA[
METHOD PRIVATE FineAdjustment
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Use the individual motor control to do fine adjustment. Click "proceed" to move to the next step.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GarageFaceTransferArm" Id="{56fa921e-2ad5-0f31-3b5c-5461e4f980fa}">
      <Declaration><![CDATA[
METHOD PRIVATE GarageFaceTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bYArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Facing garage towards the transfer arm.';

stSDS.eFaceState := E_SDSFaceState.FACE_TRANSFER_ARM;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldThenClear" Id="{c1475491-9357-0fa0-082d-566521e8e794}">
      <Declaration><![CDATA[
METHOD PRIVATE HoldThenClear
VAR_IN_OUT
    b1 : BOOL;
END_VAR
VAR_INPUT
    tHoldDuration : TIME := T#1s;
END_VAR
VAR_INST
    tonHoldTimer : TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
tonHoldTimer(IN := b1, PT := tHoldDuration);

IF tonHoldTimer.Q THEN
    b1 := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeGarage" Id="{e7f9863f-7463-0f7b-2f0f-b96d98c66a5a}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Homing the garage.';

IF stSDS.stGarageRStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Garage rotational stage has an active error. Aborting sequence.';
END_IF

HomeStateMachine(
    eHomingState := stSDS.eGarageRHomingState,
    stMotionStage := stSDS.stGarageRStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

IF stSDS.eGarageRHomingState = E_SDSHomingState.HOMED THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeStateMachine" Id="{d40899d6-7938-037f-0dae-15b0ce72f47f}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeStateMachine
VAR_IN_OUT
    eHomingState : E_SDSHomingState;
    stMotionStage : ST_MotionStage;
END_VAR
VAR_OUTPUT
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF stMotionStage.bHome AND F_Limit(
    fVal := stMotionStage.Axis.NcToPlc.ActPos,
    fLLim := -0.01,
    fHLim := 0.01,
    bInclusive := TRUE) THEN
    eHomingState := E_SDSHomingState.HOMED;
END_IF

CASE eHomingState OF
    E_SDSHomingState.INIT:
        eHomingState := E_SDSHomingState.WAIT_NOT_BUSY;
    E_SDSHomingState.WAIT_NOT_BUSY:
        IF NOT stMotionStage.bBusy THEN
            eHomingState := E_SDSHomingState.TRIGGER_HOMING;
        END_IF
    E_SDSHomingState.TRIGGER_HOMING:
        stMotionStage.bHomeCmd := TRUE;
        IF stMotionStage.nCommand = E_EpicsMotorCmd.HOME AND stMotionStage.bBusy THEN
            eHomingState := E_SDSHomingState.WAIT_FOR_HOMED;
        END_IF
    E_SDSHomingState.WAIT_FOR_HOMED:
        IF stMotionStage.bDone THEN
            eHomingState := E_SDSHomingState.HOMED;
        END_IF
ELSE
    bError := TRUE;
    sErrorMsg := 'Homing sequence triggered an unknown state. Aborting sequence.';
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeTransferArm" Id="{f3a5e492-51cd-0ddd-390f-6110239748db}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Homing the transfer arm.';

IF stSDS.stTransferArmHStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Transfer arm horizontal stage has an active error. Aborting sequence.';
END_IF

IF stSDS.stTransferArmRStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Transfer arm rotational stage has an active error. Aborting sequence.';
END_IF

HomeStateMachine(
    eHomingState := stSDS.eTransferArmHHomingState,
    stMotionStage := stSDS.stTransferArmHStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

HomeStateMachine(
    eHomingState := stSDS.eTransferArmRHomingState,
    stMotionStage := stSDS.stTransferArmRStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

IF stSDS.eTransferArmHHomingState = E_SDSHomingState.HOMED AND
   stSDS.eTransferArmRHomingState = E_SDSHomingState.HOMED THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitHomeGarage" Id="{e972dcc7-7e74-0d95-00e2-3f2f25e31bf0}">
      <Declaration><![CDATA[
METHOD PRIVATE InitHomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eGarageRHomingState := E_SDSHomingState.INIT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitHomeTransferArm" Id="{019233af-4578-0d4f-2ca9-f60e02147d24}">
      <Declaration><![CDATA[
METHOD PRIVATE InitHomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eTransferArmHHomingState := E_SDSHomingState.INIT;
stSDS.eTransferArmRHomingState := E_SDSHomingState.INIT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRotateGarageForClearance" Id="{7e2aba46-38f3-0adf-16a6-38b66936ce8e}">
      <Declaration><![CDATA[
METHOD PRIVATE InitRotateGarageForClearance
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.fGarageRotationClearancePos := stSDS.stGarageRStage.Axis.NcToPlc.ActPos + stSDSP.fGarageRotationClearanceOffset;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitSelectGarageSlotForLoading" Id="{c61e3c89-11bd-0130-00ce-6ad87d562048}">
      <Declaration><![CDATA[
METHOD PRIVATE InitSelectGarageSlotForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.EMPTY:
            stSDS.eSelectedGarageSlot := nIndex;
    END_CASE
END_FOR

IF nIndex > E_SDSGarageYStates.B4 THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'There are no empty slots in the garage to load a sample to.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitSelectGarageSlotForRemoval" Id="{f2d07db5-4e89-073a-1bd2-525077f83d27}">
      <Declaration><![CDATA[
METHOD PRIVATE InitSelectGarageSlotForRemoval
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.FULL:
            stSDS.eSelectedGarageSlot := nIndex;
    END_CASE
END_FOR

IF nIndex > E_SDSGarageYStates.B4 THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'There are no full slots in the garage to extract a sample from.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadArmFromGarage" Id="{f4c1a898-93e4-09a9-3ef9-8a882daf2138}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadArmFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Select_Garage_Slot_for_Removal;
        END_IF
    E_SDSSeqState.Select_Garage_Slot_for_Removal:
        SelectGarageSlotForRemoval(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Garage_Face_Transfer_Arm;
        END_IF
    E_SDSSeqState.Garage_Face_Transfer_Arm:
        GarageFaceTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Garage_to_Slot_Height;
        END_IF
    E_SDSSeqState.Move_Garage_to_Slot_Height:
        MoveGarageToSlotHeight(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction:
        PrerotateTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Extraction:
        ExtendTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_in_Half_Turn;
        END_IF
    E_SDSSeqState.Screw_in_Half_Turn:
        ScrewInHalfTurn(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Unscrew_Sample_from_Garage;
        END_IF
    E_SDSSeqState.Unscrew_Sample_from_Garage:
        UnscrewSampleFromGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Extraction;
        END_IF
    E_SDSSeqState.Confirm_Extraction:
        ConfirmExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseGarageToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_2;
        END_IF
    E_SDSSeqState.Retract_Garage_2:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Return_Garage_to_Home;
        END_IF
    E_SDSSeqState.Return_Garage_to_Home:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadDiffractometerFromArm" Id="{9ebcef9e-8a5d-03b3-1d4a-5d4a85fa1a0e}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadDiffractometerFromArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position;
        END_IF
    E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position:
        MoveDiffractometerToLoadUnloadPosition(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Vacuum_Valve_Open;
        END_IF
    E_SDSSeqState.Confirm_Vacuum_Valve_Open:
        ConfirmVacuumValveOpen(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Insertion;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Insertion:
        PrerotateTransferArmForInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Insertion;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Insertion:
        ExtendTransferArmForDiffractometerInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_Sample_into_Diffractometer;
        END_IF
    E_SDSSeqState.Screw_Sample_into_Diffractometer:
        ScrewSampleIntoDiffractometer(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Diffractometer_Insertion;
        END_IF
    E_SDSSeqState.Confirm_Diffractometer_Insertion:
        ConfirmDiffractometerInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseDiffToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadUnloadGarageFromPort" Id="{7a1c1865-8cc1-022a-2317-4c9a3b79069a}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadUnloadGarageFromPort
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ManualControl" Id="{75581a9d-1fae-0f7c-133f-c967f378fea2}">
      <Declaration><![CDATA[
METHOD PRIVATE ManualControl
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveDiffractometerToLoadUnloadPosition" Id="{ed7736de-2c6b-05db-2338-695f78bda22f}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveDiffractometerToLoadUnloadPosition
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bXArrived : BOOL;
    bYArrived : BOOL;
    bZArrived : BOOL;
    b2ThetaYArrived : BOOL;
    bPhiArrived : BOOL;
    bChiArrived : BOOL;
    b2ThetaArrived : BOOL;
    bThetaArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving the diffractometer to load/unload position.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffXStateGet,
    stMotionStage := stSDS.stDiffXStage,
    eStateSet := stSDS.eDiffXStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bXArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffYStateGet,
    stMotionStage := stSDS.stDiffYStage,
    eStateSet := stSDS.eDiffYStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffZStateGet,
    stMotionStage := stSDS.stDiffZStage,
    eStateSet := stSDS.eDiffZStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bZArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiff2ThetaYStateGet,
    stMotionStage := stSDS.stDiff2ThetaYStage,
    eStateSet := stSDS.eDiff2ThetaYStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => b2ThetaYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffPhiStateGet,
    stMotionStage := stSDS.stDiffPhiStage,
    eStateSet := stSDS.eDiffPhiStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bPhiArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffChiStateGet,
    stMotionStage := stSDS.stDiffChiStage,
    eStateSet := stSDS.eDiffChiStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bChiArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiff2ThetaStateGet,
    stMotionStage := stSDS.stDiff2ThetaStage,
    eStateSet := stSDS.eDiff2ThetaStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => b2ThetaArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffThetaStateGet,
    stMotionStage := stSDS.stDiffThetaStage,
    eStateSet := stSDS.eDiffThetaStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bThetaArrived
);

IF bXArrived AND
   bYArrived AND
   bZArrived AND
   b2ThetaYArrived AND
   bPhiArrived AND
   bChiArrived AND
   b2ThetaArrived AND
   bThetaArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveGarageToSlotHeight" Id="{50a35882-1804-0b08-1081-a423427c611f}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveGarageToSlotHeight
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving garage to selected slot height.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToGarageSlotFaceTransferArm" Id="{3cf1bab1-d70d-0336-2005-295dae3152a4}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveToGarageSlotFaceTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bYArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving garage to selected slot and facing it towards transfer arm.';

stSDS.eFaceState := E_SDSFaceState.FACE_TRANSFER_ARM;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bRArrived
);

IF bYArrived AND bRArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrerotateTransferArmForExtraction" Id="{69fe999c-9454-0a1a-232b-58e4a267f3fb}">
      <Declaration><![CDATA[
METHOD PRIVATE PrerotateTransferArmForExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Pre-rotating transfer arm to allow full rotation for unscrewing the sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrerotateTransferArmForInsertion" Id="{35045289-d22d-014e-1719-711d2bc74ced}">
      <Declaration><![CDATA[
METHOD PRIVATE PrerotateTransferArmForInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Pre-rotating to allow full rotation for screwing in sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RetractGarage" Id="{d9daa368-9b47-09f6-01fd-88aca31ba63a}">
      <Declaration><![CDATA[
METHOD PRIVATE RetractGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Retracting garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := E_SDSGarageYStates.RETRACTED,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateGarageForClearance" Id="{349e47cb-9e0e-0f8e-2b8f-84e6b8fa4669}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateGarageForClearance
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Rotating garage to prevent a collision with the transfer arm sample during movement of the garage.';

IF F_Limit(
       fVal := stSDS.stGarageRStage.Axis.NcToPlc.ActPos,
       fLLim := stSDS.fGarageRotationClearancePos - stSDS.stGarageRStage.stAxisParameters.fTargetPosControlRange,
       fHLim := stSDS.fGarageRotationClearancePos + stSDS.stGarageRStage.stAxisParameters.fTargetPosControlRange,
       bInclusive := FALSE
   ) AND NOT stSDS.stGarageRStage.bBusy THEN
   stSDS.bSuccess := TRUE;
ELSE
    stSDS.stGarageRStage.fPosition := stSDS.fGarageRotationClearancePos;
    stSDS.stGarageRStage.fVelocity := stSDS.fGarageRotationSpeed;
    stSDS.stGarageRStage.bMoveCmd := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateGarageForClearanceManual" Id="{8a0bce26-7aa7-0334-0ae2-24e4e79d422c}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateGarageForClearanceManual
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please manually rotate the garage to 45 degrees to prevent it from colliding with the sample on the transfer arm when raising it up. Click "proceed" when complete.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateToFacePort" Id="{a1bcadb9-002a-0cff-0d5c-dd11387aa595}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateToFacePort
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Rotating garage so that the selected slot faces the side port.';

stSDS.eFaceState := E_SDSFaceState.FACE_SIDE_PORT;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewInHalfTurn" Id="{5fa348bd-1075-03c4-1b24-c33696dba93e}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewInHalfTurn
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing transfer arm a half turn to catch the sample pin.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_IN_HALF_TURN,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewSampleIntoDiffractometer" Id="{eecf80f7-1382-0e29-0a9d-52d1e59af79e}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewSampleIntoDiffractometer
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing sample into diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_INTO_DIFF,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewSampleIntoGarage" Id="{709b251d-e374-03ca-14e4-1fe775d4a50f}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewSampleIntoGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing sample into garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_INTO_GARAGE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectDesiredAction" Id="{430e1a14-0c94-0a6d-0a52-e979706575e1}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectDesiredAction
VAR_INPUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select the desired action.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectGarageSlotForLoading" Id="{2b10747f-2ffd-01ee-377b-adb0823b9413}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectGarageSlotForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select a valid garage slot to load a sample to and then click "proceed".';

IF stSDS.stUISelect.eGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.stUISelect.eGarageSlot <= E_SDSGarageYStates.B4 THEN
    CASE stSDSP.astGarageSlot[stSDS.stUISelect.eGarageSlot].eState OF
        E_SampleSlotStates.DISABLED:
            stSDS.sErrorMsg := 'The selected garage slot is currently disabled.';
        E_SampleSlotStates.EMPTY:
            stSDS.eSelectedGarageSlot := stSDS.stUISelect.eGarageSlot;
        E_SampleSlotStates.FULL:
            stSDS.sErrorMsg := 'The selected garage slot is currently full.';
    END_CASE
ELSE
    stSDS.sErrorMsg := 'Please select a valid slot from T1 to B4.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectGarageSlotForRemoval" Id="{eacea1be-0497-0bdd-04d8-27aa274fb735}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectGarageSlotForRemoval
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select a valid garage slot to retrieve a sample from and then click "proceed".';

IF stSDS.stUISelect.eGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.stUISelect.eGarageSlot <= E_SDSGarageYStates.B4 THEN
    CASE stSDSP.astGarageSlot[stSDS.stUISelect.eGarageSlot].eState OF
        E_SampleSlotStates.DISABLED:
            stSDS.sErrorMsg := 'The selected garage slot is currently disabled.';
        E_SampleSlotStates.EMPTY:
            stSDS.sErrorMsg := 'The selected garage slot is currently empty.';
        E_SampleSlotStates.FULL:
            stSDS.eSelectedGarageSlot := stSDS.stUISelect.eGarageSlot;
    END_CASE
ELSE
    stSDS.sErrorMsg := 'Please select a valid slot from T1 to B4.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectLoadUnloadGarage" Id="{a35c3c83-d238-09ef-3607-5155cde28cc1}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectLoadUnloadGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Select whether you would like to load a sample to the garage or remove a sample to the garage.';

stSDS.bLoadingSelected := FALSE;
stSDS.bUnloadingSelected := FALSE;

IF stSDS.stUISelect.bLoad THEN
    stSDS.bLoadingSelected := TRUE;
ELSIF stSDS.stUISelect.bUnload THEN
    stSDS.bUnloadingSelected := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetPositionStateWaitForArrivalQuitIfError" Id="{d44e2606-d30e-0dfa-0e6d-d39d755dd87c}">
      <Declaration><![CDATA[
METHOD PRIVATE SetPositionStateWaitForArrivalQuitIfError
VAR_IN_OUT
    eStateGet : UINT;
    stMotionStage : ST_MotionStage;
    eStateSet : UINT;
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
VAR_INPUT
    eEnumSet : UINT;
END_VAR
VAR_OUTPUT
    bArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF eStateGet = eEnumSet AND
    NOT stMotionStage.bBusy THEN
    bArrived := TRUE;
ELSIF stMotionStage.bError THEN
    bError := TRUE;
    sErrorMsg := 'And axis error occurred. Aborting sequence.';
END_IF

IF eStateGet <> eEnumSet THEN
    eStateSet := eEnumSet;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSeqState" Id="{5732567c-ff6f-0fc6-00b4-ad7738497567}">
      <Declaration><![CDATA[
METHOD PRIVATE SetSeqState
VAR_INPUT
    stSDS : ST_SDS;
    eSeqState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eSeqState := eSeqState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetState" Id="{f0976d71-98de-093b-2162-d355b7bb1b7a}">
      <Declaration><![CDATA[
METHOD PRIVATE SetState
VAR_INPUT
    stSDS : ST_SDS;
    eState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eState := eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSubstate" Id="{31db8c10-c435-0cb2-3996-0d4292874597}">
      <Declaration><![CDATA[
METHOD PRIVATE SetSubstate
VAR_INPUT
    stSDS : ST_SDS;
    eSubState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eSubState := eSubState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{18b416ce-bd12-0d40-24f1-ec051178da5e}">
      <Declaration><![CDATA[
METHOD PRIVATE StateMachine
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//IF stSDS.bError THEN
//    stSDS.eState := E_SDSState.Error;
//END_IF

IF stSDS.stUISelect.bCancel THEN
    stSDS.eState := E_SDSState.Standby;
    stSDS.eSubState := E_SDSSubState.Inactive;
    stSDS.eSeqState := E_SDSSeqState.Inactive;
    stSDS.bError := FALSE;
    stSDS.sErrorMsg := '';
END_IF

stSDS.sStatusMsg := '';

CASE stSDS.eState OF
    E_SDSState.Standby:
        IF stSDS.bEnable THEN
            stSDS.eState := E_SDSState.Operating;
            stSDS.eSubState := E_SDSSubstate.Select_Desired_Action;
            stSDS.eSeqState := E_SDSSeqState.Inactive;
        ELSE
            stSDS.eSubState := E_SDSSubState.Inactive;
            stSDS.eSeqState := E_SDSSeqState.Inactive;
        END_IF
    E_SDSState.Operating:
        IF NOT stSDS.bEnable THEN
            stSDS.eState := E_SDSState.Standby;
        ELSE
            SubStateMachine(
                stSDS := stSDS,
                stSDSP := stSDSP
            );
        END_IF
    E_SDSState.Error:
        IF NOT stSDS.bError THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
        stSDS.eSubState := E_SDSSubState.Inactive;
        stSDS.eSeqState := E_SDSSeqState.Inactive;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine_statechart" Id="{7a069fbc-18fd-030c-07da-d834eec6f82c}">
      <Declaration><![CDATA[
METHOD PRIVATE StateMachine_statechart
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <StateChart>
          <XmlArchive>
            <Data>
              <o xml:space="preserve" t="UMLStateChart">
                <v n="Abortable">true</v>
                <v n="UseVarInstForMethods">true</v>
                <v n="StatesCount">47</v>
                <v n="HistoryCount">0</v>
                <v n="TransitionsCount">162</v>
                <v n="RegionsCount">0</v>
                <v n="TracesCount">0</v>
                <v n="StatesInitString">":=[(ID := 1, Name := 'GeneratedStartStateForAbort1', StateType := _UML_SC_StateTypes.InitialState, StartOfTransitionIndex := 1, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 2, Name := 'GeneratedFinalStateForAbort1', StateType := _UML_SC_StateTypes.FinalState, StartOfTransitionIndex := 0, OutGoingTransitionsCount := 0, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 3, Name := 'Move_to_Garage_Slot_Face_Transfer_Arm_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 2, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 4, Name := 'StartState1_copy', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 6, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 5, Name := 'Retract_Garage_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 7, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 6, Name := 'Rotate_Garage_for_Clearance_to_Lower_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 11, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 7, Name := 'Retract_Garage_1_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 15, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 8, Name := 'Home_Garage_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 19, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 9, Name := 'Update_Sample_Location_Database_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 23, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 10, Name := 'Error', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 28, OutGoingTransitionsCount := 2, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := False, HasExitAction := False) ,
(ID := 11, Name := 'EndState2', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 30, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 12, Name := 'Unscrew_Sample_from_Garage_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 31, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 13, Name := 'Rotate_Garage_for_Clearance_to_Raise_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 36, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 14, Name := 'Rotate_to_Face_Transfer_Arm_1_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 40, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 15, Name := 'Retract_Transfer_Arm_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 44, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 16, Name := 'EndState1', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 48, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 17, Name := 'StartState1', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 49, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 18, Name := 'Rotate_to_Face_Transfer_Arm_2_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 50, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 19, Name := 'Fine_Adjustment_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 54, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 20, Name := 'Extend_Prerotate_Transfer_Arm_for_Loading_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 58, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 21, Name := 'Check_Can_Unload_Arm_to_Garage', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 62, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := False, HasExitAction := False) ,
(ID := 22, Name := 'Fine_Adjustment_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 66, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 23, Name := 'Return_Garage_to_Home_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 70, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 24, Name := 'Move_to_Garage_Slot_Height_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 74, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 25, Name := 'Retract_Garage_2_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 78, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 26, Name := 'Return_Garage_to_Home_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 82, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 27, Name := 'EndState1_copy', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 86, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 28, Name := 'StartState1_copy_copy', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 87, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 29, Name := 'StartState1_copy_copy_copy_copy', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 88, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 30, Name := 'Screw_Sample_into_Garage_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 89, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 31, Name := 'Standby', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 94, OutGoingTransitionsCount := 2, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := False, HasExitAction := False) ,
(ID := 32, Name := 'Select_Garage_Slot_for_Loading_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 96, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 33, Name := 'Check_Can_Load_Arm_from_Garage', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 100, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := False, HasExitAction := False) ,
(ID := 34, Name := 'Confirm_Extraction_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 104, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 35, Name := 'Rotate_Garage_for_Clearance_to_Raise_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 109, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 36, Name := 'Home_Transfer_Arm', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 113, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 37, Name := 'Update_Sample_Location_Database_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 117, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 38, Name := 'Confirm_Insertion_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 122, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 39, Name := 'EndState3', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 127, OutGoingTransitionsCount := 1, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ,
(ID := 40, Name := 'Home_Transfer_Arm_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 128, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 41, Name := 'Select_Desired_Action', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 132, OutGoingTransitionsCount := 6, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 42, Name := 'Home_Garage_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 138, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 43, Name := 'Home_Transfer_Arm_UATG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 142, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 44, Name := 'Select_Garage_Slot_for_Removal_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 146, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 45, Name := 'Extend_Prerotate_Transfer_Arm_for_Extraction_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 150, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := False, HasDoAction := True, HasExitAction := False) ,
(ID := 46, Name := 'Retract_Transfer_Arm_LAFG', StateType := _UML_SC_StateTypes.SlowState, StartOfTransitionIndex := 154, OutGoingTransitionsCount := 4, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 32766, HasEntryAction := True, HasDoAction := True, HasExitAction := False) ,
(ID := 47, Name := 'ChoiceElement1', StateType := _UML_SC_StateTypes.FastState, StartOfTransitionIndex := 158, OutGoingTransitionsCount := 5, RegionCount := 0, RegionStartIndex := 0, RegionEndIndex := 0, CompletionTransitionID := 0, MaxDoCycles := 0, HasEntryAction := False, HasDoAction := False, HasExitAction := False) ];
"</v>
                <v n="TransitionsInitString">":=[(ID := 1, StartStateID := 1, EndStateID := 17, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 2, StartStateID := 3, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 3, StartStateID := 3, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 4, StartStateID := 3, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 5, StartStateID := 3, EndStateID := 45, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 6, StartStateID := 4, EndStateID := 40, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 7, StartStateID := 5, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 8, StartStateID := 5, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 9, StartStateID := 5, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 10, StartStateID := 5, EndStateID := 26, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 11, StartStateID := 6, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 12, StartStateID := 6, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 13, StartStateID := 6, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 14, StartStateID := 6, EndStateID := 24, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 15, StartStateID := 7, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 16, StartStateID := 7, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 17, StartStateID := 7, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 18, StartStateID := 7, EndStateID := 42, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 19, StartStateID := 8, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 20, StartStateID := 8, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 21, StartStateID := 8, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 22, StartStateID := 8, EndStateID := 44, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 23, StartStateID := 9, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 24, StartStateID := 9, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 25, StartStateID := 9, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 26, StartStateID := 9, EndStateID := 46, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 27, StartStateID := 9, EndStateID := 46, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 28, StartStateID := 10, EndStateID := 2, Priority := 1, HasAction := True, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 29, StartStateID := 10, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 30, StartStateID := 11, EndStateID := 39, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 31, StartStateID := 12, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 32, StartStateID := 12, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 33, StartStateID := 12, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 34, StartStateID := 12, EndStateID := 19, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 35, StartStateID := 12, EndStateID := 34, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 36, StartStateID := 13, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 37, StartStateID := 13, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 38, StartStateID := 13, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 39, StartStateID := 13, EndStateID := 5, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 40, StartStateID := 14, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 41, StartStateID := 14, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 42, StartStateID := 14, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 43, StartStateID := 14, EndStateID := 6, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 44, StartStateID := 15, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 45, StartStateID := 15, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 46, StartStateID := 15, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 47, StartStateID := 15, EndStateID := 25, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 48, StartStateID := 16, EndStateID := 11, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 49, StartStateID := 17, EndStateID := 31, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 50, StartStateID := 18, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 51, StartStateID := 18, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 52, StartStateID := 18, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 53, StartStateID := 18, EndStateID := 20, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 54, StartStateID := 19, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 55, StartStateID := 19, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 56, StartStateID := 19, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 57, StartStateID := 19, EndStateID := 12, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 58, StartStateID := 20, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 59, StartStateID := 20, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 60, StartStateID := 20, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 61, StartStateID := 20, EndStateID := 22, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 62, StartStateID := 21, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 63, StartStateID := 21, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 64, StartStateID := 21, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 65, StartStateID := 21, EndStateID := 28, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 66, StartStateID := 22, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 67, StartStateID := 22, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 68, StartStateID := 22, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 69, StartStateID := 22, EndStateID := 30, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 70, StartStateID := 23, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 71, StartStateID := 23, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 72, StartStateID := 23, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 73, StartStateID := 23, EndStateID := 27, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 74, StartStateID := 24, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 75, StartStateID := 24, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 76, StartStateID := 24, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 77, StartStateID := 24, EndStateID := 18, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 78, StartStateID := 25, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 79, StartStateID := 25, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 80, StartStateID := 25, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 81, StartStateID := 25, EndStateID := 23, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 82, StartStateID := 26, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 83, StartStateID := 26, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 84, StartStateID := 26, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 85, StartStateID := 26, EndStateID := 16, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 86, StartStateID := 27, EndStateID := 11, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 87, StartStateID := 28, EndStateID := 43, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 88, StartStateID := 29, EndStateID := 41, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 89, StartStateID := 30, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 90, StartStateID := 30, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 91, StartStateID := 30, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 92, StartStateID := 30, EndStateID := 22, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 93, StartStateID := 30, EndStateID := 38, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 94, StartStateID := 31, EndStateID := 2, Priority := 1, HasAction := True, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 95, StartStateID := 31, EndStateID := 29, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 96, StartStateID := 32, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 97, StartStateID := 32, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 98, StartStateID := 32, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 99, StartStateID := 32, EndStateID := 14, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 100, StartStateID := 33, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 101, StartStateID := 33, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 102, StartStateID := 33, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 103, StartStateID := 33, EndStateID := 4, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 104, StartStateID := 34, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 105, StartStateID := 34, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 106, StartStateID := 34, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 107, StartStateID := 34, EndStateID := 19, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 108, StartStateID := 34, EndStateID := 9, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 109, StartStateID := 35, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 110, StartStateID := 35, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 111, StartStateID := 35, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 112, StartStateID := 35, EndStateID := 7, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 113, StartStateID := 36, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 114, StartStateID := 36, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 115, StartStateID := 36, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 116, StartStateID := 36, EndStateID := 11, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 117, StartStateID := 37, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 118, StartStateID := 37, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 119, StartStateID := 37, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 120, StartStateID := 37, EndStateID := 15, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 121, StartStateID := 37, EndStateID := 15, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 122, StartStateID := 38, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 123, StartStateID := 38, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 124, StartStateID := 38, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 125, StartStateID := 38, EndStateID := 37, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 126, StartStateID := 38, EndStateID := 22, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 127, StartStateID := 39, EndStateID := 2, Priority := 1, HasAction := False, IsCompletion := True,IsPseudoException := False,IsException := False),
(ID := 128, StartStateID := 40, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 129, StartStateID := 40, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 130, StartStateID := 40, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 131, StartStateID := 40, EndStateID := 8, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 132, StartStateID := 41, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 133, StartStateID := 41, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 134, StartStateID := 41, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 135, StartStateID := 41, EndStateID := 33, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 136, StartStateID := 41, EndStateID := 21, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 137, StartStateID := 41, EndStateID := 36, Priority := 6, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 138, StartStateID := 42, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 139, StartStateID := 42, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 140, StartStateID := 42, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 141, StartStateID := 42, EndStateID := 32, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 142, StartStateID := 43, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 143, StartStateID := 43, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 144, StartStateID := 43, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 145, StartStateID := 43, EndStateID := 47, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 146, StartStateID := 44, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 147, StartStateID := 44, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 148, StartStateID := 44, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 149, StartStateID := 44, EndStateID := 3, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 150, StartStateID := 45, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 151, StartStateID := 45, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 152, StartStateID := 45, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 153, StartStateID := 45, EndStateID := 19, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 154, StartStateID := 46, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 155, StartStateID := 46, EndStateID := 31, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 156, StartStateID := 46, EndStateID := 39, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 157, StartStateID := 46, EndStateID := 13, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 158, StartStateID := 47, EndStateID := 10, Priority := 1, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := True),
(ID := 159, StartStateID := 47, EndStateID := 39, Priority := 2, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 160, StartStateID := 47, EndStateID := 31, Priority := 3, HasAction := False, IsCompletion := False,IsPseudoException := True,IsException := True),
(ID := 161, StartStateID := 47, EndStateID := 35, Priority := 4, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False),
(ID := 162, StartStateID := 47, EndStateID := 42, Priority := 5, HasAction := False, IsCompletion := False,IsPseudoException := False,IsException := False)];
"</v>
                <v n="RegionsInitString">""</v>
                <v n="StateNamesString">"GeneratedStartStateForAbort1:INT:=1;
GeneratedFinalStateForAbort1:INT:=2;
Move_to_Garage_Slot_Face_Transfer_Arm_LAFG:INT:=3;
StartState1_copy:INT:=4;
Retract_Garage_LAFG:INT:=5;
Rotate_Garage_for_Clearance_to_Lower_UATG:INT:=6;
Retract_Garage_1_UATG:INT:=7;
Home_Garage_LAFG:INT:=8;
Update_Sample_Location_Database_LAFG:INT:=9;
Error:INT:=10;
EndState2:INT:=11;
Unscrew_Sample_from_Garage_LAFG:INT:=12;
Rotate_Garage_for_Clearance_to_Raise_LAFG:INT:=13;
Rotate_to_Face_Transfer_Arm_1_UATG:INT:=14;
Retract_Transfer_Arm_UATG:INT:=15;
EndState1:INT:=16;
StartState1:INT:=17;
Rotate_to_Face_Transfer_Arm_2_UATG:INT:=18;
Fine_Adjustment_LAFG:INT:=19;
Extend_Prerotate_Transfer_Arm_for_Loading_UATG:INT:=20;
Check_Can_Unload_Arm_to_Garage:INT:=21;
Fine_Adjustment_UATG:INT:=22;
Return_Garage_to_Home_UATG:INT:=23;
Move_to_Garage_Slot_Height_UATG:INT:=24;
Retract_Garage_2_UATG:INT:=25;
Return_Garage_to_Home_LAFG:INT:=26;
EndState1_copy:INT:=27;
StartState1_copy_copy:INT:=28;
StartState1_copy_copy_copy_copy:INT:=29;
Screw_Sample_into_Garage_UATG:INT:=30;
Standby:INT:=31;
Select_Garage_Slot_for_Loading_UATG:INT:=32;
Check_Can_Load_Arm_from_Garage:INT:=33;
Confirm_Extraction_LAFG:INT:=34;
Rotate_Garage_for_Clearance_to_Raise_UATG:INT:=35;
Home_Transfer_Arm:INT:=36;
Update_Sample_Location_Database_UATG:INT:=37;
Confirm_Insertion_UATG:INT:=38;
EndState3:INT:=39;
Home_Transfer_Arm_LAFG:INT:=40;
Select_Desired_Action:INT:=41;
Home_Garage_UATG:INT:=42;
Home_Transfer_Arm_UATG:INT:=43;
Select_Garage_Slot_for_Removal_LAFG:INT:=44;
Extend_Prerotate_Transfer_Arm_for_Extraction_LAFG:INT:=45;
Retract_Transfer_Arm_LAFG:INT:=46;
ChoiceElement1:INT:=47;
"</v>
                <n n="StateNamesInitString"/>
                <v n="ForceActionRemove">false</v>
                <d n="RegionsWithStartStatesTable" t="Hashtable" ckt="Guid" cvt="Int32">
                  <v>00000000-0000-0000-0000-000000000000</v>
                  <v>1</v>
                  <v>88b445e6-103c-4a03-881a-3f48b105fdb8</v>
                  <v>1</v>
                </d>
                <d n="RegionsWithHistoryStatesTable" t="Hashtable" ckt="Guid" cvt="Int32">
                  <v>00000000-0000-0000-0000-000000000000</v>
                  <v>1</v>
                </d>
                <d n="RegionsWithEndStatesTable" t="Hashtable" ckt="Guid" cvt="Int32">
                  <v>00000000-0000-0000-0000-000000000000</v>
                  <v>1</v>
                  <v>88b445e6-103c-4a03-881a-3f48b105fdb8</v>
                  <v>1</v>
                </d>
                <n n="BreakPointGuids"/>
                <v n="UmlEditorRestrictions" t="EditorRestrictions">None</v>
                <v n="DUTObjectGuid">{d219d9e9-725a-463b-8385-63d2c1905473}</v>
                <v n="DUTNamesObjectGuid">{5cb4fee8-5040-4b56-8e70-e6ab877f9339}</v>
                <v n="TraceObject">{00000000-0000-0000-0000-000000000000}</v>
                <v n="IsCompiling">false</v>
                <v n="HideLanguageModel">false</v>
                <v n="DefaultStateSizeX">62</v>
                <v n="DefaultStateSizeY">32</v>
                <v n="SuppressAutomaticLibraryLoading">false</v>
                <v n="DiagramName">"StateMachine_statechart"</v>
                <v n="DiagramGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                <v n="IsActionRemoving">false</v>
                <v n="ForceRepaintDiagram">false</v>
                <v n="Documentationdiagram">false</v>
                <v n="ApplicationGuidForDiagram">{00000000-0000-0000-0000-000000000000}</v>
                <v n="AutomaticLayOutHeightSpace">0</v>
                <v n="AutomaticLayOutWidthSpace">0</v>
                <d n="ElementObjects" t="Hashtable" ckt="Guid">
                  <v>2d471cfd-e567-45b2-9d47-8b96aa376ed4</v>
                  <o t="UMLStateChartElement">
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ImplicitStartStateType" t="ImplicitStartStateTypes">None</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">"SetState(stSDS, E_SDSState.Error)"</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">true</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"Error"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <o n="ElementVisualisation" t="UMLStateChartElementVisualisation">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">2</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">60</v>
                      <v n="LeftPosition">1270</v>
                      <v n="WidthValue">362</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">63</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartElement</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">62</v>
                    <v n="DefaultCellSizeY">32</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">2</v>
                    <v n="ElementObjectGuid">{2d471cfd-e567-45b2-9d47-8b96aa376ed4}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ShowedStereotype">{7499ebe3-72b2-4a2d-9974-431ecf1fc1ba}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">-13447886</v>
                    <v n="ZOrder">2491U</v>
                  </o>
                  <v>3cb5616f-756d-44f5-b9e2-1db73c851c18</v>
                  <o t="UMLStateChartPseudoElement">
                    <o n="ElementVisualisation" t="UMLStateChartDiagramElementVisualisationDot">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">2</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">3050</v>
                      <v n="LeftPosition">2500</v>
                      <v n="WidthValue">20</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">20</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <v n="Condition">""</v>
                    <v n="HistoryType" t="HistoryTypes">None</v>
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">""</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">false</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"EndState2"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartEndState</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">20</v>
                    <v n="DefaultCellSizeY">20</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{88b445e6-103c-4a03-881a-3f48b105fdb8}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">2</v>
                    <v n="ElementObjectGuid">{3cb5616f-756d-44f5-b9e2-1db73c851c18}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="ShowedStereotype">{8290eca8-6e2a-4c34-bc5e-bb3a631012b9}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                    <v n="ZOrder">2488U</v>
                  </o>
                  <v>580ad5c4-528b-45aa-9313-d5cf84f57e25</v>
                  <o t="UMLStateChartPseudoElement">
                    <o n="ElementVisualisation" t="UMLStateChartDiagramElementVisualisationDot">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">1</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">40</v>
                      <v n="LeftPosition">2080</v>
                      <v n="WidthValue">20</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">20</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <v n="Condition">""</v>
                    <v n="HistoryType" t="HistoryTypes">None</v>
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">""</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">false</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"StartState1"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartStartState</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">20</v>
                    <v n="DefaultCellSizeY">20</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">1</v>
                    <v n="ElementObjectGuid">{580ad5c4-528b-45aa-9313-d5cf84f57e25}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ShowedStereotype">{ef688da0-a97b-4f8a-b2b9-1a90cc3e3fca}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                    <v n="ZOrder">1680U</v>
                  </o>
                  <v>77108d6c-f5a6-4256-8609-d2810d88bd95</v>
                  <o t="UMLStateChartComposite">
                    <v n="AllowCompositeActions">true</v>
                    <v n="ExecuteDoActionsWhenNestedCompositesAreActive">false</v>
                    <o n="ElementVisualisation" t="UMLCompositeVisualisation">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">1</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">260</v>
                      <v n="LeftPosition">77</v>
                      <v n="WidthValue">4070</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">2862</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <l n="Areas" t="ArrayList" cet="UMLArea">
                      <o>
                        <v n="Elementguid">{88b445e6-103c-4a03-881a-3f48b105fdb8}</v>
                        <v n="Name">"Region0"</v>
                        <v n="Position">0</v>
                        <v n="Priority">0</v>
                      </o>
                    </l>
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">"SetState(stSDS, E_SDSState.Operating)"</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">true</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"Operating"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartComposite</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">150</v>
                    <v n="DefaultCellSizeY">100</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">1</v>
                    <v n="ElementObjectGuid">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ShowedStereotype">{bdcf0da2-e3fd-4045-8212-cac6704ea73d}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">-989556</v>
                    <v n="ZOrder">2282U</v>
                  </o>
                  <v>869fd60c-a109-426b-b169-94d2f1fdd221</v>
                  <o t="UMLStateChartPseudoElement">
                    <o n="ElementVisualisation" t="UMLStateChartDiagramElementVisualisationDot">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">1</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">290</v>
                      <v n="LeftPosition">2090</v>
                      <v n="WidthValue">20</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">20</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <v n="Condition">""</v>
                    <v n="HistoryType" t="HistoryTypes">None</v>
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">""</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">false</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"StartState1_copy_copy_copy_copy"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartStartState</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">20</v>
                    <v n="DefaultCellSizeY">20</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{88b445e6-103c-4a03-881a-3f48b105fdb8}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">1</v>
                    <v n="ElementObjectGuid">{869fd60c-a109-426b-b169-94d2f1fdd221}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="ShowedStereotype">{ef688da0-a97b-4f8a-b2b9-1a90cc3e3fca}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                    <v n="ZOrder">2323U</v>
                  </o>
                  <v>93bc30e2-927c-4ecb-8346-099390cf623f</v>
                  <o t="UMLStateChartElement">
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ImplicitStartStateType" t="ImplicitStartStateTypes">None</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">"SetState(stSDS, E_SDSState.Standby)"</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">true</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"Standby"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <o n="ElementVisualisation" t="UMLStateChartElementVisualisation">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">4</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">130</v>
                      <v n="LeftPosition">1970</v>
                      <v n="WidthValue">385</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">63</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartElement</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">62</v>
                    <v n="DefaultCellSizeY">32</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">4</v>
                    <v n="ElementObjectGuid">{93bc30e2-927c-4ecb-8346-099390cf623f}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ShowedStereotype">{100b067a-9c5f-4a55-88cb-27a5c957592c}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">-13447886</v>
                    <v n="ZOrder">1601U</v>
                  </o>
                  <v>aec363ed-b3d7-4cf4-a586-d86689693d58</v>
                  <o t="UMLStateChartElement">
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ImplicitStartStateType" t="ImplicitStartStateTypes">None</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">"InitHomeTransferArm"</v>
                    <v n="EntryParametersString">"(stSDS)"</v>
                    <v n="EntryActionText">"InitHomeTransferArm(stSDS)"</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">"HomeTransferArm(stSDS)"</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">"HomeTransferArm"</v>
                    <v n="DoParametersString">"(stSDS)"</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">true</v>
                    <v n="HasDoAction">true</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"Home_Transfer_Arm"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <o n="ElementVisualisation" t="UMLStateChartElementVisualisation">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">1</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">480</v>
                      <v n="LeftPosition">3760</v>
                      <v n="WidthValue">312</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">87</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartElement</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">62</v>
                    <v n="DefaultCellSizeY">32</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{88b445e6-103c-4a03-881a-3f48b105fdb8}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">1</v>
                    <v n="ElementObjectGuid">{aec363ed-b3d7-4cf4-a586-d86689693d58}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="ShowedStereotype">{02b7fddf-4ad8-46c7-9f11-63b73f6ade60}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">-13447886</v>
                    <v n="ZOrder">2353U</v>
                  </o>
                  <v>c93aaae9-2f71-45fd-81b0-7b86135d56e2</v>
                  <o t="UMLStateChartPseudoElement">
                    <o n="ElementVisualisation" t="UMLStateChartDiagramElementVisualisationDot">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">3</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">130</v>
                      <v n="LeftPosition">1820</v>
                      <v n="WidthValue">20</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">20</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <v n="Condition">""</v>
                    <v n="HistoryType" t="HistoryTypes">None</v>
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">""</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">""</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">""</v>
                    <v n="DoParametersString">""</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">false</v>
                    <v n="HasDoAction">false</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"EndState3"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartEndState</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">20</v>
                    <v n="DefaultCellSizeY">20</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">3</v>
                    <v n="ElementObjectGuid">{c93aaae9-2f71-45fd-81b0-7b86135d56e2}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{00000000-0000-0000-0000-000000000000}</v>
                    <v n="ShowedStereotype">{b88923f5-5be8-45bb-be39-bc6c3c8e8206}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                    <v n="ZOrder">1681U</v>
                  </o>
                  <v>e2e419a5-d4af-4ad4-b7cd-c7a384928dc3</v>
                  <o t="UMLStateChartElement">
                    <v n="StateChartGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ImplicitStartStateType" t="ImplicitStartStateTypes">None</v>
                    <v n="EntryLocalVariableName">""</v>
                    <v n="EntryActionName">""</v>
                    <v n="EntryParametersString">""</v>
                    <v n="EntryActionText">"SetState(stSDS, E_SDSState.Select_Desired_Action)"</v>
                    <v n="InjectedDoImplementationCode">""</v>
                    <v n="DoActionText">"SelectDesiredAction(stSDS)"</v>
                    <v n="ExitActionText">""</v>
                    <v n="DoLocalVariableName">""</v>
                    <v n="DoActionName">"SelectDesiredAction"</v>
                    <v n="DoParametersString">"(stSDS)"</v>
                    <v n="ExitLocalVariableName">""</v>
                    <v n="ExitActionName">""</v>
                    <v n="ExitParametersString">""</v>
                    <v n="HasEntryAction">true</v>
                    <v n="HasDoAction">true</v>
                    <v n="HasExitAction">false</v>
                    <v n="PropertyID">0</v>
                    <v n="wasFork">false</v>
                    <d n="ActionList" t="Hashtable"/>
                    <d n="PropertyList" t="Hashtable"/>
                    <v n="ElementName">"Select_Desired_Action"</v>
                    <v n="MethodID">0</v>
                    <d n="MethodStereotypContainer" t="Hashtable"/>
                    <o n="ElementVisualisation" t="UMLStateChartElementVisualisation">
                      <v n="ShowAttributes">true</v>
                      <v n="ShowMethods">true</v>
                      <v n="RepresentedElement">2</v>
                      <v n="IsElementVisible">true</v>
                      <v n="TopPosition">340</v>
                      <v n="LeftPosition">1960</v>
                      <v n="WidthValue">492</v>
                      <v n="MinWidthValue">0</v>
                      <v n="Height">87</v>
                      <v n="MinHeight">0</v>
                      <v n="AutomaticLayout">false</v>
                      <d n="DockingPoints" t="Hashtable"/>
                    </o>
                    <l2 n="VariableList"/>
                    <n n="StereotypeContainer"/>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="bIsVisualisationChanged">false</v>
                    <v n="IsType" t="UMLType">UMLStateChartElement</v>
                    <v n="_MaxDoCycleCalls" t="Int16">32767</v>
                    <v n="DefaultCellSizeX">62</v>
                    <v n="DefaultCellSizeY">32</v>
                    <v n="IsDocumentation">false</v>
                    <v n="Area">{88b445e6-103c-4a03-881a-3f48b105fdb8}</v>
                    <v n="ParsedMethods">false</v>
                    <v n="ParsedProperties">false</v>
                    <v n="GeneratorId">0</v>
                    <v n="UserDefined">true</v>
                    <v n="ElementID">2</v>
                    <v n="ElementObjectGuid">{e2e419a5-d4af-4ad4-b7cd-c7a384928dc3}</v>
                    <v n="ParentGuid">{cb6fa6d3-32a0-42cc-bd7f-c1fbccc32a26}</v>
                    <v n="ContainerGuid">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="ShowedStereotype">{af3c84a7-1598-41aa-b505-0eb5e8d32ea4}</v>
                    <v n="ReplacewithImage">false</v>
                    <v n="AutomaticLayout">false</v>
                    <v n="PositionCounter">1L</v>
                    <v n="UMLPosition">-1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">-13447886</v>
                    <v n="ZOrder">2596U</v>
                  </o>
                </d>
                <v n="FirstPaint">true</v>
                <v n="NextElementID">0</v>
                <d n="UMLRelationObjects" t="Hashtable" ckt="Guid" cvt="UMLRelation">
                  <v>1abdb032-cabf-4539-9bf2-2b02cb98163b</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2282U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <v n="ActionName">""</v>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">""</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">168</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{c93aaae9-2f71-45fd-81b0-7b86135d56e2}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable"/>
                      <d n="flagsY" t="Hashtable"/>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">1765</v>
                        <v n="AnchorTopPosition">255</v>
                        <v n="AnchorRelationID">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">2</v>
                        <v n="AnchorLeftPosition">1815</v>
                        <v n="AnchorTopPosition">135</v>
                        <v n="AnchorRelationID">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">2</v>
                      <d n="AnchorPoints" t="Hashtable" ckt="Int32" cvt="UMLAnchorPoint">
                        <v>1</v>
                        <o>
                          <v n="AnchorID">1</v>
                          <v n="AnchorLeftPosition">1765</v>
                          <v n="AnchorTopPosition">135</v>
                          <v n="AnchorRelationID">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                          <v n="StartAnchor">false</v>
                          <v n="EndAnchor">false</v>
                          <v n="AnchorDockedState" t="Docked">NotDocked</v>
                        </o>
                      </d>
                      <v n="RelationIsLinear">true</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                    <v n="RelationGuid">{1abdb032-cabf-4539-9bf2-2b02cb98163b}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">CompletionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Condition</v>
                      <v>Operating Completion</v>
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>2fa6dfb1-3670-490f-b60b-2b1e679b2bd7</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{2d471cfd-e567-45b2-9d47-8b96aa376ed4}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2491U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <v n="ActionName">""</v>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"NOT stSDS.bError"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">5</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{c93aaae9-2f71-45fd-81b0-7b86135d56e2}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>0</v>
                        <v>ConditionPosition</v>
                        <v>0</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                        <v>ConditionPosition</v>
                        <v>0</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">1627</v>
                        <v n="AnchorTopPosition">65</v>
                        <v n="AnchorRelationID">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">2</v>
                        <v n="AnchorLeftPosition">1825</v>
                        <v n="AnchorTopPosition">125</v>
                        <v n="AnchorRelationID">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">2</v>
                      <d n="AnchorPoints" t="Hashtable" ckt="Int32" cvt="UMLAnchorPoint">
                        <v>1</v>
                        <o>
                          <v n="AnchorID">1</v>
                          <v n="AnchorLeftPosition">1825</v>
                          <v n="AnchorTopPosition">65</v>
                          <v n="AnchorRelationID">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                          <v n="StartAnchor">false</v>
                          <v n="EndAnchor">false</v>
                          <v n="AnchorDockedState" t="Docked">NotDocked</v>
                        </o>
                      </d>
                      <v n="RelationIsLinear">false</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                    <v n="RelationGuid">{2fa6dfb1-3670-490f-b60b-2b1e679b2bd7}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">Transition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>31c1d285-932e-44ae-bf62-5c3207dec3b5</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="HighlightedLine">true</v>
                    <v n="ZOrder">2282U</v>
                    <v n="SpecialHandling">true</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"stSDS.bCancel"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">9</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{c93aaae9-2f71-45fd-81b0-7b86135d56e2}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{31c1d285-932e-44ae-bf62-5c3207dec3b5}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>0</v>
                        <v>ConditionPosition</v>
                        <v>0</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                        <v>ConditionPosition</v>
                        <v>10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">1825</v>
                        <v n="AnchorTopPosition">255</v>
                        <v n="AnchorRelationID">{31c1d285-932e-44ae-bf62-5c3207dec3b5}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">1825</v>
                        <v n="AnchorTopPosition">145</v>
                        <v n="AnchorRelationID">{31c1d285-932e-44ae-bf62-5c3207dec3b5}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">false</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{31c1d285-932e-44ae-bf62-5c3207dec3b5}</v>
                    <v n="RelationGuid">{31c1d285-932e-44ae-bf62-5c3207dec3b5}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">ExceptionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">3</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>3</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>47118327-0b2a-401d-8908-bcdf255c0fc2</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="HighlightedLine">true</v>
                    <v n="ZOrder">2491U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"stSDS.bError"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">3</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{2d471cfd-e567-45b2-9d47-8b96aa376ed4}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{47118327-0b2a-401d-8908-bcdf255c0fc2}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>-10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">1385</v>
                        <v n="AnchorTopPosition">255</v>
                        <v n="AnchorRelationID">{47118327-0b2a-401d-8908-bcdf255c0fc2}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">1385</v>
                        <v n="AnchorTopPosition">118</v>
                        <v n="AnchorRelationID">{47118327-0b2a-401d-8908-bcdf255c0fc2}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">false</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{47118327-0b2a-401d-8908-bcdf255c0fc2}</v>
                    <v n="RelationGuid">{47118327-0b2a-401d-8908-bcdf255c0fc2}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">ExceptionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">2</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>2</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>63e13071-cf32-4d2b-8b4f-c480a2f54fe9</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{aec363ed-b3d7-4cf4-a586-d86689693d58}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2488U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"stSDS.bSuccess"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">86</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{3cb5616f-756d-44f5-b9e2-1db73c851c18}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>10</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>-810</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">3856</v>
                        <v n="AnchorTopPosition">562</v>
                        <v n="AnchorRelationID">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">2</v>
                        <v n="AnchorLeftPosition">2515</v>
                        <v n="AnchorTopPosition">3055</v>
                        <v n="AnchorRelationID">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">2</v>
                      <d n="AnchorPoints" t="Hashtable" ckt="Int32" cvt="UMLAnchorPoint">
                        <v>1</v>
                        <o>
                          <v n="AnchorID">1</v>
                          <v n="AnchorLeftPosition">3856</v>
                          <v n="AnchorTopPosition">3055</v>
                          <v n="AnchorRelationID">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                          <v n="StartAnchor">false</v>
                          <v n="EndAnchor">false</v>
                          <v n="AnchorDockedState" t="Docked">NotDocked</v>
                        </o>
                      </d>
                      <v n="RelationIsLinear">false</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                    <v n="RelationGuid">{63e13071-cf32-4d2b-8b4f-c480a2f54fe9}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">Transition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>a2a2d051-b058-4912-9384-acf9ef71faec</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <v n="HighlightedLine">true</v>
                    <v n="ZOrder">2282U</v>
                    <v n="SpecialHandling">true</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"NOT stSDS.bEnable"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">8</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{93bc30e2-927c-4ecb-8346-099390cf623f}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{a2a2d051-b058-4912-9384-acf9ef71faec}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                        <v>ConditionPosition</v>
                        <v>0</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                        <v>ConditionPosition</v>
                        <v>10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">2005</v>
                        <v n="AnchorTopPosition">255</v>
                        <v n="AnchorRelationID">{a2a2d051-b058-4912-9384-acf9ef71faec}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">2005</v>
                        <v n="AnchorTopPosition">188</v>
                        <v n="AnchorRelationID">{a2a2d051-b058-4912-9384-acf9ef71faec}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">false</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{a2a2d051-b058-4912-9384-acf9ef71faec}</v>
                    <v n="RelationGuid">{a2a2d051-b058-4912-9384-acf9ef71faec}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">ExceptionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">4</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>4</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>a76a727b-709f-4f2d-a7ee-6af08877ec2e</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{e2e419a5-d4af-4ad4-b7cd-c7a384928dc3}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2596U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <v n="ActionName">""</v>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"stSDS.stUISelect.bHomeTransferArm"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">84</v>
                    <v n="TriggerlessStatechartTransition">false</v>
                    <v n="EndUMLElement">{aec363ed-b3d7-4cf4-a586-d86689693d58}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>830</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>30</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">2447</v>
                        <v n="AnchorTopPosition">365</v>
                        <v n="AnchorRelationID">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">2</v>
                        <v n="AnchorLeftPosition">3795</v>
                        <v n="AnchorTopPosition">475</v>
                        <v n="AnchorRelationID">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">2</v>
                      <d n="AnchorPoints" t="Hashtable" ckt="Int32" cvt="UMLAnchorPoint">
                        <v>1</v>
                        <o>
                          <v n="AnchorID">1</v>
                          <v n="AnchorLeftPosition">3795</v>
                          <v n="AnchorTopPosition">365</v>
                          <v n="AnchorRelationID">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                          <v n="StartAnchor">false</v>
                          <v n="EndAnchor">false</v>
                          <v n="AnchorDockedState" t="Docked">NotDocked</v>
                        </o>
                      </d>
                      <v n="RelationIsLinear">true</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                    <v n="RelationGuid">{a76a727b-709f-4f2d-a7ee-6af08877ec2e}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">Transition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>b0cecd2f-8c31-4aab-b860-c6f80e776fa5</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{869fd60c-a109-426b-b169-94d2f1fdd221}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2596U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">""</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">74</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{e2e419a5-d4af-4ad4-b7cd-c7a384928dc3}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{b0cecd2f-8c31-4aab-b860-c6f80e776fa5}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>-10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">2095</v>
                        <v n="AnchorTopPosition">305</v>
                        <v n="AnchorRelationID">{b0cecd2f-8c31-4aab-b860-c6f80e776fa5}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">2095</v>
                        <v n="AnchorTopPosition">335</v>
                        <v n="AnchorRelationID">{b0cecd2f-8c31-4aab-b860-c6f80e776fa5}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">true</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{b0cecd2f-8c31-4aab-b860-c6f80e776fa5}</v>
                    <v n="RelationGuid">{b0cecd2f-8c31-4aab-b860-c6f80e776fa5}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">CompletionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>ddcc6392-d3be-4382-bd67-2652080f6513</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{93bc30e2-927c-4ecb-8346-099390cf623f}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">2282U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <v n="ActionName">""</v>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">"stSDS.bEnable"</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">26</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{77108d6c-f5a6-4256-8609-d2810d88bd95}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{ddcc6392-d3be-4382-bd67-2652080f6513}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>10</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ConditionPosition</v>
                        <v>-10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">2175</v>
                        <v n="AnchorTopPosition">188</v>
                        <v n="AnchorRelationID">{ddcc6392-d3be-4382-bd67-2652080f6513}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">2175</v>
                        <v n="AnchorTopPosition">255</v>
                        <v n="AnchorRelationID">{ddcc6392-d3be-4382-bd67-2652080f6513}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">true</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{ddcc6392-d3be-4382-bd67-2652080f6513}</v>
                    <v n="RelationGuid">{ddcc6392-d3be-4382-bd67-2652080f6513}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">Transition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                  <v>e09f2240-ca1b-425e-9864-bb8091e417f9</v>
                  <o>
                    <v n="HasGraphicalRepresentation">true</v>
                    <v n="StartUMLElement">{580ad5c4-528b-45aa-9313-d5cf84f57e25}</v>
                    <v n="HighlightedLine">false</v>
                    <v n="ZOrder">1680U</v>
                    <v n="SpecialHandling">false</v>
                    <v n="ActionLocalVariableName">""</v>
                    <v n="ActionParametersString">""</v>
                    <n n="ActionName"/>
                    <v n="ActionText">""</v>
                    <v n="InjectedActionCode">""</v>
                    <v n="InjectedActionCodeBefore">true</v>
                    <v n="ActionTextLength">100</v>
                    <v n="ConditionText">""</v>
                    <v n="LengthConditionText">100</v>
                    <v n="RelationID">2</v>
                    <v n="TriggerlessStatechartTransition">true</v>
                    <v n="EndUMLElement">{93bc30e2-927c-4ecb-8346-099390cf623f}</v>
                    <o n="UMLRelationVisualisation" t="UMLRelationVisualisation">
                      <v n="RelationID">{e09f2240-ca1b-425e-9864-bb8091e417f9}</v>
                      <v n="FlagPosition" t="Double">0.5</v>
                      <d n="flagsX" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>0</v>
                      </d>
                      <d n="flagsY" t="Hashtable" ckt="String" cvt="Int32">
                        <v>ActionPosition</v>
                        <v>10</v>
                      </d>
                      <o n="StartAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">0</v>
                        <v n="AnchorLeftPosition">2085</v>
                        <v n="AnchorTopPosition">55</v>
                        <v n="AnchorRelationID">{e09f2240-ca1b-425e-9864-bb8091e417f9}</v>
                        <v n="StartAnchor">true</v>
                        <v n="EndAnchor">false</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <o n="EndAnchor" t="UMLAnchorPoint">
                        <v n="AnchorID">1</v>
                        <v n="AnchorLeftPosition">2085</v>
                        <v n="AnchorTopPosition">125</v>
                        <v n="AnchorRelationID">{e09f2240-ca1b-425e-9864-bb8091e417f9}</v>
                        <v n="StartAnchor">false</v>
                        <v n="EndAnchor">true</v>
                        <v n="AnchorDockedState" t="Docked">NotDocked</v>
                      </o>
                      <v n="NextAnchorID">1</v>
                      <d n="AnchorPoints" t="Hashtable"/>
                      <v n="RelationIsLinear">true</v>
                      <v n="RelationIsFreeHand">false</v>
                    </o>
                    <v n="ReferenceGuid">{e09f2240-ca1b-425e-9864-bb8091e417f9}</v>
                    <v n="RelationGuid">{e09f2240-ca1b-425e-9864-bb8091e417f9}</v>
                    <v n="RelationName">""</v>
                    <n n="RelationStereotypes"/>
                    <v n="RelationType" t="RelationTypes">CompletionTransition</v>
                    <v n="IsReferenceTo">false</v>
                    <v n="StartElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="Priority">1</v>
                    <v n="GeneratesCode">false</v>
                    <v n="StartElementShowArrow">false</v>
                    <v n="StartElementCardnality">""</v>
                    <v n="EndElementCardnality">""</v>
                    <v n="EndElementArrowFlag" t="ArrowTypes">Slim</v>
                    <v n="EndElementShowArrow">true</v>
                    <v n="StartElementRoleName">""</v>
                    <v n="EndElementRoleName">""</v>
                    <v n="UserCreated">true</v>
                    <v n="GeneratedByCode">false</v>
                    <v n="AllowRoutingOptimisation">false</v>
                    <d n="flagTexts" t="Hashtable" ckt="String" cvt="String">
                      <v>Priority</v>
                      <v>1</v>
                    </d>
                    <v n="Position">-1L</v>
                    <v n="PositionCounter">1L</v>
                    <v n="IsModified">false</v>
                    <v n="ARGBElementColor">0</v>
                  </o>
                </d>
                <v n="NextRelationID">0</v>
                <v n="DefaultAutomaticLayout">false</v>
                <o n="ClassDiagrammProperties" t="UMLDiagramProperties">
                  <v n="ArrayOfPointerToClassPresentation" t="RelationTypes">Empty</v>
                  <v n="ArrayOfClassPresentation" t="RelationTypes">Empty</v>
                  <v n="ArrayOfInterfacePresentation" t="RelationTypes">Empty</v>
                  <v n="ArrayOfInterfaceAggregationPresentation" t="RelationTypes">Empty</v>
                  <v n="PointerToClassPresentation" t="RelationTypes">Empty</v>
                  <v n="ClassPresentation" t="RelationTypes">Empty</v>
                  <v n="InterfacePresentation" t="RelationTypes">Empty</v>
                  <v n="InterfaceAggregationPresentation" t="RelationTypes">Empty</v>
                  <v n="ShowRoleNames">true</v>
                  <v n="ShowCardinalities">true</v>
                  <v n="ShowRelationNames">true</v>
                  <v n="ShowAttributesinClasses">false</v>
                  <v n="ShowMethodsInClasses">false</v>
                  <v n="ParametersMaximumLength">20</v>
                </o>
                <v n="IsFastStateDiagram">false</v>
                <l n="StereoTypeProfile" t="ArrayList"/>
                <v n="RelationRoleID">252</v>
                <d n="PositionSerialization" t="Hashtable" ckt="Int64" cvt="Guid">
                  <v>1</v>
                  <v>580ad5c4-528b-45aa-9313-d5cf84f57e25</v>
                  <v>2</v>
                  <v>77108d6c-f5a6-4256-8609-d2810d88bd95</v>
                  <v>3</v>
                  <v>59cbad7c-50e8-463c-a82b-7e81208a8a40</v>
                  <v>5</v>
                  <v>e2e419a5-d4af-4ad4-b7cd-c7a384928dc3</v>
                  <v>6</v>
                  <v>e2e419a5-d4af-4ad4-b7cd-c7a384928dc3</v>
                  <v>7</v>
                  <v>dc9149de-09d4-4326-a260-6f7535c6c5a3</v>
                  <v>9</v>
                  <v>93bc30e2-927c-4ecb-8346-099390cf623f</v>
                  <v>10</v>
                  <v>93bc30e2-927c-4ecb-8346-099390cf623f</v>
                  <v>11</v>
                  <v>e09f2240-ca1b-425e-9864-bb8091e417f9</v>
                  <v>12</v>
                  <v>2d471cfd-e567-45b2-9d47-8b96aa376ed4</v>
                  <v>13</v>
                  <v>2d471cfd-e567-45b2-9d47-8b96aa376ed4</v>
                  <v>14</v>
                  <v>47118327-0b2a-401d-8908-bcdf255c0fc2</v>
                  <v>15</v>
                  <v>ddcc6392-d3be-4382-bd67-2652080f6513</v>
                  <v>16</v>
                  <v>2fa6dfb1-3670-490f-b60b-2b1e679b2bd7</v>
                  <v>21</v>
                  <v>33df52e4-74d6-4737-ae8e-a7ed769ce0d9</v>
                  <v>23</v>
                  <v>9f2448b9-266c-4c67-aad3-1737967af4d9</v>
                  <v>27</v>
                  <v>a2a2d051-b058-4912-9384-acf9ef71faec</v>
                  <v>28</v>
                  <v>31c1d285-932e-44ae-bf62-5c3207dec3b5</v>
                  <v>30</v>
                  <v>a76a727b-709f-4f2d-a7ee-6af08877ec2e</v>
                  <v>31</v>
                  <v>1d4d082a-c55e-487a-b70c-a14259848ef8</v>
                  <v>33</v>
                  <v>215c9446-969e-435f-b753-0515b4684cbc</v>
                  <v>35</v>
                  <v>1afd696e-f407-46b3-a070-8f9af39f7643</v>
                  <v>37</v>
                  <v>fca105d7-2e70-4015-bd0a-3db9ca01de64</v>
                  <v>39</v>
                  <v>7d649ec2-4ccd-49b3-961c-17f1f841f2ea</v>
                  <v>41</v>
                  <v>131f096f-30cc-4f44-b033-017bfb1d2790</v>
                  <v>43</v>
                  <v>93fdfc7a-5427-4502-9cf5-52afa3c53038</v>
                  <v>45</v>
                  <v>d3b03fcc-3c35-4687-893c-60c044a2a5e6</v>
                  <v>47</v>
                  <v>5f3fa219-0cc1-47a9-aad6-9cb157bbc0c7</v>
                  <v>49</v>
                  <v>80ce5562-50d6-4e27-8807-6f8b3e898cd1</v>
                  <v>51</v>
                  <v>285f4109-1cc3-4089-887d-7618abd9cf62</v>
                  <v>55</v>
                  <v>b61e9b11-5e21-4449-a8d9-e0dd73f31a22</v>
                  <v>58</v>
                  <v>42784b19-e481-4491-9f30-9bc2879db657</v>
                  <v>59</v>
                  <v>18ac833d-7ce0-4c12-be3b-6785348e18c4</v>
                  <v>61</v>
                  <v>fcc65ed6-079b-4896-b304-96d82de21746</v>
                  <v>63</v>
                  <v>f4c7e345-63f0-47ef-9c3a-fa62e97b1f69</v>
                  <v>65</v>
                  <v>83e3a939-1f5e-4780-a58d-47e5009509c9</v>
                  <v>67</v>
                  <v>93317b0d-7a7a-428e-bda9-b83a40767852</v>
                  <v>69</v>
                  <v>43b3721f-e53a-4413-a3d0-58b4ef70f19d</v>
                  <v>71</v>
                  <v>8dd34326-3ed6-4d7c-b10c-e24cb8ecd05d</v>
                  <v>73</v>
                  <v>a948943c-31ac-4fdc-9221-af18df289013</v>
                  <v>75</v>
                  <v>b207bb5d-8591-4946-b04d-a610cb731bbd</v>
                  <v>77</v>
                  <v>9585271e-4130-4810-a5d7-9f51f519dc53</v>
                  <v>84</v>
                  <v>be7bb3c8-fd78-4cfe-9305-48314544ec08</v>
                  <v>88</v>
                  <v>d4d936b0-b855-4875-82af-6af24f02f08d</v>
                  <v>90</v>
                  <v>0316fe20-e587-475e-89e2-7fdcecf58bf4</v>
                  <v>92</v>
                  <v>603b27e6-ff67-491a-ae34-191effa7c1ae</v>
                  <v>94</v>
                  <v>242c5c7b-9973-4b48-b6a3-d6a6378e78a3</v>
                  <v>96</v>
                  <v>fd6e093f-b12b-4c6b-9d14-105b63807c01</v>
                  <v>98</v>
                  <v>34818def-6692-43ae-adda-f45e31cc517a</v>
                  <v>100</v>
                  <v>2a68dcee-0027-45c0-9cd7-0bc89e61b211</v>
                  <v>113</v>
                  <v>e964530f-365e-4b67-ab67-be8080b5d5e7</v>
                  <v>115</v>
                  <v>3cb5616f-756d-44f5-b9e2-1db73c851c18</v>
                  <v>118</v>
                  <v>1abdb032-cabf-4539-9bf2-2b02cb98163b</v>
                  <v>129</v>
                  <v>63e13071-cf32-4d2b-8b4f-c480a2f54fe9</v>
                  <v>132</v>
                  <v>82361a41-5903-419f-af15-830cb3b486c4</v>
                  <v>134</v>
                  <v>90e21028-c1a3-4861-b313-4ccb1e104e68</v>
                  <v>147</v>
                  <v>98138a6b-c5bf-4cf4-ae78-1f68d84b50b5</v>
                  <v>149</v>
                  <v>869fd60c-a109-426b-b169-94d2f1fdd221</v>
                  <v>150</v>
                  <v>b0cecd2f-8c31-4aab-b860-c6f80e776fa5</v>
                  <v>151</v>
                  <v>d5563527-0b27-489b-8332-13b99cef9d28</v>
                  <v>159</v>
                  <v>19cf0677-23c6-42e9-9dfa-7d980af9f2d0</v>
                  <v>161</v>
                  <v>4b236148-4c74-4690-ab5b-ee3eb345680a</v>
                  <v>163</v>
                  <v>f3ecc150-34e2-4676-bac2-2cef052d3af3</v>
                  <v>165</v>
                  <v>aec363ed-b3d7-4cf4-a586-d86689693d58</v>
                  <v>166</v>
                  <v>aec363ed-b3d7-4cf4-a586-d86689693d58</v>
                  <v>167</v>
                  <v>e7e589d8-8840-4fdd-ac1d-bad568a529ed</v>
                  <v>169</v>
                  <v>7f3a9967-0de9-4c8e-86a6-57d571f160e8</v>
                  <v>171</v>
                  <v>4a87d410-67bb-4035-b209-e9dd8d34050a</v>
                  <v>173</v>
                  <v>626ea868-6681-444d-bb63-e2a6090b4d25</v>
                  <v>175</v>
                  <v>f236ebd5-fbde-4128-ae88-48b867d09747</v>
                  <v>177</v>
                  <v>52461c57-77ca-48be-892f-43da9221a7f7</v>
                  <v>179</v>
                  <v>67e35bac-2222-4aa3-83ca-90878b57ade5</v>
                  <v>181</v>
                  <v>4bb28257-a2f1-4772-a7bf-4fa5b8706215</v>
                  <v>183</v>
                  <v>1ff3f7ca-10fe-4df8-b7dd-d91354852e93</v>
                  <v>185</v>
                  <v>3253d1cf-2363-4386-a71c-7b22cd6a44fa</v>
                  <v>202</v>
                  <v>058ff242-dc22-4844-9e66-0f2249248115</v>
                  <v>204</v>
                  <v>9f339a65-aa0e-4ba9-b97f-844de3966cb1</v>
                  <v>206</v>
                  <v>867d5899-4e15-4eca-8fe8-580bb321c1c2</v>
                  <v>207</v>
                  <v>c9696523-dfb7-4679-8b45-4c80edf5550d</v>
                  <v>208</v>
                  <v>494b622c-cb2b-410b-8146-25403f5e8d24</v>
                  <v>210</v>
                  <v>122e683c-c1f4-4549-9063-42cf5c2c5165</v>
                  <v>212</v>
                  <v>b452c75a-e5df-4faf-bb01-58e3fa1e7233</v>
                  <v>214</v>
                  <v>5a4113f6-defe-4353-aa78-e8c4cfc22215</v>
                  <v>216</v>
                  <v>c1c97be2-cb0c-469e-8d0c-019b667d3286</v>
                  <v>218</v>
                  <v>8873f2d1-02b4-44b4-b46f-7635aac3e270</v>
                  <v>220</v>
                  <v>f1db5f3a-90f0-4008-80dd-802e1813680f</v>
                  <v>223</v>
                  <v>04a1308d-9487-4c5e-aaa1-8b260ea56ac6</v>
                  <v>225</v>
                  <v>9cb10b45-f807-4403-ab8e-a53a8e27d9ea</v>
                  <v>232</v>
                  <v>f4b37837-7418-4168-911c-cee5ebffcdf2</v>
                  <v>233</v>
                  <v>583ec17d-ed3b-423b-9f7e-6989972c014d</v>
                  <v>234</v>
                  <v>3ba37b7a-0a19-444c-b261-1fdcbd112f54</v>
                  <v>237</v>
                  <v>f4b549f7-e1ec-486b-879d-7e407ba0a911</v>
                  <v>239</v>
                  <v>0cfaf295-c268-4bdd-b698-5b10b10fff38</v>
                  <v>241</v>
                  <v>05950205-5078-4b5d-8e2b-b853a9315c85</v>
                  <v>243</v>
                  <v>cfd72033-a992-4d5e-8212-03ef15c78112</v>
                  <v>244</v>
                  <v>0fd2e6bd-aab8-4625-9e0c-b9ba7991a318</v>
                  <v>245</v>
                  <v>e876e486-5c70-4452-8ec9-371014900fde</v>
                  <v>246</v>
                  <v>b3cc1bd0-3990-43a1-a22f-7ecfff947cb3</v>
                  <v>247</v>
                  <v>5f2555b8-e0d6-4f90-9cf6-98f3da9225c1</v>
                  <v>248</v>
                  <v>8dd162e4-11a6-4130-9422-ffdf9ac47d7e</v>
                  <v>250</v>
                  <v>ab35a886-73b1-42a3-b321-6543ac5e80f4</v>
                  <v>251</v>
                  <v>259b836b-2e65-49c3-bb09-0d275cb76d48</v>
                  <v>252</v>
                  <v>5b07ffbc-7b56-4033-87ce-644a39c33e92</v>
                  <v>253</v>
                  <v>e061942a-6284-4402-8568-a211c2bbeaf6</v>
                  <v>254</v>
                  <v>56fb7675-c6ef-46aa-8286-35908c47d52d</v>
                  <v>256</v>
                  <v>8fd6370c-a420-413d-beef-c243603bb1a0</v>
                  <v>257</v>
                  <v>4d7a6390-1173-4b79-897c-88aea4efa765</v>
                  <v>258</v>
                  <v>624030ae-4c33-4794-9266-da78234001fd</v>
                  <v>260</v>
                  <v>2f41ab7f-aa22-4698-b560-3e3717861f30</v>
                  <v>261</v>
                  <v>4aac8893-5b18-4b39-ae74-129e05fff903</v>
                  <v>262</v>
                  <v>93b578cd-6d14-47f8-a961-307128f431de</v>
                  <v>264</v>
                  <v>7c30b877-50b4-4036-9526-f28ee92a946f</v>
                  <v>277</v>
                  <v>65827cb4-a67e-4e52-add6-e08a1a2c0823</v>
                  <v>279</v>
                  <v>346e9c30-d4e3-44d2-bd27-bc06445710a0</v>
                  <v>280</v>
                  <v>832ca127-184c-44a2-b34e-000e64227a60</v>
                  <v>282</v>
                  <v>c93aaae9-2f71-45fd-81b0-7b86135d56e2</v>
                  <v>283</v>
                  <v>9afd76db-b2e4-4cdd-81b8-256aed386453</v>
                  <v>286</v>
                  <v>5e1b24cc-64ec-4cc5-b03a-b519fd71b9c6</v>
                  <v>288</v>
                  <v>39aceff3-9cbf-4784-affc-7c9f7234fd96</v>
                  <v>290</v>
                  <v>ab170b85-daba-4569-b311-c2a40ecb8fa5</v>
                  <v>292</v>
                  <v>82a43a87-d942-481a-9a0b-ecc4f329da82</v>
                  <v>295</v>
                  <v>c5ce168b-2b2e-4e29-a73c-ad854f0ee648</v>
                  <v>299</v>
                  <v>741e0795-6917-429b-85f2-7ff55c7fdce3</v>
                  <v>309</v>
                  <v>a31ce560-2cac-4496-878a-bc2140822b5f</v>
                  <v>313</v>
                  <v>14552756-48df-4afe-98c4-e59b2ebefd32</v>
                  <v>316</v>
                  <v>2bcaa25b-7d2f-4186-aa59-5fd79303a019</v>
                  <v>320</v>
                  <v>a6a31b0d-9cab-48d1-94bc-3142549c067f</v>
                  <v>325</v>
                  <v>e0e0d379-b380-46a6-9fa6-d6007a4189ee</v>
                  <v>326</v>
                  <v>76b5a81b-2525-485d-8a9b-1cea2d1b5c2d</v>
                  <v>327</v>
                  <v>efbfbde7-d9fa-427b-9739-f99ab453005e</v>
                  <v>332</v>
                  <v>5c527fac-65f2-490d-b5cc-44f87b6b3265</v>
                  <v>336</v>
                  <v>b4989bec-61fd-4d25-9ed8-5d7ff0520c15</v>
                  <v>339</v>
                  <v>afbf2a62-36b7-4c2a-8018-0dc8f810e786</v>
                  <v>344</v>
                  <v>87b72272-f67d-4594-a99c-0df863308ab7</v>
                  <v>345</v>
                  <v>6b59c50b-bf75-4127-ba9c-85ec09e64250</v>
                  <v>350</v>
                  <v>91003a19-3ffd-4e30-9cce-1a5eee69dc44</v>
                  <v>353</v>
                  <v>dd0f4d88-695f-466c-9092-0b11caed00dc</v>
                  <v>357</v>
                  <v>ca665789-261e-4e0e-aa7b-aa49bc5d0717</v>
                  <v>363</v>
                  <v>249b8c3a-4eba-4204-8fb7-553ce911f9b0</v>
                  <v>364</v>
                  <v>a8a03b95-867c-480d-bf6c-e18777a7377f</v>
                  <v>367</v>
                  <v>05ef98e4-b07c-4e81-9b87-d699ee986531</v>
                  <v>368</v>
                  <v>099ac8b5-8201-4145-98df-f48bee70f7fc</v>
                  <v>370</v>
                  <v>45fa46d6-5633-4239-b5ef-786ccd2473d8</v>
                  <v>376</v>
                  <v>6d7c68e4-76fe-402f-9322-d2be2ac356a6</v>
                  <v>380</v>
                  <v>59b1564d-b0f8-41ef-8668-02193088d895</v>
                  <v>383</v>
                  <v>f41bb8cf-3d97-42c0-99de-1b0353e70b6b</v>
                  <v>384</v>
                  <v>2e6de802-04c8-46c6-8bbb-5fa3559dd568</v>
                  <v>385</v>
                  <v>24b53515-36d6-403a-8f9a-18fcaa81ac68</v>
                  <v>388</v>
                  <v>0e341718-3916-4935-b520-8bf30bc7b466</v>
                  <v>392</v>
                  <v>d0122869-59aa-4fa1-a2a0-23e4f38e7ed7</v>
                  <v>394</v>
                  <v>844fa4f6-60eb-48c4-bb5c-b2369410767b</v>
                  <v>396</v>
                  <v>c11832b0-0a7e-41df-bf35-faddba684eab</v>
                  <v>398</v>
                  <v>64170f4d-c5fe-4709-a6b1-d6859907009d</v>
                </d>
              </o>
            </Data>
            <TypeList>
              <Type n="ArrayList">System.Collections.ArrayList</Type>
              <Type n="ArrowTypes">{812dac4c-85cd-4336-bb2f-f967774b251e}</Type>
              <Type n="Boolean">System.Boolean</Type>
              <Type n="Docked">{7586ffd4-4b2d-494c-aff5-a40d31dac111}</Type>
              <Type n="Double">System.Double</Type>
              <Type n="EditorRestrictions">{1ca7a370-7213-48b2-9df6-3ac7e85f0c68}</Type>
              <Type n="Guid">System.Guid</Type>
              <Type n="Hashtable">System.Collections.Hashtable</Type>
              <Type n="HistoryTypes">{3534dff0-3cd3-4ab6-8e74-b81ff8613005}</Type>
              <Type n="ImplicitStartStateTypes">{159536e2-c3a1-4501-a760-7b5009964f41}</Type>
              <Type n="Int16">System.Int16</Type>
              <Type n="Int32">System.Int32</Type>
              <Type n="Int64">System.Int64</Type>
              <Type n="RelationTypes">{f5146002-a332-47c0-9d9a-7997d539e6a9}</Type>
              <Type n="String">System.String</Type>
              <Type n="UInt32">System.UInt32</Type>
              <Type n="UMLAnchorPoint">{610ad96d-085d-4ced-95e0-831f42edefc2}</Type>
              <Type n="UMLArea">{7b0cf5f4-81b9-4f82-abc9-9de087e8469a}</Type>
              <Type n="UMLCompositeVisualisation">{408045ae-deed-4f23-8f67-f77d80b7a749}</Type>
              <Type n="UMLDiagramProperties">{71bc64fb-98e8-4f9a-b2ec-0da66cfaa0a0}</Type>
              <Type n="UMLRelation">{66eb2f12-934d-4c0a-8710-d6fec8d1ff48}</Type>
              <Type n="UMLRelationVisualisation">{79af0d10-00d2-4abe-9c91-6b4e07d4aa1d}</Type>
              <Type n="UMLStateChart">{9b0dd937-6691-44b8-b0c0-27601a5e098a}</Type>
              <Type n="UMLStateChartComposite">{05967c19-34ab-4e26-b363-c32e4509c5dc}</Type>
              <Type n="UMLStateChartDiagramElementVisualisationDot">{573ce27a-c0d4-453b-8ffd-6d125a13ad66}</Type>
              <Type n="UMLStateChartElement">{a9cbb7e7-7aa8-4772-a0f9-efee80bd48b2}</Type>
              <Type n="UMLStateChartElementVisualisation">{861a8beb-602e-4017-bf45-a602984c46fe}</Type>
              <Type n="UMLStateChartPseudoElement">{3569ebb7-c8a3-4ab4-b440-d179b9e0fe9b}</Type>
              <Type n="UMLType">{0197b136-405a-42ee-bb27-fd08b621d0cf}</Type>
            </TypeList>
          </XmlArchive>
        </StateChart>
      </Implementation>
    </Method>
    <Method Name="SubStateMachine" Id="{9fc31863-5b4e-030f-0acf-49219a215983}">
      <Declaration><![CDATA[
METHOD PRIVATE SubStateMachine
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

CASE stSDS.eSubState OF
    E_SDSSubState.Inactive:
        ; // Do nothing
    E_SDSSubState.Select_Desired_Action:
        IF stSDS.stUISelect.bHomeGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Home_Garage;
        ELSIF stSDS.stUISelect.bHomeTransferArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Home_Transfer_Arm;
        ELSIF stSDS.stUISelect.bLoadArmFromGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Arm_from_Garage;
        ELSIF stSDS.stUISelect.bUnloadArmToGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Unload_Arm_to_Garage;
        ELSIF stSDS.stUISelect.bLoadUnloadGarageFromPort THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Unload_Garage_from_Port;
        ELSIF stSDS.stUISelect.bLoadDiffractometerFromArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Diffractometer_from_Arm;
        ELSIF stSDS.stUISelect.bUnloadDiffractometerToArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Unload_Diffractometer_to_Arm;
        ELSIF stSDS.stUISelect.bManualControl THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Manual_Control;
        END_IF
    E_SDSSubState.Check_Can_Home_Garage:
        CheckCanHomeGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Home_Garage;
        END_IF
    E_SDSSubState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSState.Standby;
        END_IF
    E_SDSSubState.Check_Can_Home_Transfer_Arm:
        CheckCanHomeTransferArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Home_Transfer_Arm;
        END_IF
    E_SDSSubState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Arm_From_Garage:
        CheckCanLoadArmFromGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Arm_from_Garage;
        END_IF
    E_SDSSubState.Load_Arm_from_Garage:
        LoadArmFromGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Diffractometer_from_Arm:
        CheckCanLoadDiffractometerFromArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Diffractometer_from_Arm;
        END_IF
    E_SDSSubState.Load_Diffractometer_from_Arm:
        LoadDiffractometerFromArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Unload_Garage_from_Port:
        CheckCanLoadUnloadGarageFromPort(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Unload_Garage_from_Port;
        END_IF
    E_SDSSubState.Load_Unload_Garage_from_Port:
        LoadUnloadGarageFromPort(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Unload_Arm_to_Garage:
        CheckCanUnloadArmToGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Unload_Arm_to_Garage;
        END_IF
    E_SDSSubState.Unload_Arm_to_Garage:
        UnloadArmToGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Unload_Diffractometer_to_Arm:
        CheckCanUnloadDiffractometerToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Unload_Diffractometer_to_Arm;
        END_IF
    E_SDSSubState.Unload_Diffractometer_to_Arm:
        UnloadDiffractometerToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Manual_Control:
        CheckCanManualControl(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Manual_Control;
        END_IF
    E_SDSSubState.Manual_Control:
        ManualControl(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnloadArmToGarage" Id="{b0d67d1f-c7d6-0992-2fbf-713efb0b4c20}">
      <Declaration><![CDATA[
METHOD PRIVATE UnloadArmToGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.stUISelect.bProceed := FALSE;
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Select_Garage_Slot_for_Loading;
        END_IF
    E_SDSSeqState.Select_Garage_Slot_for_Loading:
        SelectGarageSlotForLoading(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Garage_Face_Transfer_Arm;
        END_IF
    E_SDSSeqState.Garage_Face_Transfer_Arm:
        GarageFaceTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Garage_to_Slot_Height;
        END_IF
    E_SDSSeqState.Move_Garage_to_Slot_Height:
        MoveGarageToSlotHeight(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Insertion;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Insertion:
        ExtendTransferArmForInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_Sample_into_Garage;
        END_IF
    E_SDSSeqState.Screw_Sample_into_Garage:
        ScrewSampleIntoGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Insertion;
        END_IF
    E_SDSSeqState.Confirm_Insertion:
        ConfirmInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseGarageToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_2;
        END_IF
    E_SDSSeqState.Retract_Garage_2:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Return_Garage_to_Home;
        END_IF
    E_SDSSeqState.Return_Garage_to_Home:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnloadDiffractometerToArm" Id="{2f8ca672-813e-009c-2356-1e14c976bafa}">
      <Declaration><![CDATA[
METHOD PRIVATE UnloadDiffractometerToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position;
        END_IF
    E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position:
        MoveDiffractometerToLoadUnloadPosition(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Vacuum_Valve_Open;
        END_IF
    E_SDSSeqState.Confirm_Vacuum_Valve_Open:
        ConfirmVacuumValveOpen(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction:
        PrerotateTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Extraction;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Extraction:
        ExtendTransferArmForDiffractometerExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Unscrew_Sample_from_Diffractometer;
        END_IF
    E_SDSSeqState.Unscrew_Sample_from_Diffractometer:
        UnscrewSampleFromDiffractometer(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Diffractometer_Extraction;
        END_IF
    E_SDSSeqState.Confirm_Diffractometer_Extraction:
        ConfirmDiffractometerExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseDiffToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnscrewSampleFromDiffractometer" Id="{87e1f71d-9b53-09ef-2eb4-a9381b5c29a8}">
      <Declaration><![CDATA[
METHOD PRIVATE UnscrewSampleFromDiffractometer
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Unscrewing sample from diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.UNSCREW_FROM_DIFF,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnscrewSampleFromGarage" Id="{3464dcca-0819-0f26-0b96-1ede58811e89}">
      <Declaration><![CDATA[
METHOD PRIVATE UnscrewSampleFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Unscrewing sample from garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.UNSCREW_FROM_GARAGE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateLoadUnloadAbleStatuses" Id="{e68786cd-675c-079a-1ee4-032b6bf55b9a}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateLoadUnloadAbleStatuses
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Determine whether the transfer arm is loadable or unloadable.
// If the transfer arm is disabled, then nothing is allowed.
// If the transfer arm is empty, it can be loaded.
// If the transfer arm is full, it can be unloaded.
CASE stSDSP.stTransferArmSlot.eState OF
    E_SampleSlotStates.EMPTY:
        stSDS.bTransferArmLoadable   := TRUE;
        stSDS.bTransferArmUnloadable := FALSE;
    E_SampleSlotStates.FULL:
        stSDS.bTransferArmLoadable   := FALSE;
        stSDS.bTransferArmUnloadable := TRUE;
    E_SampleSlotStates.DISABLED:
        stSDS.bTransferArmLoadable   := FALSE;
        stSDS.bTransferArmUnloadable := FALSE;
END_CASE

// Determine whether the diffractometer slot is loadable or unloadable.
// If the diffractometer slot is disabled, then nothing is allowed.
// If the diffractometer slot is empty, it can be loaded.
// If the diffractometer slot is full, it can be unloaded.
CASE stSDSP.stDiffractometerSlot.eState OF
    E_SampleSlotStates.EMPTY:
        stSDS.bDiffractometerLoadable   := TRUE;
        stSDS.bDiffractometerUnloadable := FALSE;
    E_SampleSlotStates.FULL:
        stSDS.bDiffractometerLoadable   := FALSE;
        stSDS.bDiffractometerUnloadable := TRUE;
    E_SampleSlotStates.DISABLED:
        stSDS.bDiffractometerLoadable   := FALSE;
        stSDS.bDiffractometerUnloadable := FALSE;
END_CASE

// Determine whether the garage is loadable or unloadable.
// If all slots in the garage are disabled, then nothing is allowed.
// If at least one slot in the garage is empty, it can be loaded.
// If at least one slot in the garage is full, it can be unloaded.
stSDS.bGarageLoadable := FALSE;
stSDS.bGarageUnloadable := FALSE;
FOR nIndex := 0 TO stSDS.nGarageSlots - 1 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.EMPTY:
            stSDS.bGarageLoadable   := TRUE;
        E_SampleSlotStates.FULL:
            stSDS.bGarageUnloadable := TRUE;
        E_SampleSlotStates.DISABLED:
            stSDS.bGarageLoadable := FALSE;
            stSDS.bGarageUnloadable := FALSE;
    END_CASE
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdatePositionStates" Id="{5ac718fe-1224-0ef1-1133-344bf58c49d2}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdatePositionStates
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Update parameters for transfer arm states.
// Horizontal axis states
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.RETRACTED], sName:='RETRACTED',
    fPosition:=0,
    fVelocity:=2,
    fDelta := 2.5
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.GARAGE_SAMPLE_REMOVAL], sName:='GARAGE_SAMPLE_REMOVAL',
    fPosition:=28,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_GARAGE_EXTRACTION], sName:='CONFIRM_GARAGE_EXTRACTION',
    fPosition:=23,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION], sName:='GARAGE_SAMPLE_INSERTION',
    fPosition:=30,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_GARAGE_INSERTION], sName:='CONFIRM_GARAGE_INSERTION',
    fPosition:=25,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.DIFF_SAMPLE_INSERTION], sName:='DIFF_SAMPLE_INSERTION',
    fPosition:=100,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.DIFF_SAMPLE_EXTRACTION], sName:='DIFF_SAMPLE_EXTRACTION',
    fPosition:=100,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_DIFF_INSERTION], sName:='CONFIRM_DIFF_INSERTION',
    fPosition:=75,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_DIFF_EXTRACTION], sName:='CONFIRM_DIFF_EXTRACTION',
    fPosition:=75,
    fVelocity:=2
);

// Rotational axis states
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.FULLY_CCW], sName:='FULLY_CCW',
    fPosition:=0,
    fVelocity:=stSDS.fGarageRotationSpeed,
    fDelta := 5.0
);
IF NOT stSDS.stTransferArmRStage.bLimitForwardEnable THEN
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL], sName:='PREROTATE_SAMPLE_REMOVAL',
        fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
ELSE
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL], sName:='PREROTATE_SAMPLE_REMOVAL',
        fPosition:=20000,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
END_IF
IF NOT stSDS.stTransferArmRStage.bLimitBackwardEnable THEN
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION], sName:='PREROTATE_SAMPLE_INSERTION',
        fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
ELSE
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION], sName:='PREROTATE_SAMPLE_INSERTION',
        fPosition:=-20000,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
END_IF
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.UNSCREW_FROM_GARAGE], sName:='UNSCREW_FROM_GARAGE',
    fPosition:=0,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.UNSCREW_FROM_DIFF], sName:='UNSCREW_FROM_DIFF',
    fPosition:=0,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_INTO_GARAGE], sName:='SCREW_INTO_GARAGE',
    fPosition:=1700,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_INTO_DIFF], sName:='SCREW_INTO_DIFF',
    fPosition:=1700,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_IN_HALF_TURN], sName:='SCREW_IN_HALF_TURN',
    fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos + 180,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);

// Update parameters for garage states.
// Y axis states
fbStateSetup(
    stPositionState := stSDS.astGarageYPosState[E_SDSGarageYStates.RETRACTED], sName:='RETRACTED',
    fPosition := 0.0,
    fVelocity := 1.0,
    fDelta := 10.0
);

FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    fbStateSetup(
        stPositionState := stSDS.astGarageYPosState[nIndex],
        sName := stSDSP.astGarageSlot[nIndex].sTag,
        fPosition := stSDSP.astGarageSlot[nIndex].fYPos,
        fVelocity := 1.0,
    );
END_FOR

// Rotational axis states
fbStateSetup(
    stPositionState := stSDS.astGarageRPosState[E_SDSGarageRStates.PREDICTED_HOME], sName:='PREDICTED_HOME',
    fPosition := 0.0,
    fVelocity := 10.0,
    fDelta := 1.0,
    bLocked := TRUE
);

FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDS.eFaceState OF
        E_SDSFaceState.FACE_SIDE_PORT:
            fbStateSetup(
                stPositionState := stSDS.astGarageRPosState[nIndex],
                sName := stSDSP.astGarageSlot[nIndex].sTag,
                fPosition := stSDSP.astGarageSlot[nIndex].fDeg + stSDS.fFacePortOffset,
                fVelocity := 10.0,
            );
    ELSE
        fbStateSetup(
            stPositionState := stSDS.astGarageRPosState[nIndex],
            sName := stSDSP.astGarageSlot[nIndex].sTag,
            fPosition := stSDSP.astGarageSlot[nIndex].fDeg,
            fVelocity := 10.0,
        );
    END_CASE
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseDiffToArm" Id="{a4d1bec6-765a-06fe-338e-81497e18cf7d}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseDiffToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR
    stTempSlot : ST_SampleSlot;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stTempSlot := stSDSP.stTransferArmSlot;

stSDS.sStatusMsg := 'Updating the sample database.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.stTransferArmSlot.eState := stSDSP.stDiffractometerSlot.eState;
    stSDSP.stTransferArmSlot.sDesc := stSDSP.stDiffractometerSlot.sDesc;

    stSDSP.stDiffractometerSlot.eState := stTempSlot.eState;
    stSDSP.stDiffractometerSlot.sDesc := stTempSlot.sDesc;

    stSDS.bSuccess := TRUE;
ELSE
    stSDS.sErrorMsg := 'Failed to automatically update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface. After manually updating the database, click "proceed" to continue.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseGarageToArm" Id="{e2889859-a73f-0c94-0d3c-77770598f619}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseGarageToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR
    stTempSlot : ST_SampleSlot;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stTempSlot := stSDSP.stTransferArmSlot;

stSDS.sStatusMsg := 'Updating the sample database.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.stTransferArmSlot.eState := stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState;
    stSDSP.stTransferArmSlot.sDesc := stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc;

    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := stTempSlot.eState;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := stTempSlot.sDesc;

    stSDS.bSuccess := TRUE;
ELSE
    stSDS.sErrorMsg := 'Failed to automatically update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface. After manually updating the database, click "proceed" to continue.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseManualExtraction" Id="{d484c4e3-0eb4-0b09-1524-19e30f3fb155}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseManualExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Please extract the sample. Click "proceed" when you have finished.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := E_SampleSlotStates.EMPTY;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := '';
ELSE
    stSDS.sErrorMsg := 'Failed to update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseManualInsertion" Id="{7c97ebec-2d6c-02c9-0635-1131bb2f288f}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseManualInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Please insert the sample and write an identifying description for it in the text field. Click "proceed" when you have finished.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := E_SampleSlotStates.FULL;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := stSDS.stUISelect.sTextInput;
ELSE
    stSDS.sErrorMsg := 'Failed to update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface.';
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>