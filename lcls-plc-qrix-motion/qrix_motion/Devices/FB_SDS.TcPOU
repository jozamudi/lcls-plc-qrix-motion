<?xml version='1.0' encoding='UTF-8'?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_SDS" Id="{bf132679-4d4c-411f-a447-cbfc956c233d}" SpecialFunc="None">
    <Declaration><![CDATA[
FUNCTION_BLOCK FB_SDS
VAR_IN_OUT
    stSDSin : ST_SDS;
    stSDSPersistent : ST_SDSPersistent;
END_VAR
VAR
    nIndex: UINT;

    fbStateSetup: FB_StateSetupHelper;
    stDefault: ST_PositionState := (
        fDelta := 0.5,
        fVelocity := 1,
        bMoveOk := TRUE,
        bValid := TRUE
    );
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// Check the present homing status
ACT_CheckHomeStatus();

IF NOT stSDSPersistent.bInitialized THEN
    // Do all the required initialization for the persistent data of the sample delivery system.

    stSDSPersistent.stTransferArmSlot.sTag := 'TA';
    stSDSPersistent.stDiffractometerSlot.sTag := 'DF';

    FOR nIndex := E_SDSGarageYStates.T1 to E_SDSGarageYStates.B4 BY 1 DO
        stSDSPersistent.astGarageSlot[nIndex].eState := E_SampleSlotStates.EMPTY;
        stSDSPersistent.astGarageSlot[nIndex].sDesc  := '';
    END_FOR

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].sTag := 'T1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].sTag := 'T2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].sTag := 'T3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].sTag := 'T4';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].sTag := 'M1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].sTag := 'M2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].sTag := 'M3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].sTag := 'M4';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].sTag := 'B1';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].sTag := 'B2';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].sTag := 'B3';
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].sTag := 'B4';

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].fDeg := 0.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].fDeg := 0.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].fDeg := 0.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].fDeg := 90.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].fDeg := 90.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].fDeg := 90.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].fDeg := 180.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].fDeg := 180.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].fDeg := 180.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].fDeg := 270.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].fDeg := 270.0;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].fDeg := 270.0;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T1].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T2].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T3].fYPos := -100.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.T4].fYPos := -100.5;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M1].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M2].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M3].fYPos := -74.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.M4].fYPos := -74.5;

    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B1].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B2].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B3].fYPos := -44.5;
    stSDSPersistent.astGarageSlot[E_SDSGarageYStates.B4].fYPos := -44.5;

    stSDSPersistent.fGarageHeightSafeFromCollision := -40.0;
    stSDSPersistent.fGarageRotationClearanceOffset := 45.0;

    stSDSPersistent.bInitialized := TRUE;
END_IF

IF NOT stSDSin.bInitialized THEN
    // Do all the required initialization for the non-persistent data of the sample delivery system.
    stSDSin.bHomingRequired := TRUE;

    fbStateSetup(stPositionState:=stDefault, bSetDefault:=TRUE);

    stSDSin.bInitialized := TRUE;
END_IF

// Update load/unloadable statuses for the garage, transfer arm, and the diffractometer.
UpdateLoadUnloadAbleStatuses(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Check if garage is above the threshold to rotate freely without fear of hitting the transfer arm.
ConfirmGarageFreeToRotate(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Control the sequencing of the sample delivery system.
StateMachine(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Update the position states
UpdatePositionStates(
    stSDS := stSDSin,
    stSDSP := stSDSPersistent
);

// Call state position function blocks.
stSDSin.fbTransferArmHPos1D(
    stMotionStage:=stSDSin.stTransferArmHStage,
    astPositionState:=stSDSin.astTransferArmHPosState,
    eEnumSet:=stSDSin.eTransferArmHStateSet,
    eEnumGet:=stSDSin.eTransferArmHStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stTransferArmHEpicsToPlc,
    stPlcToEpics=>stSDSin.stTransferArmHPlcToEpics
);

stSDSin.fbTransferArmRPos1D(
    stMotionStage:=stSDSin.stTransferArmRStage,
    astPositionState:=stSDSin.astTransferArmRPosState,
    eEnumSet:=stSDSin.eTransferArmRStateSet,
    eEnumGet:=stSDSin.eTransferArmRStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stTransferArmREpicsToPlc,
    stPlcToEpics=>stSDSin.stTransferArmRPlcToEpics
);

stSDSin.fbGarageYPos1D(
    stMotionStage:=stSDSin.stGarageYStage,
    astPositionState:=stSDSin.astGarageYPosState,
    eEnumSet:=stSDSin.eGarageYStateSet,
    eEnumGet:=stSDSin.eGarageYStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stGarageYEpicsToPlc,
    stPlcToEpics=>stSDSin.stGarageYPlcToEpics
);

stSDSin.fbGarageRPos1D(
    stMotionStage:=stSDSin.stGarageRStage,
    astPositionState:=stSDSin.astGarageRPosState,
    eEnumSet:=stSDSin.eGarageRStateSet,
    eEnumGet:=stSDSin.eGarageRStateGet,
    bEnable:=TRUE,
    stEpicsToPlc:=stSDSin.stGarageREpicsToPlc,
    stPlcToEpics=>stSDSin.stGarageRPlcToEpics
);

// Ensure UI boolean commands are cleared after holding for one second.
stSDSin.stUISelect.bExitManualControl := FALSE;
stSDSin.stUISelect.bHomeGarage := FALSE;
stSDSin.stUISelect.bHomeTransferArm := FALSE;
stSDSin.stUISelect.bLoad := FALSE;
stSDSin.stUISelect.bLoadArmFromGarage := FALSE;
stSDSin.stUISelect.bLoadDiffractometerFromArm := FALSE;
stSDSin.stUISelect.bLoadGarageFromPort := FALSE;
stSDSin.stUISelect.bLoadUnloadGarageFromPort := FALSE;
stSDSin.stUISelect.bManualControl := FALSE;
stSDSin.stUISelect.bProceed := FALSE;
stSDSin.stUISelect.bCancel := FALSE;
stSDSin.stUISelect.bUnload := FALSE;
stSDSin.stUISelect.bUnloadArmToGarage := FALSE;
stSDSin.stUISelect.bUnloadDiffractometerToArm := FALSE;

// Align with the saved selection at the end of each cycle.
stSDSin.stUISelect.eGarageSlot := stSDSin.eSelectedGarageSlot;
]]></ST>
    </Implementation>
    <Action Name="ACT_CheckHomeStatus" Id="{2164ae39-f7d0-4dc9-a63c-01d4fb087899}">
      <Implementation>
        <ST><![CDATA[
// ACTION - Check home status

CASE stSDSin.nHomingState OF
    0: // Initialization
        stSDSin.tonForwardHomingLimit(IN:=FALSE);
        IF stSDSin.stTransferArmHStage.nCommand = E_EpicsMotorCmd.HOME AND stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.nHomingState := stSDSin.nHomingState + 1;
        END_IF
    1: // Homing Sequence Triggered
        stSDSin.tonForwardHomingLimit(IN:=stSDSin.stTransferArmHStage.Axis.NcToPlc.SetVelo > 0,PT:=T#1s);
        IF stSDSin.stTransferArmHStage.nCommand = E_EpicsMotorCmd.HOME AND stSDSin.stTransferArmHStage.bHome THEN
            stSDSin.nHomingState := stSDSin.nHomingState + 1;
            stSDSin.tonHomingStateTimeout(IN:=FALSE);
            stSDSin.tonForwardHomingLimit(IN:=FALSE);
        ELSIF NOT stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.tonHomingStateTimeout(IN:=TRUE,PT:=T#5s);
            stSDSin.tonForwardHomingLimit(IN:=FALSE);
            IF stSDSin.tonHomingStateTimeout.Q THEN
                stSDSin.nHomingState := -1;
            END_IF
        END_IF
    2: // Homing Sequence Successful
        IF F_Limit(stSDSin.stTransferArmHStage.stAxisStatus.fActPosition, stSDSin.stTransferArmHStage.fHomePosition-0.1, stSDSin.stTransferArmHStage.fHomePosition+0.1, TRUE) THEN
            stSDSin.bHomingRequired := FALSE;
            stSDSin.nHomingState := 0;
            stSDSin.tonHomingRequiredTimeout(IN:=FALSE);
            stSDSin.tonHomingStateTimeout(IN:=FALSE);
        ELSIF NOT stSDSin.stTransferArmHStage.bBusy THEN
            stSDSin.tonHomingStateTimeout(IN:=TRUE,PT:=T#5s);
            IF stSDSin.tonHomingStateTimeout.Q THEN
                stSDSin.nHomingState := -1;
            END_IF
        END_IF
    -1: // Error Handling
        stSDSin.nHomingState := 0;
END_CASE

stSDSin.tonHomingRequiredTimeout(IN:=NOT stSDSin.bHomingRequired,PT:=stSDSin.tHomingRequiredTimeoutTime);
IF stSDSin.tonHomingRequiredTimeout.Q THEN
    stSDSin.bHomingRequired := TRUE;
END_IF
IF stSDSin.stTransferArmHStage.bHome AND F_Limit(
    fVal := stSDSin.stTransferArmHStage.Axis.NcToPlc.ActPos,
    fLLim := -0.01,
    fHLim := 0.01,
    bInclusive := TRUE) THEN
    stSDSin.bHomingRequired := FALSE;
END_IF

stSDSin.fMinUntilHomingRequired := TIME_TO_REAL(stSDSin.tonHomingRequiredTimeout.PT - stSDSin.tonHomingRequiredTimeout.ET) / 60000;

IF stSDSin.stTransferArmHStage.bExecute AND stSDSin.bHomingRequired AND stSDSin.stTransferArmHStage.fPosition > stSDSin.stTransferArmHStage.stAxisStatus.fActPosition AND
    stSDSin.stTransferArmHStage.nCommand <> E_EpicsMotorCmd.HOME THEN

    stSDSin.stTransferArmHStage.bError := TRUE;
    stSDSin.stTransferArmHStage.sCustomErrorMessage := 'Axis homing status overdue. Please home the axis.';
END_IF
]]></ST>
      </Implementation>
    </Action>
    <Method Name="CheckCanDo2Criteria" Id="{0999b5e8-bb20-02f7-067b-9b396a45bac0}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanDo2Criteria
VAR_IN_OUT
    bCanDo : BOOL;
    bCantDo : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
VAR_INPUT
    b1 : BOOL;
    b2 : BOOL;
    sErrorMsgTF : T_MaxString;
    sErrorMsgFT : T_MaxString;
    sErrorMsgFF : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
bCanDo := FALSE;

IF b1 AND b2 THEN
    bCanDo := TRUE;
ELSIF b1 AND NOT b2 THEN
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgTF;
ELSIF NOT b1 AND b2 THEN
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgFT ;
ELSE
    bCantDo := TRUE;
    sErrorMsg := sErrorMsgFF;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanHomeGarage" Id="{890a1d31-ace4-054c-09fc-653e907d57b4}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanHomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if garage can be homed.';

InitHomeGarage(
    stSDS := stSDS
);

IF stSDS.bGarageAboveCollisionHeight THEN
    stSDS.bSuccess := TRUE;
ELSE
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := CONCAT('The garage must be above ',
        CONCAT(LREAL_TO_STRING(stSDSP.fGarageHeightSafeFromCollision),
        ' mm for the rotation axis to be homed.'));
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanHomeTransferArm" Id="{fbca667e-ce63-0155-1370-5275037d5135}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanHomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if transfer arm can be homed.';

InitHomeTransferArm(
    stSDS := stSDS
);

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadArmFromGarage" Id="{d135d403-d5a2-0876-3e20-9dcee1c040ff}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadArmFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if there is an open slot in the transfer arm and at least one full slot in the garage.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bGarageUnloadable,
    b2 := stSDS.bTransferArmLoadable,
    sErrorMsgTF := 'The transfer arm is currently full and cannot be used to remove a sample from the garage.',
    sErrorMsgFT := 'The garage is currently empty and therefore no samples can be removed.',
    sErrorMsgFF := 'The garage is currently empty and the transfer arm is full. Therefore, no samples can be removed.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadDiffractometerFromArm" Id="{71a9fba2-1bcf-05b9-058e-f9891ff23ef5}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadDiffractometerFromArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the diffractometer slot is open and if the transfer arm is carrying a sample.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bDiffractometerLoadable,
    b2 := stSDS.bTransferArmUnloadable,
    sErrorMsgTF := 'The transfer arm is currently empty and cannot be used to place a sample in the diffractometer.',
    sErrorMsgFT := 'The diffractometer already has a sample in it.',
    sErrorMsgFF := 'The diffractoemter already has a sample and the transfer arm is empty.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanLoadUnloadGarageFromPort" Id="{b5df68c0-c587-0d44-3d7f-12592aad6aff}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanLoadUnloadGarageFromPort
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the garage can be loaded or unloaded from the port.';

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanManualControl" Id="{5683863f-d057-0819-1182-dc7a29ed7d7d}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanManualControl
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if we can switch to manual control.';

stSDS.bSuccess := TRUE;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanUnloadArmToGarage" Id="{bb78d83b-b077-07a7-1d29-968f5b337faf}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanUnloadArmToGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if there is an open slot in the garage and if the transfer arm is carrying a sample.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bGarageLoadable,
    b2 := stSDS.bTransferArmUnloadable,
    sErrorMsgTF := 'The transfer arm is currently empty and cannot be used to load sample into the garage.',
    sErrorMsgFT := 'The garage is currently full and therefore no samples can be loaded into it.',
    sErrorMsgFF := 'The garage is currently full and the transfer arm is empty.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="CheckCanUnloadDiffractometerToArm" Id="{06a3e562-c435-024f-1e8f-6fea08c3c9bc}">
      <Declaration><![CDATA[
METHOD PRIVATE CheckCanUnloadDiffractometerToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Checking if the diffractometer slot is full and if the transfer arm is empty.';

CheckCanDo2Criteria(
    bCanDo := stSDS.bSuccess,
    bCantDo := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    b1 := stSDS.bDiffractometerUnloadable,
    b2 := stSDS.bTransferArmLoadable,
    sErrorMsgTF := 'The transfer arm is currently full and cannot be used to unload a sample from the diffractometer.',
    sErrorMsgFT := 'The diffractometer does not have a sample in it.',
    sErrorMsgFF := 'The diffractometeris empty and the transfer arm is full.'
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmDiffractometerExtraction" Id="{d6fa0bd2-2cc3-0c14-25e1-d6269dfc6e95}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmDiffractometerExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the diffractometer and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_DIFF_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmDiffractometerInsertion" Id="{b514667a-7a6b-084f-26ed-c3670ae3eeb5}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmDiffractometerInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the diffractometer and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_DIFF_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmExtraction" Id="{daf24cc7-3887-03b2-0501-848224111e75}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the arm and then click "proceed". If the sample is still in the holder, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_GARAGE_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmGarageFreeToRotate" Id="{80a711c4-d62e-03ac-2a4e-7a389529de7a}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmGarageFreeToRotate
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR_INST
    tonHoldDelay : TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Missing handling for erroring encoder.

tonHoldDelay(
    IN := stSDS.stGarageYStage.Axis.NcToPlc.ActPos >= stSDSP.fGarageHeightSafeFromCollision,
    PT := T#1s
);

stSDS.bGarageAboveCollisionHeight := tonHoldDelay.Q;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmInsertion" Id="{5b3d04ea-c8d6-05a9-2354-558daca75a4d}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm back a few mm. Please confirm the sample is held by the garage and then click "proceed". If the sample is still in the transfer arm, click "retry" to go back to fine adjustment.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.CONFIRM_GARAGE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ConfirmVacuumValveOpen" Id="{7edf6b8d-5100-0c75-373c-38d8169bb405}">
      <Declaration><![CDATA[
METHOD PRIVATE ConfirmVacuumValveOpen
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Verifying that the vacuum valve between SDS and Diff is open.';

stSDS.bSuccess := GVL_Interface.QRIX_VAC_VGC_03_OPEN_LIMIT_SWITCH AND
    NOT GVL_Interface.QRIX_VAC_VGC_03_CLOSED_LIMIT_SWITCH;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendPrerotateTransferArmForLoading" Id="{b432a359-f29f-08b6-14e5-baa64277214a}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendPrerotateTransferArmForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bHArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position and pre-rotating to allow full rotation for screwing in sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bHArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bRArrived
);

IF bHArrived AND bRArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForDiffractometerExtraction" Id="{edd7395a-4155-067c-0fcb-47033a9c8bad}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForDiffractometerExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample unloading position for diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.DIFF_SAMPLE_EXTRACTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForDiffractometerInsertion" Id="{af2f7013-604e-0acd-15bc-e4b8aeba16d6}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForDiffractometerInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position for diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.DIFF_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForExtraction" Id="{571dc7b2-1f9e-05ae-158e-96ba0d810ede}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample extraction position for garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_REMOVAL,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ExtendTransferArmForInsertion" Id="{ce88fcc1-22b7-0eae-3580-6dc8b72fb033}">
      <Declaration><![CDATA[
METHOD PRIVATE ExtendTransferArmForInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bHArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving transfer arm to nominal sample loading position for garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmHStateGet,
    stMotionStage := stSDS.stTransferArmHStage,
    eStateSet := stSDS.eTransferArmHStateSet,
    eEnumSet := E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FineAdjustment" Id="{51bb2359-fcd7-0761-04cb-c7da836e46a0}">
      <Declaration><![CDATA[
METHOD PRIVATE FineAdjustment
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Use the individual motor control to do fine adjustment. Click "proceed" to move to the next step.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="GarageFaceTransferArm" Id="{56fa921e-2ad5-0f31-3b5c-5461e4f980fa}">
      <Declaration><![CDATA[
METHOD PRIVATE GarageFaceTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bYArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Facing garage towards the transfer arm.';

stSDS.eFaceState := E_SDSFaceState.FACE_TRANSFER_ARM;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HoldThenClear" Id="{c1475491-9357-0fa0-082d-566521e8e794}">
      <Declaration><![CDATA[
METHOD PRIVATE HoldThenClear
VAR_IN_OUT
    b1 : BOOL;
END_VAR
VAR_INPUT
    tHoldDuration : TIME := T#1s;
END_VAR
VAR_INST
    tonHoldTimer : TON;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
tonHoldTimer(IN := b1, PT := tHoldDuration);

IF tonHoldTimer.Q THEN
    b1 := FALSE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeGarage" Id="{e7f9863f-7463-0f7b-2f0f-b96d98c66a5a}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Homing the garage.';

IF stSDS.stGarageRStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Garage rotational stage has an active error. Aborting sequence.';
END_IF

HomeStateMachine(
    eHomingState := stSDS.eGarageRHomingState,
    stMotionStage := stSDS.stGarageRStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

IF stSDS.eGarageRHomingState = E_SDSHomingState.HOMED THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeStateMachine" Id="{d40899d6-7938-037f-0dae-15b0ce72f47f}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeStateMachine
VAR_IN_OUT
    eHomingState : E_SDSHomingState;
    stMotionStage : ST_MotionStage;
END_VAR
VAR_OUTPUT
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF stMotionStage.bHome AND F_Limit(
    fVal := stMotionStage.Axis.NcToPlc.ActPos,
    fLLim := -0.01,
    fHLim := 0.01,
    bInclusive := TRUE) THEN
    eHomingState := E_SDSHomingState.HOMED;
END_IF

CASE eHomingState OF
    E_SDSHomingState.INIT:
        eHomingState := E_SDSHomingState.WAIT_NOT_BUSY;
    E_SDSHomingState.WAIT_NOT_BUSY:
        IF NOT stMotionStage.bBusy THEN
            eHomingState := E_SDSHomingState.TRIGGER_HOMING;
        END_IF
    E_SDSHomingState.TRIGGER_HOMING:
        stMotionStage.bHomeCmd := TRUE;
        IF stMotionStage.nCommand = E_EpicsMotorCmd.HOME AND stMotionStage.bBusy THEN
            eHomingState := E_SDSHomingState.WAIT_FOR_HOMED;
        END_IF
    E_SDSHomingState.WAIT_FOR_HOMED:
        IF stMotionStage.bDone THEN
            eHomingState := E_SDSHomingState.HOMED;
        END_IF
ELSE
    bError := TRUE;
    sErrorMsg := 'Homing sequence triggered an unknown state. Aborting sequence.';
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="HomeTransferArm" Id="{f3a5e492-51cd-0ddd-390f-6110239748db}">
      <Declaration><![CDATA[
METHOD PRIVATE HomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Homing the transfer arm.';

IF stSDS.stTransferArmHStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Transfer arm horizontal stage has an active error. Aborting sequence.';
END_IF

IF stSDS.stTransferArmRStage.bError THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'Transfer arm rotational stage has an active error. Aborting sequence.';
END_IF

HomeStateMachine(
    eHomingState := stSDS.eTransferArmHHomingState,
    stMotionStage := stSDS.stTransferArmHStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

HomeStateMachine(
    eHomingState := stSDS.eTransferArmRHomingState,
    stMotionStage := stSDS.stTransferArmRStage,
    bError => stSDS.bError,
    sErrorMsg => stSDS.sErrorMsg
);

IF stSDS.eTransferArmHHomingState = E_SDSHomingState.HOMED AND
   stSDS.eTransferArmRHomingState = E_SDSHomingState.HOMED THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitHomeGarage" Id="{e972dcc7-7e74-0d95-00e2-3f2f25e31bf0}">
      <Declaration><![CDATA[
METHOD PRIVATE InitHomeGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eGarageRHomingState := E_SDSHomingState.INIT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitHomeTransferArm" Id="{019233af-4578-0d4f-2ca9-f60e02147d24}">
      <Declaration><![CDATA[
METHOD PRIVATE InitHomeTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eTransferArmHHomingState := E_SDSHomingState.INIT;
stSDS.eTransferArmRHomingState := E_SDSHomingState.INIT;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitRotateGarageForClearance" Id="{7e2aba46-38f3-0adf-16a6-38b66936ce8e}">
      <Declaration><![CDATA[
METHOD PRIVATE InitRotateGarageForClearance
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.fGarageRotationClearancePos := stSDS.stGarageRStage.Axis.NcToPlc.ActPos + stSDSP.fGarageRotationClearanceOffset;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitSelectGarageSlotForLoading" Id="{c61e3c89-11bd-0130-00ce-6ad87d562048}">
      <Declaration><![CDATA[
METHOD PRIVATE InitSelectGarageSlotForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.EMPTY:
            stSDS.eSelectedGarageSlot := nIndex;
    END_CASE
END_FOR

IF nIndex > E_SDSGarageYStates.B4 THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'There are no empty slots in the garage to load a sample to.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="InitSelectGarageSlotForRemoval" Id="{f2d07db5-4e89-073a-1bd2-525077f83d27}">
      <Declaration><![CDATA[
METHOD PRIVATE InitSelectGarageSlotForRemoval
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.FULL:
            stSDS.eSelectedGarageSlot := nIndex;
    END_CASE
END_FOR

IF nIndex > E_SDSGarageYStates.B4 THEN
    stSDS.bError := TRUE;
    stSDS.sErrorMsg := 'There are no full slots in the garage to extract a sample from.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadArmFromGarage" Id="{f4c1a898-93e4-09a9-3ef9-8a882daf2138}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadArmFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Select_Garage_Slot_for_Removal;
        END_IF
    E_SDSSeqState.Select_Garage_Slot_for_Removal:
        SelectGarageSlotForRemoval(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Garage_Face_Transfer_Arm;
        END_IF
    E_SDSSeqState.Garage_Face_Transfer_Arm:
        GarageFaceTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Garage_to_Slot_Height;
        END_IF
    E_SDSSeqState.Move_Garage_to_Slot_Height:
        MoveGarageToSlotHeight(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction:
        PrerotateTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Extraction:
        ExtendTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_in_Half_Turn;
        END_IF
    E_SDSSeqState.Screw_in_Half_Turn:
        ScrewInHalfTurn(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Unscrew_Sample_from_Garage;
        END_IF
    E_SDSSeqState.Unscrew_Sample_from_Garage:
        UnscrewSampleFromGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Extraction;
        END_IF
    E_SDSSeqState.Confirm_Extraction:
        ConfirmExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseGarageToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_2;
        END_IF
    E_SDSSeqState.Retract_Garage_2:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Return_Garage_to_Home;
        END_IF
    E_SDSSeqState.Return_Garage_to_Home:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadDiffractometerFromArm" Id="{9ebcef9e-8a5d-03b3-1d4a-5d4a85fa1a0e}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadDiffractometerFromArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position;
        END_IF
    E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position:
        MoveDiffractometerToLoadUnloadPosition(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Vacuum_Valve_Open;
        END_IF
    E_SDSSeqState.Confirm_Vacuum_Valve_Open:
        ConfirmVacuumValveOpen(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Insertion;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Insertion:
        PrerotateTransferArmForInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Insertion;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Insertion:
        ExtendTransferArmForDiffractometerInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_Sample_into_Diffractometer;
        END_IF
    E_SDSSeqState.Screw_Sample_into_Diffractometer:
        ScrewSampleIntoDiffractometer(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Diffractometer_Insertion;
        END_IF
    E_SDSSeqState.Confirm_Diffractometer_Insertion:
        ConfirmDiffractometerInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseDiffToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="LoadUnloadGarageFromPort" Id="{7a1c1865-8cc1-022a-2317-4c9a3b79069a}">
      <Declaration><![CDATA[
METHOD PRIVATE LoadUnloadGarageFromPort
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="ManualControl" Id="{75581a9d-1fae-0f7c-133f-c967f378fea2}">
      <Declaration><![CDATA[
METHOD PRIVATE ManualControl
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[

]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveDiffractometerToLoadUnloadPosition" Id="{ed7736de-2c6b-05db-2338-695f78bda22f}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveDiffractometerToLoadUnloadPosition
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bXArrived : BOOL;
    bYArrived : BOOL;
    bZArrived : BOOL;
    b2ThetaYArrived : BOOL;
    bPhiArrived : BOOL;
    bChiArrived : BOOL;
    b2ThetaArrived : BOOL;
    bThetaArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving the diffractometer to load/unload position.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffXStateGet,
    stMotionStage := stSDS.stDiffXStage,
    eStateSet := stSDS.eDiffXStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bXArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffYStateGet,
    stMotionStage := stSDS.stDiffYStage,
    eStateSet := stSDS.eDiffYStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffZStateGet,
    stMotionStage := stSDS.stDiffZStage,
    eStateSet := stSDS.eDiffZStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bZArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiff2ThetaYStateGet,
    stMotionStage := stSDS.stDiff2ThetaYStage,
    eStateSet := stSDS.eDiff2ThetaYStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => b2ThetaYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffPhiStateGet,
    stMotionStage := stSDS.stDiffPhiStage,
    eStateSet := stSDS.eDiffPhiStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bPhiArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffChiStateGet,
    stMotionStage := stSDS.stDiffChiStage,
    eStateSet := stSDS.eDiffChiStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bChiArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiff2ThetaStateGet,
    stMotionStage := stSDS.stDiff2ThetaStage,
    eStateSet := stSDS.eDiff2ThetaStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => b2ThetaArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eDiffThetaStateGet,
    stMotionStage := stSDS.stDiffThetaStage,
    eStateSet := stSDS.eDiffThetaStateSet,
    eEnumSet := E_DiffState.TRANSFER_ARM_INTERFACE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bThetaArrived
);

IF bXArrived AND
   bYArrived AND
   bZArrived AND
   b2ThetaYArrived AND
   bPhiArrived AND
   bChiArrived AND
   b2ThetaArrived AND
   bThetaArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveGarageToSlotHeight" Id="{50a35882-1804-0b08-1081-a423427c611f}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveGarageToSlotHeight
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving garage to selected slot height.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="MoveToGarageSlotFaceTransferArm" Id="{3cf1bab1-d70d-0336-2005-295dae3152a4}">
      <Declaration><![CDATA[
METHOD PRIVATE MoveToGarageSlotFaceTransferArm
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
VAR
    bYArrived : BOOL;
    bRArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Moving garage to selected slot and facing it towards transfer arm.';

stSDS.eFaceState := E_SDSFaceState.FACE_TRANSFER_ARM;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bYArrived
);

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => bRArrived
);

IF bYArrived AND bRArrived THEN
    stSDS.bSuccess := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrerotateTransferArmForExtraction" Id="{69fe999c-9454-0a1a-232b-58e4a267f3fb}">
      <Declaration><![CDATA[
METHOD PRIVATE PrerotateTransferArmForExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Pre-rotating transfer arm to allow full rotation for unscrewing the sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="PrerotateTransferArmForInsertion" Id="{35045289-d22d-014e-1719-711d2bc74ced}">
      <Declaration><![CDATA[
METHOD PRIVATE PrerotateTransferArmForInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Pre-rotating to allow full rotation for screwing in sample.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RetractGarage" Id="{d9daa368-9b47-09f6-01fd-88aca31ba63a}">
      <Declaration><![CDATA[
METHOD PRIVATE RetractGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Retracting garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageYStateGet,
    stMotionStage := stSDS.stGarageYStage,
    eStateSet := stSDS.eGarageYStateSet,
    eEnumSet := E_SDSGarageYStates.RETRACTED,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateGarageForClearance" Id="{349e47cb-9e0e-0f8e-2b8f-84e6b8fa4669}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateGarageForClearance
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Rotating garage to prevent a collision with the transfer arm sample during movement of the garage.';

IF F_Limit(
       fVal := stSDS.stGarageRStage.Axis.NcToPlc.ActPos,
       fLLim := stSDS.fGarageRotationClearancePos - stSDS.stGarageRStage.stAxisParameters.fTargetPosControlRange,
       fHLim := stSDS.fGarageRotationClearancePos + stSDS.stGarageRStage.stAxisParameters.fTargetPosControlRange,
       bInclusive := FALSE
   ) AND NOT stSDS.stGarageRStage.bBusy THEN
   stSDS.bSuccess := TRUE;
ELSE
    stSDS.stGarageRStage.fPosition := stSDS.fGarageRotationClearancePos;
    stSDS.stGarageRStage.fVelocity := stSDS.fGarageRotationSpeed;
    stSDS.stGarageRStage.bMoveCmd := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateGarageForClearanceManual" Id="{8a0bce26-7aa7-0334-0ae2-24e4e79d422c}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateGarageForClearanceManual
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please manually rotate the garage to 45 degrees to prevent it from colliding with the sample on the transfer arm when raising it up. Click "proceed" when complete.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="RotateToFacePort" Id="{a1bcadb9-002a-0cff-0d5c-dd11387aa595}">
      <Declaration><![CDATA[
METHOD PRIVATE RotateToFacePort
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Rotating garage so that the selected slot faces the side port.';

stSDS.eFaceState := E_SDSFaceState.FACE_SIDE_PORT;

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eGarageRStateGet,
    stMotionStage := stSDS.stGarageRStage,
    eStateSet := stSDS.eGarageRStateSet,
    eEnumSet := stSDS.eSelectedGarageSlot,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewInHalfTurn" Id="{5fa348bd-1075-03c4-1b24-c33696dba93e}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewInHalfTurn
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing transfer arm a half turn to catch the sample pin.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_IN_HALF_TURN,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewSampleIntoDiffractometer" Id="{eecf80f7-1382-0e29-0a9d-52d1e59af79e}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewSampleIntoDiffractometer
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing sample into diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_INTO_DIFF,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="ScrewSampleIntoGarage" Id="{709b251d-e374-03ca-14e4-1fe775d4a50f}">
      <Declaration><![CDATA[
METHOD PRIVATE ScrewSampleIntoGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Screwing sample into garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.SCREW_INTO_GARAGE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectDesiredAction" Id="{430e1a14-0c94-0a6d-0a52-e979706575e1}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectDesiredAction
VAR_INPUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select the desired action.';
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectGarageSlotForLoading" Id="{2b10747f-2ffd-01ee-377b-adb0823b9413}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectGarageSlotForLoading
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select a valid garage slot to load a sample to and then click "proceed".';

IF stSDS.stUISelect.eGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.stUISelect.eGarageSlot <= E_SDSGarageYStates.B4 THEN
    CASE stSDSP.astGarageSlot[stSDS.stUISelect.eGarageSlot].eState OF
        E_SampleSlotStates.DISABLED:
            stSDS.sErrorMsg := 'The selected garage slot is currently disabled.';
        E_SampleSlotStates.EMPTY:
            stSDS.eSelectedGarageSlot := stSDS.stUISelect.eGarageSlot;
        E_SampleSlotStates.FULL:
            stSDS.sErrorMsg := 'The selected garage slot is currently full.';
    END_CASE
ELSE
    stSDS.sErrorMsg := 'Please select a valid slot from T1 to B4.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectGarageSlotForRemoval" Id="{eacea1be-0497-0bdd-04d8-27aa274fb735}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectGarageSlotForRemoval
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Please select a valid garage slot to retrieve a sample from and then click "proceed".';

IF stSDS.stUISelect.eGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.stUISelect.eGarageSlot <= E_SDSGarageYStates.B4 THEN
    CASE stSDSP.astGarageSlot[stSDS.stUISelect.eGarageSlot].eState OF
        E_SampleSlotStates.DISABLED:
            stSDS.sErrorMsg := 'The selected garage slot is currently disabled.';
        E_SampleSlotStates.EMPTY:
            stSDS.sErrorMsg := 'The selected garage slot is currently empty.';
        E_SampleSlotStates.FULL:
            stSDS.eSelectedGarageSlot := stSDS.stUISelect.eGarageSlot;
    END_CASE
ELSE
    stSDS.sErrorMsg := 'Please select a valid slot from T1 to B4.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SelectLoadUnloadGarage" Id="{a35c3c83-d238-09ef-3607-5155cde28cc1}">
      <Declaration><![CDATA[
METHOD PRIVATE SelectLoadUnloadGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.sStatusMsg := 'Select whether you would like to load a sample to the garage or remove a sample to the garage.';

stSDS.bLoadingSelected := FALSE;
stSDS.bUnloadingSelected := FALSE;

IF stSDS.stUISelect.bLoad THEN
    stSDS.bLoadingSelected := TRUE;
ELSIF stSDS.stUISelect.bUnload THEN
    stSDS.bUnloadingSelected := TRUE;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetPositionStateWaitForArrivalQuitIfError" Id="{d44e2606-d30e-0dfa-0e6d-d39d755dd87c}">
      <Declaration><![CDATA[
METHOD PRIVATE SetPositionStateWaitForArrivalQuitIfError
VAR_IN_OUT
    eStateGet : UINT;
    stMotionStage : ST_MotionStage;
    eStateSet : UINT;
    bError : BOOL;
    sErrorMsg : T_MaxString;
END_VAR
VAR_INPUT
    eEnumSet : UINT;
END_VAR
VAR_OUTPUT
    bArrived : BOOL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF eStateGet = eEnumSet AND
    NOT stMotionStage.bBusy THEN
    bArrived := TRUE;
ELSIF stMotionStage.bError THEN
    bError := TRUE;
    sErrorMsg := 'And axis error occurred. Aborting sequence.';
END_IF

IF eStateGet <> eEnumSet THEN
    eStateSet := eEnumSet;
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSeqState" Id="{5732567c-ff6f-0fc6-00b4-ad7738497567}">
      <Declaration><![CDATA[
METHOD PRIVATE SetSeqState
VAR_INPUT
    stSDS : ST_SDS;
    eSeqState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eSeqState := eSeqState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetState" Id="{f0976d71-98de-093b-2162-d355b7bb1b7a}">
      <Declaration><![CDATA[
METHOD PRIVATE SetState
VAR_INPUT
    stSDS : ST_SDS;
    eState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eState := eState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SetSubstate" Id="{31db8c10-c435-0cb2-3996-0d4292874597}">
      <Declaration><![CDATA[
METHOD PRIVATE SetSubstate
VAR_INPUT
    stSDS : ST_SDS;
    eSubState : E_SDSState;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.eSubState := eSubState;
]]></ST>
      </Implementation>
    </Method>
    <Method Name="StateMachine" Id="{18b416ce-bd12-0d40-24f1-ec051178da5e}">
      <Declaration><![CDATA[
METHOD PRIVATE StateMachine
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
//IF stSDS.bError THEN
//    stSDS.eState := E_SDSState.Error;
//END_IF

IF stSDS.stUISelect.bCancel THEN
    stSDS.eState := E_SDSState.Standby;
    stSDS.eSubState := E_SDSSubState.Inactive;
    stSDS.eSeqState := E_SDSSeqState.Inactive;
    stSDS.bError := FALSE;
    stSDS.sErrorMsg := '';
END_IF

stSDS.sStatusMsg := '';

CASE stSDS.eState OF
    E_SDSState.Standby:
        IF stSDS.bEnable THEN
            stSDS.eState := E_SDSState.Operating;
            stSDS.eSubState := E_SDSSubstate.Select_Desired_Action;
            stSDS.eSeqState := E_SDSSeqState.Inactive;
        ELSE
            stSDS.eSubState := E_SDSSubState.Inactive;
            stSDS.eSeqState := E_SDSSeqState.Inactive;
        END_IF
    E_SDSState.Operating:
        IF NOT stSDS.bEnable THEN
            stSDS.eState := E_SDSState.Standby;
        ELSE
            SubStateMachine(
                stSDS := stSDS,
                stSDSP := stSDSP
            );
        END_IF
    E_SDSState.Error:
        IF NOT stSDS.bError THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
        stSDS.eSubState := E_SDSSubState.Inactive;
        stSDS.eSeqState := E_SDSSeqState.Inactive;
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="SubStateMachine" Id="{9fc31863-5b4e-030f-0acf-49219a215983}">
      <Declaration><![CDATA[
METHOD PRIVATE SubStateMachine
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

CASE stSDS.eSubState OF
    E_SDSSubState.Inactive:
        ; // Do nothing
    E_SDSSubState.Select_Desired_Action:
        IF stSDS.stUISelect.bHomeGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Home_Garage;
        ELSIF stSDS.stUISelect.bHomeTransferArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Home_Transfer_Arm;
        ELSIF stSDS.stUISelect.bLoadArmFromGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Arm_from_Garage;
        ELSIF stSDS.stUISelect.bUnloadArmToGarage THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Unload_Arm_to_Garage;
        ELSIF stSDS.stUISelect.bLoadUnloadGarageFromPort THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Unload_Garage_from_Port;
        ELSIF stSDS.stUISelect.bLoadDiffractometerFromArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Load_Diffractometer_from_Arm;
        ELSIF stSDS.stUISelect.bUnloadDiffractometerToArm THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Unload_Diffractometer_to_Arm;
        ELSIF stSDS.stUISelect.bManualControl THEN
            stSDS.eSubState := E_SDSSubstate.Check_Can_Manual_Control;
        END_IF
    E_SDSSubState.Check_Can_Home_Garage:
        CheckCanHomeGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Home_Garage;
        END_IF
    E_SDSSubState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSState.Standby;
        END_IF
    E_SDSSubState.Check_Can_Home_Transfer_Arm:
        CheckCanHomeTransferArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Home_Transfer_Arm;
        END_IF
    E_SDSSubState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Arm_From_Garage:
        CheckCanLoadArmFromGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Arm_from_Garage;
        END_IF
    E_SDSSubState.Load_Arm_from_Garage:
        LoadArmFromGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Diffractometer_from_Arm:
        CheckCanLoadDiffractometerFromArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Diffractometer_from_Arm;
        END_IF
    E_SDSSubState.Load_Diffractometer_from_Arm:
        LoadDiffractometerFromArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Load_Unload_Garage_from_Port:
        CheckCanLoadUnloadGarageFromPort(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Load_Unload_Garage_from_Port;
        END_IF
    E_SDSSubState.Load_Unload_Garage_from_Port:
        LoadUnloadGarageFromPort(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Unload_Arm_to_Garage:
        CheckCanUnloadArmToGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Unload_Arm_to_Garage;
        END_IF
    E_SDSSubState.Unload_Arm_to_Garage:
        UnloadArmToGarage(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Unload_Diffractometer_to_Arm:
        CheckCanUnloadDiffractometerToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Unload_Diffractometer_to_Arm;
        END_IF
    E_SDSSubState.Unload_Diffractometer_to_Arm:
        UnloadDiffractometerToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
    E_SDSSubState.Check_Can_Manual_Control:
        CheckCanManualControl(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSubState := E_SDSSubstate.Manual_Control;
        END_IF
    E_SDSSubState.Manual_Control:
        ManualControl(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eState := E_SDSstate.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnloadArmToGarage" Id="{b0d67d1f-c7d6-0992-2fbf-713efb0b4c20}">
      <Declaration><![CDATA[
METHOD PRIVATE UnloadArmToGarage
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.bSuccess := FALSE;
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.stUISelect.bProceed := FALSE;
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Select_Garage_Slot_for_Loading;
        END_IF
    E_SDSSeqState.Select_Garage_Slot_for_Loading:
        SelectGarageSlotForLoading(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Garage_Face_Transfer_Arm;
        END_IF
    E_SDSSeqState.Garage_Face_Transfer_Arm:
        GarageFaceTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Lower:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Garage_to_Slot_Height;
        END_IF
    E_SDSSeqState.Move_Garage_to_Slot_Height:
        MoveGarageToSlotHeight(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Insertion;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Insertion:
        ExtendTransferArmForInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Screw_Sample_into_Garage;
        END_IF
    E_SDSSeqState.Screw_Sample_into_Garage:
        ScrewSampleIntoGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Insertion;
        END_IF
    E_SDSSeqState.Confirm_Insertion:
        ConfirmInsertion(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseGarageToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearance(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_2;
        END_IF
    E_SDSSeqState.Retract_Garage_2:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Return_Garage_to_Home;
        END_IF
    E_SDSSeqState.Return_Garage_to_Home:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eState := E_SDSState.Standby;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnloadDiffractometerToArm" Id="{2f8ca672-813e-009c-2356-1e14c976bafa}">
      <Declaration><![CDATA[
METHOD PRIVATE UnloadDiffractometerToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
CASE stSDS.eSeqState OF
    E_SDSSeqState.Inactive:
        stSDS.eSeqState := E_SDSSeqState.Home_Transfer_Arm;
    E_SDSSeqState.Home_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Check_Garage_Height;
        END_IF
    E_SDSSeqState.Check_Garage_Height:
        IF stSDS.bGarageAboveCollisionHeight THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        ELSE
            stSDS.eSeqState := E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise;
        END_IF
    E_SDSSeqState.Manually_Rotate_Garage_for_Clearance_to_Raise:
        RotateGarageForClearanceManual(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Garage_1;
        END_IF
    E_SDSSeqState.Retract_Garage_1:
        RetractGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Home_Garage;
        END_IF
    E_SDSSeqState.Home_Garage:
        HomeGarage(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position;
        END_IF
    E_SDSSeqState.Move_Diffractometer_to_Load_Unload_Position:
        MoveDiffractometerToLoadUnloadPosition(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Vacuum_Valve_Open;
        END_IF
    E_SDSSeqState.Confirm_Vacuum_Valve_Open:
        ConfirmVacuumValveOpen(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction;
        END_IF
    E_SDSSeqState.Prerotate_Transfer_Arm_for_Extraction:
        PrerotateTransferArmForExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Extraction;
        END_IF
    E_SDSSeqState.Extend_Transfer_Arm_for_Diffractometer_Extraction:
        ExtendTransferArmForDiffractometerExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Fine_Adjustment:
        FineAdjustment(
            stSDS := stSDS
        );
        IF stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Unscrew_Sample_from_Diffractometer;
        END_IF
    E_SDSSeqState.Unscrew_Sample_from_Diffractometer:
        UnscrewSampleFromDiffractometer(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Confirm_Diffractometer_Extraction;
        END_IF
    E_SDSSeqState.Confirm_Diffractometer_Extraction:
        ConfirmDiffractometerExtraction(
            stSDS := stSDS
        );
        IF stSDS.bSuccess AND stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Update_Sample_Database;
        ELSIF stSDS.stUISelect.bRetry THEN
            stSDS.eSeqState := E_SDSSeqState.Fine_Adjustment;
        END_IF
    E_SDSSeqState.Update_Sample_Database:
        UpdateSampleLocationDatabaseDiffToArm(
            stSDS := stSDS,
            stSDSP := stSDSP
        );
        IF stSDS.bSuccess OR stSDS.stUISelect.bProceed THEN
            stSDS.eSeqState := E_SDSSeqState.Retract_Transfer_Arm;
        END_IF
    E_SDSSeqState.Retract_Transfer_Arm:
        HomeTransferArm(
            stSDS := stSDS
        );
        IF stSDS.bSuccess THEN
            stSDS.eSeqState := E_SDSSeqState.Rotate_Garage_for_Clearance_to_Raise;
        END_IF
END_CASE
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnscrewSampleFromDiffractometer" Id="{87e1f71d-9b53-09ef-2eb4-a9381b5c29a8}">
      <Declaration><![CDATA[
METHOD PRIVATE UnscrewSampleFromDiffractometer
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Unscrewing sample from diffractometer.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.UNSCREW_FROM_DIFF,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UnscrewSampleFromGarage" Id="{3464dcca-0819-0f26-0b96-1ede58811e89}">
      <Declaration><![CDATA[
METHOD PRIVATE UnscrewSampleFromGarage
VAR_IN_OUT
    stSDS : ST_SDS;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Unscrewing sample from garage.';

SetPositionStateWaitForArrivalQuitIfError(
    eStateGet := stSDS.eTransferArmRStateGet,
    stMotionStage := stSDS.stTransferArmRStage,
    eStateSet := stSDS.eTransferArmRStateSet,
    eEnumSet := E_SDSTransferArmRStates.UNSCREW_FROM_GARAGE,
    bError := stSDS.bError,
    sErrorMsg := stSDS.sErrorMsg,
    bArrived => stSDS.bSuccess
);
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateLoadUnloadAbleStatuses" Id="{e68786cd-675c-079a-1ee4-032b6bf55b9a}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateLoadUnloadAbleStatuses
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Determine whether the transfer arm is loadable or unloadable.
// If the transfer arm is disabled, then nothing is allowed.
// If the transfer arm is empty, it can be loaded.
// If the transfer arm is full, it can be unloaded.
CASE stSDSP.stTransferArmSlot.eState OF
    E_SampleSlotStates.EMPTY:
        stSDS.bTransferArmLoadable   := TRUE;
        stSDS.bTransferArmUnloadable := FALSE;
    E_SampleSlotStates.FULL:
        stSDS.bTransferArmLoadable   := FALSE;
        stSDS.bTransferArmUnloadable := TRUE;
    E_SampleSlotStates.DISABLED:
        stSDS.bTransferArmLoadable   := FALSE;
        stSDS.bTransferArmUnloadable := FALSE;
END_CASE

// Determine whether the diffractometer slot is loadable or unloadable.
// If the diffractometer slot is disabled, then nothing is allowed.
// If the diffractometer slot is empty, it can be loaded.
// If the diffractometer slot is full, it can be unloaded.
CASE stSDSP.stDiffractometerSlot.eState OF
    E_SampleSlotStates.EMPTY:
        stSDS.bDiffractometerLoadable   := TRUE;
        stSDS.bDiffractometerUnloadable := FALSE;
    E_SampleSlotStates.FULL:
        stSDS.bDiffractometerLoadable   := FALSE;
        stSDS.bDiffractometerUnloadable := TRUE;
    E_SampleSlotStates.DISABLED:
        stSDS.bDiffractometerLoadable   := FALSE;
        stSDS.bDiffractometerUnloadable := FALSE;
END_CASE

// Determine whether the garage is loadable or unloadable.
// If all slots in the garage are disabled, then nothing is allowed.
// If at least one slot in the garage is empty, it can be loaded.
// If at least one slot in the garage is full, it can be unloaded.
stSDS.bGarageLoadable := FALSE;
stSDS.bGarageUnloadable := FALSE;
FOR nIndex := 0 TO stSDS.nGarageSlots - 1 BY 1 DO
    CASE stSDSP.astGarageSlot[nIndex].eState OF
        E_SampleSlotStates.EMPTY:
            stSDS.bGarageLoadable   := TRUE;
        E_SampleSlotStates.FULL:
            stSDS.bGarageUnloadable := TRUE;
        E_SampleSlotStates.DISABLED:
            stSDS.bGarageLoadable := FALSE;
            stSDS.bGarageUnloadable := FALSE;
    END_CASE
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdatePositionStates" Id="{5ac718fe-1224-0ef1-1133-344bf58c49d2}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdatePositionStates
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
// Update parameters for transfer arm states.
// Horizontal axis states
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.RETRACTED], sName:='RETRACTED',
    fPosition:=0,
    fVelocity:=2,
    fDelta := 2.5
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.GARAGE_SAMPLE_REMOVAL], sName:='GARAGE_SAMPLE_REMOVAL',
    fPosition:=28,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_GARAGE_EXTRACTION], sName:='CONFIRM_GARAGE_EXTRACTION',
    fPosition:=23,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.GARAGE_SAMPLE_INSERTION], sName:='GARAGE_SAMPLE_INSERTION',
    fPosition:=30,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_GARAGE_INSERTION], sName:='CONFIRM_GARAGE_INSERTION',
    fPosition:=25,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.DIFF_SAMPLE_INSERTION], sName:='DIFF_SAMPLE_INSERTION',
    fPosition:=100,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.DIFF_SAMPLE_EXTRACTION], sName:='DIFF_SAMPLE_EXTRACTION',
    fPosition:=100,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_DIFF_INSERTION], sName:='CONFIRM_DIFF_INSERTION',
    fPosition:=75,
    fVelocity:=2
);
fbStateSetup(stPositionState:=stSDS.astTransferArmHPosState[E_SDSTransferArmHStates.CONFIRM_DIFF_EXTRACTION], sName:='CONFIRM_DIFF_EXTRACTION',
    fPosition:=75,
    fVelocity:=2
);

// Rotational axis states
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.FULLY_CCW], sName:='FULLY_CCW',
    fPosition:=0,
    fVelocity:=stSDS.fGarageRotationSpeed,
    fDelta := 5.0
);
IF NOT stSDS.stTransferArmRStage.bLimitForwardEnable THEN
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL], sName:='PREROTATE_SAMPLE_REMOVAL',
        fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
ELSE
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_REMOVAL], sName:='PREROTATE_SAMPLE_REMOVAL',
        fPosition:=20000,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
END_IF
IF NOT stSDS.stTransferArmRStage.bLimitBackwardEnable THEN
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION], sName:='PREROTATE_SAMPLE_INSERTION',
        fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
ELSE
    fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.PREROTATE_SAMPLE_INSERTION], sName:='PREROTATE_SAMPLE_INSERTION',
        fPosition:=-20000,
        fVelocity:=stSDS.fTransferArmRotationSpeed
    );
END_IF
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.UNSCREW_FROM_GARAGE], sName:='UNSCREW_FROM_GARAGE',
    fPosition:=0,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.UNSCREW_FROM_DIFF], sName:='UNSCREW_FROM_DIFF',
    fPosition:=0,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_INTO_GARAGE], sName:='SCREW_INTO_GARAGE',
    fPosition:=1700,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_INTO_DIFF], sName:='SCREW_INTO_DIFF',
    fPosition:=1700,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);
fbStateSetup(stPositionState:=stSDS.astTransferArmRPosState[E_SDSTransferArmRStates.SCREW_IN_HALF_TURN], sName:='SCREW_IN_HALF_TURN',
    fPosition:=stSDS.stTransferArmRStage.Axis.NcToPlc.ActPos + 180,
    fVelocity:=stSDS.fTransferArmRotationSpeed
);

// Update parameters for garage states.
// Y axis states
fbStateSetup(
    stPositionState := stSDS.astGarageYPosState[E_SDSGarageYStates.RETRACTED], sName:='RETRACTED',
    fPosition := 0.0,
    fVelocity := 1.0,
    fDelta := 10.0
);

FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    fbStateSetup(
        stPositionState := stSDS.astGarageYPosState[nIndex],
        sName := stSDSP.astGarageSlot[nIndex].sTag,
        fPosition := stSDSP.astGarageSlot[nIndex].fYPos,
        fVelocity := 1.0,
    );
END_FOR

// Rotational axis states
fbStateSetup(
    stPositionState := stSDS.astGarageRPosState[E_SDSGarageRStates.PREDICTED_HOME], sName:='PREDICTED_HOME',
    fPosition := 0.0,
    fVelocity := 10.0,
    fDelta := 1.0,
    bLocked := TRUE
);

FOR nIndex := E_SDSGarageYStates.T1 TO E_SDSGarageYStates.B4 BY 1 DO
    CASE stSDS.eFaceState OF
        E_SDSFaceState.FACE_SIDE_PORT:
            fbStateSetup(
                stPositionState := stSDS.astGarageRPosState[nIndex],
                sName := stSDSP.astGarageSlot[nIndex].sTag,
                fPosition := stSDSP.astGarageSlot[nIndex].fDeg + stSDS.fFacePortOffset,
                fVelocity := 10.0,
            );
    ELSE
        fbStateSetup(
            stPositionState := stSDS.astGarageRPosState[nIndex],
            sName := stSDSP.astGarageSlot[nIndex].sTag,
            fPosition := stSDSP.astGarageSlot[nIndex].fDeg,
            fVelocity := 10.0,
        );
    END_CASE
END_FOR
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseDiffToArm" Id="{a4d1bec6-765a-06fe-338e-81497e18cf7d}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseDiffToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR
    stTempSlot : ST_SampleSlot;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stTempSlot := stSDSP.stTransferArmSlot;

stSDS.sStatusMsg := 'Updating the sample database.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.stTransferArmSlot.eState := stSDSP.stDiffractometerSlot.eState;
    stSDSP.stTransferArmSlot.sDesc := stSDSP.stDiffractometerSlot.sDesc;

    stSDSP.stDiffractometerSlot.eState := stTempSlot.eState;
    stSDSP.stDiffractometerSlot.sDesc := stTempSlot.sDesc;

    stSDS.bSuccess := TRUE;
ELSE
    stSDS.sErrorMsg := 'Failed to automatically update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface. After manually updating the database, click "proceed" to continue.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseGarageToArm" Id="{e2889859-a73f-0c94-0d3c-77770598f619}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseGarageToArm
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
VAR
    stTempSlot : ST_SampleSlot;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stTempSlot := stSDSP.stTransferArmSlot;

stSDS.sStatusMsg := 'Updating the sample database.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.stTransferArmSlot.eState := stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState;
    stSDSP.stTransferArmSlot.sDesc := stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc;

    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := stTempSlot.eState;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := stTempSlot.sDesc;

    stSDS.bSuccess := TRUE;
ELSE
    stSDS.sErrorMsg := 'Failed to automatically update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface. After manually updating the database, click "proceed" to continue.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseManualExtraction" Id="{d484c4e3-0eb4-0b09-1524-19e30f3fb155}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseManualExtraction
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Please extract the sample. Click "proceed" when you have finished.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := E_SampleSlotStates.EMPTY;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := '';
ELSE
    stSDS.sErrorMsg := 'Failed to update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface.';
END_IF
]]></ST>
      </Implementation>
    </Method>
    <Method Name="UpdateSampleLocationDatabaseManualInsertion" Id="{7c97ebec-2d6c-02c9-0635-1131bb2f288f}">
      <Declaration><![CDATA[
METHOD PRIVATE UpdateSampleLocationDatabaseManualInsertion
VAR_IN_OUT
    stSDS : ST_SDS;
    stSDSP : ST_SDSPersistent;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
stSDS.bSuccess := FALSE;

stSDS.sStatusMsg := 'Please insert the sample and write an identifying description for it in the text field. Click "proceed" when you have finished.';

IF stSDS.eSelectedGarageSlot >= E_SDSGarageYStates.T1 AND stSDS.eSelectedGarageSlot <= E_SDSGarageYStates.B4 THEN
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].eState := E_SampleSlotStates.FULL;
    stSDSP.astGarageSlot[stSDS.eSelectedGarageSlot].sDesc := stSDS.stUISelect.sTextInput;
ELSE
    stSDS.sErrorMsg := 'Failed to update sample position in database. Invalid slot selected. Sequence will continue, but please manually update the database from the interface.';
END_IF
]]></ST>
      </Implementation>
    </Method>
  </POU>
</TcPlcObject>